
[{"content":" ","date":"16 August 2026","externalUrl":null,"permalink":"/posts/","section":"Blog","summary":"","title":"Blog","type":"posts"},{"content":" ","date":"16 August 2026","externalUrl":null,"permalink":"/","section":"yuuniji","summary":"","title":"yuuniji","type":"page"},{"content":"","date":"11 October 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"11 October 2025","externalUrl":null,"permalink":"/categories/life/","section":"Categories","summary":"","title":"Life","type":"categories"},{"content":"Period: September 14 – October 11, 2025\nSchool: TARGET Global English Academy (Cebu, Philippines) 📍 Google Maps\n★ Why I Chose the Philippines # I chose to study in the Philippines because the cost-performance ratio for learning English here is incredibly high. You can take multiple one-on-one lessons each day at a reasonable price, which would be unthinkable in most other countries.\n★ Why I Chose Target Academy # Target is a Japanese-managed language school, which was exactly what I wanted. Since I also plan to work in Japan in the future, I thought it would be a great opportunity to make Japanese friends, learn more about their culture, and improve both my English and cross-cultural communication skills at the same time.\n★ My Daily Class Schedule # From Monday to Thursday, my day started at 8:30 a.m. with a vocabulary test, followed by seven lessons. On Friday, there was no test — just regular classes starting from 9:00 a.m.\nTime Class / Teacher Room Contents 8:30 - 9:00 (Mon–Thu) Vocabulary Test Daily words review 9:00 - 9:45 Power Speaking (Group) G-07 Group discussion \u0026amp; presentation 9:55 - 10:40 Kyla B-07 Talk Talk Talk 1 10:50 - 11:35 Stella B-11 Speak Your Mind 1 \u0026amp; 2 11:45 - 12:30 — — Free time (break / lunch / review) 13:30 - 14:15 Ricca B-15 Listening practice 14:25 - 15:10 Mae D-33 Reading Advantage 1 15:20 - 16:05 Maris B-09 Engoo Daily News discussion 16:15 - 17:00 Pronunciation (Group) G-09 Mastering the American Accent ★ Impressive Teachers # Each teacher had their own unique charm:\nKyla – Very cheerful and talkative; her class felt like chatting with a friend. Stella – Her lessons were fast-paced and always challenging, pushing me to improve quickly. Ricca – Gentle and patient, she carefully corrected my pronunciation and grammar mistakes. Mae – More like a friend than a teacher, I could talk with her about anything. Maris – Friendly but strict when needed. Her Engoo News class helped me build confidence in expressing opinions. Group classes (Power Speaking \u0026amp; Pronunciation) – Great for meeting new students and practicing public speaking. ★ Memorable Weekends # ◇First Weekend (Sep 19–21) # On Friday, after finishing my classes, I joined my Japanese friend’s graduation ceremony. We took photos, had dinner, and planned to go shopping, but heavy rain ruined our plan. Instead, we played billiards until he left for Japan around 10 p.m.—I felt really sad. Later, another friend invited me for drinks. We played some drinking games, and it turned out to be a really fun night.\nOn Saturday, I woke up late because I was drunk the night before. After lunch, I tried studying but couldn’t focus. In the afternoon, my roommate and I visited a Christian church, though the traffic was terrible. At night, I had dinner with friends, sang karaoke at PINK CEBU, and went clubbing(CEBU ICON) until 1 a.m.—such a crazy night.\nOn Sunday, I woke up late again, had lunch, and studied in the self-study room. In the evening, I did some laundry and continued studying quietly. It was a simple but peaceful end to the weekend.\n◇Second Weekend (Sep 27–28) # I misunderstood a Japanese classmate, Mana — I thought there was something more between us, but actually, we were just friends. Still, that experience taught me an important lesson: sometimes you have to be proactive and take the first step, even if things don’t go as expected.\n◇Third Weekend (Oct 3–5) # On Friday night, I went to a bar with Jack (China), Zoom (China), Felix (Taiwan), and Winnie (Taiwan). On the way to get a massage, Winnie and I talked about what happened between me and Mana last weekend. She was like a love advisor, and her words made me realize I had misunderstood Mana.\nWhen we arrived, the massage shop was fully booked, so Winnie made a reservation for 2 p.m. the next day. The next afternoon, we went together, and it was incredibly relaxing — a full-body massage for only 400 pesos!\nAfter returning to school, I was playing billiards with Felix when Mana invited us to dinner(Maroo Korean Restaurant). During dinner, I apologized to her for my misunderstanding. Back at the dorm, I prepared for my Japanese Nursing Care Skills exams scheduled for Sunday.\nOn Sunday, I went alone to Centro Maximo Bldg., Room 308, to take the two exams. I passed the first one (Nursing Care Skills Evaluation Test in Chinese) but failed the second (Japanese Language Evaluation Test in Japanese). After the exams, I went shopping at H\u0026amp;M Home in Ayala Center Cebu, bought a pair of gray jeans, and studied again after returning to school. It was a perfect way to end the weekend.\n◇The Final Week in Cebu # Time flew by so fast that I could hardly believe it was already my last week in Cebu.\nWednesday, October 8\nThat night, Jack, Zoom, Felix, and I went to SM City Cebu for dinner and did some shopping afterward. It was just a simple night out, but it felt nice to hang out together one last time before the week ended.\nThursday, October 9\nAfter dinner, Jack, Zoom, and I played billiards — I got lucky and kept winning! Later, I saw my new roommate Reo swimming, so the three of us, plus Felix, jumped into the pool to join him. Rihao, the Japanese manager who had just finished playing basketball, also came over. We ended up playing a tag game in the pool — it was so much fun!\nThen my Japanese roommates Yuzu and Masa joined in too, and things got even livelier. We played until we completely forgot about the 7 p.m. English test. But honestly, it didn’t matter. Having that much fun together was worth it.\nAfter showering, Felix called me to the E01 classroom to eat burgers and chat with Jack and Zoom. I also invited Winnie to come — I wanted to try her magical glasses that could record videos and take photos. We chatted for a while, laughed a lot, and later I went back to the dorm and played a few rounds of Valorant(video game) with Jack. That’s how our Thursday — the second-to-last day — came to an end.\nFriday, October 10\nFriday morning started normally — until an earthquake alarm went off after my first class. The second and third classes were canceled, which made my last day surprisingly relaxed. I took the chance to take photos with my teachers and friends, and asked them to sign their names on my white Cebu T-shirt.\nAfter lunch, I went back to classes as usual. By 5 p.m., my final lesson was over — the end of my study journey at Target. I quickly changed into a black T-shirt because I had spilled bubble tea on the white one earlier.\nThe graduation ceremony started at 5:10 p.m. There were five of us graduating: Felix, Winnie, an Arab father and daughter, and me. It was my first English speech, and I was so nervous but excited. I had memorized my entire script, and seeing my roommates Jack, Zoom, Yuzu, Reo, Masa, and friends like Mita there meant a lot to me.\nAfter taking lots of photos, I went back to my room to pack for the next morning’s flight. Around 6:30 p.m., Mana came to find me. I was really touched — I had made her feel uncomfortable before, so I wanted to apologize. She gave me a letter, which meant a lot to me. We took a picture together, and that small moment made everything right again.\nLater at 9 p.m., I went out with Jack, Zoom, and Winnie to Café Hayati, an Arabic restaurant. We had dinner and tried shisha — I didn’t know how to smoke it, so I just gave it a try. We talked until midnight before heading back to school. Then Jack, Zoom, and I played Valorant(video game) until after 1 a.m. I couldn’t sleep the whole night — maybe because I didn’t want to waste my last few hours in the Philippines. I finally fell asleep around 4 a.m.\nSaturday, October 11\nI woke up around 7:30 a.m., got ready, and double-checked my luggage. Then I sat by the gate with Jack, Zoom, and Felix, chatting one last time before I left. I was really grateful they got up early just to send me off.\nSaying goodbye wasn’t easy. Thank you, my friends — see you again someday. Good luck, everyone.\n★ Reflection # After a month of studying abroad, I realized that my English had improved, but the real growth went far beyond language. I learned how to connect with people from different cultures, how to express myself, and how to face my own shortcomings honestly.\nLife at Target was like a small society — studying, misunderstanding, communicating, apologizing, and then moving forward. It wasn’t always easy, but every moment helped me grow.\nWhen I left Cebu, I quietly told myself:\n“Next time I set out, it won’t just be to learn a language — it will be to become a more complete person.”\n★ Photo Gallery (81 photos) # ","date":"11 October 2025","externalUrl":null,"permalink":"/posts/life-3-philippines/","section":"Blog","summary":"","title":"My Language Study Journey in the Philippines 🇵🇭","type":"posts"},{"content":"","date":"11 October 2025","externalUrl":null,"permalink":"/tags/philippines/","section":"Tags","summary":"","title":"Philippines","type":"tags"},{"content":"","date":"11 October 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/categories/programming/","section":"Categories","summary":"","title":"Programming","type":"categories"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/repost/","section":"Tags","summary":"","title":"Repost","type":"tags"},{"content":"This post features three concise and influential articles on programming languages, each authored by a respected expert in the field. Ideal for beginners and experienced programmers alike, these writings shed light on both the practical and philosophical sides of coding.\n★Paul Graham: Being Popular # Original link | Paul Graham\nA friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don\u0026rsquo;t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.\nWhat does make a language popular? Do popular languages deserve their popularity? Is it worth trying to define a good programming language? How would you do it?\nI think the answers to these questions can be found by looking at hackers, and learning what they want. Programming languages are for hackers, and a programming language is good as a programming language (rather than, say, an exercise in denotational semantics or compiler design) if and only if hackers like it.\n◇1 The Mechanics of Popularity # It\u0026rsquo;s true, certainly, that most people don\u0026rsquo;t choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. And yet I think the effect of such external factors on the popularity of programming languages is not as great as it\u0026rsquo;s sometimes thought to be. I think a bigger problem is that a hacker\u0026rsquo;s idea of a good programming language is not the same as most language designers'.\nBetween the two, the hacker\u0026rsquo;s opinion is the one that matters. Programming languages are not theorems. They\u0026rsquo;re tools, designed for people, and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. If a shoe pinches when you put it on, it\u0026rsquo;s a bad shoe, however elegant it may be as a piece of sculpture.\nIt may be that the majority of programmers can\u0026rsquo;t tell a good language from a bad one. But that\u0026rsquo;s no different with any other tool. It doesn\u0026rsquo;t mean that it\u0026rsquo;s a waste of time to try designing a good language. Expert hackers can tell a good language when they see one, and they\u0026rsquo;ll use it. Expert hackers are a tiny minority, admittedly, but that tiny minority write all the good software, and their influence is such that the rest of the programmers will tend to use whatever language they use. Often, indeed, it is not merely influence but command: often the expert hackers are the very people who, as their bosses or faculty advisors, tell the other programmers what language to use.\nThe opinion of expert hackers is not the only force that determines the relative popularity of programming languages — legacy software (Cobol) and hype (Ada, Java) also play a role — but I think it is the most powerful force over the long term. Given an initial critical mass and enough time, a programming language probably becomes about as popular as it deserves to be. And popularity further separates good languages from bad ones, because feedback from real live users always leads to improvements. Look at how much any popular language has changed during its life. Perl and Fortran are extreme cases, but even Lisp has changed a lot. Lisp 1.5 didn\u0026rsquo;t have macros, for example; these evolved later, after hackers at MIT had spent a couple years using Lisp to write real programs. ☍ Macros very close to the modern idea were proposed by Timothy Hart in 1964, two years after Lisp 1.5 was released. What was missing, initially, were ways to avoid variable capture and multiple evaluation; Hart's examples are subject to both. So whether or not a language has to be good to be popular, I think a language has to be popular to be good. And it has to stay popular to stay good. The state of the art in programming languages doesn\u0026rsquo;t stand still. And yet the Lisps we have today are still pretty much what they had at MIT in the mid-1980s, because that\u0026rsquo;s the last time Lisp had a sufficiently large and demanding user base.\nOf course, hackers have to know about a language before they can use it. How are they to hear? From other hackers. But there has to be some initial group of hackers using the language for others even to hear about it. I wonder how large this group has to be; how many users make a critical mass? Off the top of my head, I\u0026rsquo;d say twenty. If a language had twenty separate users, meaning twenty users who decided on their own to use it, I\u0026rsquo;d consider it to be real.\nGetting there can\u0026rsquo;t be easy. I would not be surprised if it is harder to get from zero to twenty than from twenty to a thousand. The best way to get those initial twenty users is probably to use a trojan horse: to give people an application they want, which happens to be written in the new language.\n◇2 External Factors # Let\u0026rsquo;s start by acknowledging one external factor that does affect the popularity of a programming language. To become popular, a programming language has to be the scripting language of a popular system. Fortran and Cobol were the scripting languages of early IBM mainframes. C was the scripting language of Unix, and so, later, was Perl. Tcl is the scripting language of Tk. Java and Javascript are intended to be the scripting languages of web browsers.\nLisp is not a massively popular language because it is not the scripting language of a massively popular system. What popularity it retains dates back to the 1960s and 1970s, when it was the scripting language of MIT. A lot of the great programmers of the day were associated with MIT at some point. And in the early 1970s, before C, MIT\u0026rsquo;s dialect of Lisp, called MacLisp, was one of the only programming languages a serious hacker would want to use.\nToday Lisp is the scripting language of two moderately popular systems, Emacs and Autocad, and for that reason I suspect that most of the Lisp programming done today is done in Emacs Lisp or AutoLisp.\nProgramming languages don\u0026rsquo;t exist in isolation. To hack is a transitive verb — hackers are usually hacking something — and in practice languages are judged relative to whatever they\u0026rsquo;re used to hack. So if you want to design a popular language, you either have to supply more than a language, or you have to design your language to replace the scripting language of some existing system.\nCommon Lisp is unpopular partly because it\u0026rsquo;s an orphan. It did originally come with a system to hack: the Lisp Machine. But Lisp Machines (along with parallel computers) were steamrollered by the increasing power of general purpose processors in the 1980s. Common Lisp might have remained popular if it had been a good scripting language for Unix. It is, alas, an atrociously bad one.\nOne way to describe this situation is to say that a language isn\u0026rsquo;t judged on its own merits. Another view is that a programming language really isn\u0026rsquo;t a programming language unless it\u0026rsquo;s also the scripting language of something. This only seems unfair if it comes as a surprise. I think it\u0026rsquo;s no more unfair than expecting a programming language to have, say, an implementation. It\u0026rsquo;s just part of what a programming language is.\nA programming language does need a good implementation, of course, and this must be free. Companies will pay for software, but individual hackers won\u0026rsquo;t, and it\u0026rsquo;s the hackers you need to attract.\nA language also needs to have a book about it. The book should be thin, well-written, and full of good examples. K\u0026amp;R is the ideal here. At the moment I\u0026rsquo;d almost say that a language has to have a book published by O\u0026rsquo;Reilly. That\u0026rsquo;s becoming the test of mattering to hackers.\nThere should be online documentation as well. In fact, the book can start as online documentation. But I don\u0026rsquo;t think that physical books are outmoded yet. Their format is convenient, and the de facto censorship imposed by publishers is a useful if imperfect filter. Bookstores are one of the most important places for learning about new languages.\n◇3 Brevity # Given that you can supply the three things any language needs — a free implementation, a book, and something to hack — how do you make a language that hackers will like?\nOne thing hackers like is brevity. Hackers are lazy, in the same way that mathematicians and modernist architects are lazy: they hate anything extraneous. It would not be far from the truth to say that a hacker about to write a program decides what language to use, at least subconsciously, based on the total number of characters he\u0026rsquo;ll have to type. If this isn\u0026rsquo;t precisely how hackers think, a language designer would do well to act as if it were.\nIt is a mistake to try to baby the user with long-winded expressions that are meant to resemble English. Cobol is notorious for this flaw. A hacker would consider being asked to write\nadd x to y giving z\ninstead of\nz = x+y\nas something between an insult to his intelligence and a sin against God.\nIt has sometimes been said that Lisp should use first and rest instead of car and cdr, because it would make programs easier to read. Maybe for the first couple hours. But a hacker can learn quickly enough that car means the first element of a list and cdr means the rest. Using first and rest means 50% more typing. And they are also different lengths, meaning that the arguments won\u0026rsquo;t line up when they\u0026rsquo;re called, as car and cdr often are, in successive lines. I\u0026rsquo;ve found that it matters a lot how code lines up on the page. I can barely read Lisp code when it is set in a variable-width font, and friends say this is true for other languages too.\nBrevity is one place where strongly typed languages lose. All other things being equal, no one wants to begin a program with a bunch of declarations. Anything that can be implicit, should be.\nThe individual tokens should be short as well. Perl and Common Lisp occupy opposite poles on this question. Perl programs can be almost cryptically dense, while the names of built-in Common Lisp operators are comically long. The designers of Common Lisp probably expected users to have text editors that would type these long names for them. But the cost of a long name is not just the cost of typing it. There is also the cost of reading it, and the cost of the space it takes up on your screen.\n◇4 Hackability # There is one thing more important than brevity to a hacker: being able to do what you want. In the history of programming languages a surprising amount of effort has gone into preventing programmers from doing things considered to be improper. This is a dangerously presumptuous plan. How can the language designer know what the programmer is going to need to do? I think language designers would do better to consider their target user to be a genius who will need to do things they never anticipated, rather than a bumbler who needs to be protected from himself. The bumbler will shoot himself in the foot anyway. You may save him from referring to variables in another package, but you can\u0026rsquo;t save him from writing a badly designed program to solve the wrong problem, and taking forever to do it.\nGood programmers often want to do dangerous and unsavory things. By unsavory I mean things that go behind whatever semantic facade the language is trying to present: getting hold of the internal representation of some high-level abstraction, for example. Hackers like to hack, and hacking means getting inside things and second guessing the original designer.\nLet yourself be second guessed. When you make any tool, people use it in ways you didn\u0026rsquo;t intend, and this is especially true of a highly articulated tool like a programming language. Many a hacker will want to tweak your semantic model in a way that you never imagined. I say, let them; give the programmer access to as much internal stuff as you can without endangering runtime systems like the garbage collector.\nIn Common Lisp I have often wanted to iterate through the fields of a struct — to comb out references to a deleted object, for example, or find fields that are uninitialized. I know the structs are just vectors underneath. And yet I can\u0026rsquo;t write a general purpose function that I can call on any struct. I can only access the fields by name, because that\u0026rsquo;s what a struct is supposed to mean.\nA hacker may only want to subvert the intended model of things once or twice in a big program. But what a difference it makes to be able to. And it may be more than a question of just solving a problem. There is a kind of pleasure here too. Hackers share the surgeon\u0026rsquo;s secret pleasure in poking about in gross innards, the teenager\u0026rsquo;s secret pleasure in popping zits. [2] For boys, at least, certain kinds of horrors are fascinating. Maxim magazine publishes an annual volume of photographs, containing a mix of pin-ups and grisly accidents. They know their audience. ☍ In When the Air Hits Your Brain, neurosurgeon Frank Vertosick recounts a conversation in which his chief resident, Gary, talks about the difference between surgeons and internists (\"fleas\"):\nGary and I ordered a large pizza and found an open booth. The chief lit a cigarette. \"Look at those goddamn fleas, jabbering about some disease they'll see once in their lifetimes. That's the trouble with fleas, they only like the bizarre stuff. They hate their bread and butter cases. That's the difference between us and the fucking fleas. See, we love big juicy lumbar disc herniations, but they hate hypertension....\"\nIt's hard to think of a lumbar disc herniation as juicy (except literally). And yet I think I know what they mean. I've often had a juicy bug to track down. Someone who's not a programmer would find it hard to imagine that there could be pleasure in a bug. Surely it's better if everything just works. In one way, it is. And yet there is undeniably a grim satisfaction in hunting down certain sorts of bugs. Historically, Lisp has been good at letting hackers have their way. The political correctness of Common Lisp is an aberration. Early Lisps let you get your hands on everything. A good deal of that spirit is, fortunately, preserved in macros. What a wonderful thing, to be able to make arbitrary transformations on the source code.\nClassic macros are a real hacker\u0026rsquo;s tool — simple, powerful, and dangerous. It\u0026rsquo;s so easy to understand what they do: you call a function on the macro\u0026rsquo;s arguments, and whatever it returns gets inserted in place of the macro call. Hygienic macros embody the opposite principle. They try to protect you from understanding what they\u0026rsquo;re doing. I have never heard hygienic macros explained in one sentence. And they are a classic example of the dangers of deciding what programmers are allowed to want. Hygienic macros are intended to protect me from variable capture, among other things, but variable capture is exactly what I want in some macros.\nA really good language should be both clean and dirty: cleanly designed, with a small core of well understood and highly orthogonal operators, but dirty in the sense that it lets hackers have their way with it. C is like this. So were the early Lisps. A real hacker\u0026rsquo;s language will always have a slightly raffish character.\nA good programming language should have features that make the kind of people who use the phrase \u0026ldquo;software engineering\u0026rdquo; shake their heads disapprovingly. At the other end of the continuum are languages like Ada and Pascal, models of propriety that are good for teaching and not much else.\n◇5 Throwaway Programs # To be attractive to hackers, a language must be good for writing the kinds of programs they want to write. And that means, perhaps surprisingly, that it has to be good for writing throwaway programs.\nA throwaway program is a program you write quickly for some limited task: a program to automate some system administration task, or generate test data for a simulation, or convert data from one format to another. The surprising thing about throwaway programs is that, like the \u0026ldquo;temporary\u0026rdquo; buildings built at so many American universities during World War II, they often don\u0026rsquo;t get thrown away. Many evolve into real programs, with real features and real users.\nI have a hunch that the best big programs begin life this way, rather than being designed big from the start, like the Hoover Dam. It\u0026rsquo;s terrifying to build something big from scratch. When people take on a project that\u0026rsquo;s too big, they become overwhelmed. The project either gets bogged down, or the result is sterile and wooden: a shopping mall rather than a real downtown, Brasilia rather than Rome, Ada rather than C.\nAnother way to get a big program is to start with a throwaway program and keep improving it. This approach is less daunting, and the design of the program benefits from evolution. I think, if one looked, that this would turn out to be the way most big programs were developed. And those that did evolve this way are probably still written in whatever language they were first written in, because it\u0026rsquo;s rare for a program to be ported, except for political reasons. And so, paradoxically, if you want to make a language that is used for big systems, you have to make it good for writing throwaway programs, because that\u0026rsquo;s where big systems come from.\nPerl is a striking example of this idea. It was not only designed for writing throwaway programs, but was pretty much a throwaway program itself. Perl began life as a collection of utilities for generating reports, and only evolved into a programming language as the throwaway programs people wrote in it grew larger. It was not until Perl 5 (if then) that the language was suitable for writing serious programs, and yet it was already massively popular.\nWhat makes a language good for throwaway programs? To start with, it must be readily available. A throwaway program is something that you expect to write in an hour. So the language probably must already be installed on the computer you\u0026rsquo;re using. It can\u0026rsquo;t be something you have to install before you use it. It has to be there. C was there because it came with the operating system. Perl was there because it was originally a tool for system administrators, and yours had already installed it.\nBeing available means more than being installed, though. An interactive language, with a command-line interface, is more available than one that you have to compile and run separately. A popular programming language should be interactive, and start up fast.\nAnother thing you want in a throwaway program is brevity. Brevity is always attractive to hackers, and never more so than in a program they expect to turn out in an hour.\n★Bruce Eckel: A Career in Computing # Original link | Bruce Eckel\nThe question that people ask is usually the wrong one: \u0026ldquo;should I learn C++ or Java?\u0026rdquo; In this essay, I shall try to lay out my view of the true issues involved in choosing a career in computing.\nNote that I am not talking here to the people who already know it is their calling. You\u0026rsquo;re going to do it regardless of what anyone says, because it\u0026rsquo;s in your blood and you can\u0026rsquo;t get away from it. You know the answer already: C++ AND Java AND shell scripting AND Python AND a host of other languages and technologies that you\u0026rsquo;ll learn as a matter of course. You already know several of these languages, even if you\u0026rsquo;re only 14.\nThe person who asks me this question may be coming from another career. Or perhaps they are coming from a field like web development and they\u0026rsquo;ve figured out that HTML is only kind of like programming, and they\u0026rsquo;d like to try building something more substantial. But I especially hope that, if you are asking this question, you\u0026rsquo;ve realized that to be successful in computing, you need to teach yourself how to learn, and never stop learning.\nThe more I do this, the more it seems to me that software is more akin to writing than anything else. And we haven\u0026rsquo;t figured out what makes a good writer, we only know when we like what someone writes. This is not some kind of engineering where all we have to do is put something in one end and turn the crank. It is tempting to think of software as deterministic \u0026ndash; that\u0026rsquo;s what we want it to be, and that\u0026rsquo;s the reason that we keep coming up with tools to help us produce the behavior we desire. But my experience keeps indicating the opposite, that it is more about people than processes, and the fact that it runs on a deterministic machine becomes less and less of an influence, just like the Heisenberg principle doesn\u0026rsquo;t affect things on a human scale.\nMy father built custom homes, and in my youth I would occasionally work for him, mostly doing grunt labor and sometimes hanging sheet rock. He and his lead carpenter would tell me that they gave me these jobs for my own good \u0026ndash; so that I wouldn\u0026rsquo;t go into the business. It worked.\nSo I can also use the analogy that building software is like building a house. We don\u0026rsquo;t refer to everyone who works on a house as if they were exactly the same. There are concrete masons, roofers, plumbers, electricians, sheet rockers, plasterers, tile setters, laborers, rough carpenters, finish carpenters, and of course, general contractors. Each of these requires a different set of skills, which requires a different amount of time and effort to acquire. House-building is also subject to boom and bust cycles, like programming. If you want to get in quick, you might take a job as a laborer or a sheet rocker, where you can start getting paid without much of a learning curve. As long as demand is strong, you have steady work, and your pay might even go up if there aren\u0026rsquo;t enough people to do the work. But as soon as there\u0026rsquo;s a downturn, carpenters and even the general contractor can hang the sheet rock themselves.\nWhen the Internet was first booming, all you had to do was spend some time learning HTML and you could get a job and earn some pretty good money. When things turned down, however, it rapidly becomes clear that there is a hierarchy of desirable skills, and the HTML programmers (like the laborers and sheet rockers) go first, while the highly-skilled code smiths and carpenters are retained.\nWhat I\u0026rsquo;m trying to say here is that you don\u0026rsquo;t want to go into this business unless you are ready to commit to lifelong learning. Sometimes it seems like programming is a well-paying, reliable job \u0026ndash; but the only way you can make sure of this is if you are always making yourself more valuable.\nOf course you can find exceptions. There are always those people who learn one language and are just competent enough and perhaps savvy enough to stay employed without doing much to expand their abilities. But they are surviving by luck, and they are ultimately vulnerable. To make yourself less vulnerable, you need to continuously improve your abilities, by reading, going to user groups, conferences, and seminars. The more depth you have in this field, the more valuable you will be, which means you have more stable job prospects and can command higher salaries.\nAnother approach is to look at the field in general, and find a place where you already have talents. For example, my brother is interested in software, and dabbles with it, but his business is in installing computers, fixing them and upgrading them. He\u0026rsquo;s always been meticulous, so when he installs or fixes your computer you know that it will be in excellent shape when he\u0026rsquo;s done; not just the software, but all the way down to the cables, which will be bundled neat and out of the way. He\u0026rsquo;s always had more work than he could do, and he never noticed the dot-com bust. And needless to say, his work cannot be offshored.\nI stayed in college a long time, and managed to get by in various ways. I even began a Ph.D. program at UCLA, which was mercifully cut short \u0026ndash; I say mercifully because I no longer loved being in college, and the reason I stayed in college for so long was because I enjoyed it so much. But what I enjoyed was typically the off-track stuff. Art and dance classes, working on the college newspaper, and even the handful of computer programming classes that I took (which were off-track because I was a physics undergrad and a computer engineering graduate student). Although I was far from exceptional academically (a delightful irony is that many colleges that would not have accepted me as a student now use my books in their courses!), I really enjoyed the life of the college student, and had I finished a Ph.D. I probably would have taken the easy path and ended up a professor.\nBut as it turns out, some of the greatest value that I got from college was from those same off-track courses, the ones that expanded my mind beyond \u0026ldquo;stuff we already know.\u0026rdquo; I think this is especially true in computing because you are always programming to support some other goal, and the more you know about that goal the better you\u0026rsquo;ll perform (I\u0026rsquo;ve encountered some European graduate programs that require the study of computing in combination with some other specialty, and you build your thesis by solving a domain-specific problem in that other specialty).\nI also think that knowing more than just programming vastly improves your problem-solving skills (just as knowing more than one programming language vastly improves your programming skills). On multiple occasions I have encountered people, trained only in computer science, who seem to have more limits in their thinking than those who come from some other background, like math or physics, which requires more rigorous thinking and is less prone to \u0026ldquo;it works for me\u0026rdquo; solutions.\nIn one session a conference that I organized, one of the topics was to come up with a list of features for the ideal job candidate:\nLearning as a lifestyle. For example, you should know more than one language; nothing opens your eyes more to the strengths and limitations of a language than learning another one. Know where and how to get new knowledge. Study prior art. We are tool users. Learn to do the simplest thing. Understand the business (Read magazines. Start with Fast Company, which has very short and interesting articles. Then you can see if you want to read others) You are personally responsible for errors. \u0026ldquo;It works for me\u0026rdquo; is not an acceptable strategy. Find your own bugs. Become a leader: someone who communicates and inspires. Who are you serving? There is no right answer \u0026hellip; and always a better way. Show and discuss your code, without emotional attachment. You are not your code. It\u0026rsquo;s an asymptotic journey towards perfection. Take whatever risks you can \u0026ndash; the best risks are the scary ones, but in trying you will feel more alive than you can imagine. It\u0026rsquo;s best if you don\u0026rsquo;t plan for a particular outcome, because you will often miss the true possibilities if you\u0026rsquo;re too attached to a result. My best adventures have been ones that have started with \u0026ldquo;lets do a little experiment and see where it takes us.\nSome people will be disappointed by this answer, and reply \u0026ldquo;yes, that\u0026rsquo;s all very interesting and useful. But really, what should I learn? C++ or Java?\u0026rdquo; I\u0026rsquo;ll fend these off by repeating here: I know it seems like all the ones and zeroes should make everything deterministic, so that such questions should have a simple answer, but they don\u0026rsquo;t. It\u0026rsquo;s not about making one choice and being done with it. It\u0026rsquo;s about continuous learning and sometimes, bold choices. Trust me, your life will be more exciting this way.\n★Peter Norvig: Teach Yourself Programming in Ten Years # Original link | Peter Norvig\n◇Why is everyone in such a rush? # Walk into any bookstore, and you\u0026rsquo;ll see how to Teach Yourself Java in 24 Hours alongside endless variations offering to teach C, SQL, Ruby, Algorithms, and so on in a few days or hours. The Amazon advanced search for title: teach, yourself, hours, since: 2000 and found 512 such books. Of the top ten, nine are programming books (the other is about bookkeeping). Similar results come from replacing \u0026ldquo;teach yourself\u0026rdquo; with \u0026ldquo;learn\u0026rdquo; or \u0026ldquo;hours\u0026rdquo; with \u0026ldquo;days.\u0026rdquo;\nThe conclusion is that either people are in a big rush to learn about programming, or that programming is somehow fabulously easier to learn than anything else. Felleisen et al. give a nod to this trend in their book How to Design Programs, when they say \u0026ldquo;Bad programming is easy. Idiots can learn it in 21 days, even if they are dummies.\u0026rdquo; The Abtruse Goose comic also had their take.\nLet\u0026rsquo;s analyze what a title like Teach Yourself C++ in 24 Hours could mean:\nTeach Yourself: In 24 hours you won\u0026rsquo;t have time to write several significant programs, and learn from your successes and failures with them. You won\u0026rsquo;t have time to work with an experienced programmer and understand what it is like to live in a C++ environment. In short, you won\u0026rsquo;t have time to learn much. So the book can only be talking about a superficial familiarity, not a deep understanding. As Alexander Pope said, a little learning is a dangerous thing.\nC++: In 24 hours you might be able to learn some of the syntax of C++ (if you already know another language), but you couldn\u0026rsquo;t learn much about how to use the language. In short, if you were, say, a Basic programmer, you could learn to write programs in the style of Basic using C++ syntax, but you couldn\u0026rsquo;t learn what C++ is actually good (and bad) for. So what\u0026rsquo;s the point? Alan Perlis once said: \u0026ldquo;A language that doesn\u0026rsquo;t affect the way you think about programming, is not worth knowing\u0026rdquo;. One possible point is that you have to learn a tiny bit of C++ (or more likely, something like JavaScript or Processing) because you need to interface with an existing tool to accomplish a specific task. But then you\u0026rsquo;re not learning how to program; you\u0026rsquo;re learning to accomplish that task.\nin 24 Hours: Unfortunately, this is not enough, as the next section shows.\n◇Teach Yourself Programming in Ten Years # Researchers (Bloom (1985), Bryan \u0026amp; Harter (1899), Hayes (1989), Simmon \u0026amp; Chase (1973)) have shown it takes about ten years to develop expertise in any of a wide variety of areas, including chess playing, music composition, telegraph operation, painting, piano playing, swimming, tennis, and research in neuropsychology and topology. The key is deliberative practice: not just doing it again and again, but challenging yourself with a task that is just beyond your current ability, trying it, analyzing your performance while and after doing it, and correcting any mistakes. Then repeat. And repeat again. There appear to be no real shortcuts: even Mozart, who was a musical prodigy at age 4, took 13 more years before he began to produce world-class music. In another genre, the Beatles seemed to burst onto the scene with a string of #1 hits and an appearance on the Ed Sullivan show in 1964. But they had been playing small clubs in Liverpool and Hamburg since 1957, and while they had mass appeal early on, their first great critical success, Sgt. Peppers, was released in 1967.\nMalcolm Gladwell has popularized the idea, although he concentrates on 10,000 hours, not 10 years. Henri Cartier-Bresson (1908-2004) had another metric: \u0026ldquo;Your first 10,000 photographs are your worst.\u0026rdquo; (He didn\u0026rsquo;t anticipate that with digital cameras, some people can reach that mark in a week.) True expertise may take a lifetime: Samuel Johnson (1709-1784) said \u0026ldquo;Excellence in any department can be attained only by the labor of a lifetime; it is not to be purchased at a lesser price.\u0026rdquo; And Chaucer (1340-1400) complained \u0026ldquo;the lyf so short, the craft so long to lerne.\u0026rdquo; Hippocrates (c. 400BC) is known for the excerpt \u0026ldquo;ars longa, vita brevis\u0026rdquo;, which is part of the longer quotation \u0026ldquo;Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile\u0026rdquo;, which in English renders as \u0026ldquo;Life is short, [the] craft long, opportunity fleeting, experiment treacherous, judgment difficult.\u0026rdquo; Of course, no single number can be the final answer: it doesn\u0026rsquo;t seem reasonable to assume that all skills (e.g., programming, chess playing, checkers playing, and music playing) could all require exactly the same amount of time to master, nor that all people will take exactly the same amount of time. As Prof. K. Anders Ericsson puts it, \u0026ldquo;In most domains it\u0026rsquo;s remarkable how much time even the most talented individuals need in order to reach the highest levels of performance. The 10,000 hour number just gives you a sense that we\u0026rsquo;re talking years of 10 to 20 hours a week which those who some people would argue are the most innately talented individuals still need to get to the highest level.\u0026rdquo;\n◇So You Want to be a Programmer # Here\u0026rsquo;s my recipe for programming success:\nGet interested in programming, and do some because it is fun. Make sure that it keeps being enough fun so that you will be willing to put in your ten years/10,000 hours.\nProgram. The best kind of learning is learning by doing. To put it more technically, \u0026ldquo;the maximal level of performance for individuals in a given domain is not attained automatically as a function of extended experience, but the level of performance can be increased even by highly experienced individuals as a result of deliberate efforts to improve.\u0026rdquo; (p. 366) and \u0026ldquo;the most effective learning requires a well-defined task with an appropriate difficulty level for the particular individual, informative feedback, and opportunities for repetition and corrections of errors.\u0026rdquo; (p. 20-21) The book Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life is an interesting reference for this viewpoint.\nTalk with other programmers; read other programs. This is more important than any book or training course.\nIf you want, put in four years at a college (or more at a graduate school). This will give you access to some jobs that require credentials, and it will give you a deeper understanding of the field, but if you don\u0026rsquo;t enjoy school, you can (with some dedication) get similar experience on your own or on the job. In any case, book learning alone won\u0026rsquo;t be enough. \u0026ldquo;Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter\u0026rdquo; says Eric Raymond, author of The New Hacker\u0026rsquo;s Dictionary. One of the best programmers I ever hired had only a High School degree; he\u0026rsquo;s produced a lot of great software, has his own news group, and made enough in stock options to buy his own nightclub.\nWork on projects with other programmers. Be the best programmer on some projects; be the worst on some others. When you\u0026rsquo;re the best, you get to test your abilities to lead a project, and to inspire others with your vision. When you\u0026rsquo;re the worst, you learn what the masters do, and you learn what they don\u0026rsquo;t like to do (because they make you do it for them).\nWork on projects after other programmers. Understand a program written by someone else. See what it takes to understand and fix it when the original programmers are not around. Think about how to design your programs to make it easier for those who will maintain them after you.\nLearn at least a half dozen programming languages. Include one language that emphasizes class abstractions (like Java or C++), one that emphasizes functional abstraction (like Lisp or ML or Haskell), one that supports syntactic abstraction (like Lisp), one that supports declarative specifications (like Prolog or C++ templates), and one that emphasizes parallelism (like Clojure or Go).\nRemember that there is a \u0026ldquo;computer\u0026rdquo; in \u0026ldquo;computer science\u0026rdquo;. Know how long it takes your computer to execute an instruction, fetch a word from memory (with and without a cache miss), read consecutive words from disk, and seek to a new location on disk. (Answers here.)\nGet involved in a language standardization effort. It could be the ANSI C++ committee, or it could be deciding if your local coding style will have 2 or 4 space indentation levels. Either way, you learn about what other people like in a language, how deeply they feel so, and perhaps even a little about why they feel so.\nHave the good sense to get off the language standardization effort as quickly as possible.\nWith all that in mind, its questionable how far you can get just by book learning. Before my first child was born, I read all the How To books, and still felt like a clueless novice. 30 Months later, when my second child was due, did I go back to the books for a refresher? No. Instead, I relied on my personal experience, which turned out to be far more useful and reassuring to me than the thousands of pages written by experts.\nFred Brooks, in his essay No Silver Bullet identified a three-part plan for finding great software designers:\nSystematically identify top designers as early as possible.\nAssign a career mentor to be responsible for the development of the prospect and carefully keep a career file.\nProvide opportunities for growing designers to interact and stimulate each other.\nThis assumes that some people already have the qualities necessary for being a great designer; the job is to properly coax them along. Alan Perlis put it more succinctly: \u0026ldquo;Everyone can be taught to sculpt: Michelangelo would have had to be taught how not to. So it is with the great programmers\u0026rdquo;. Perlis is saying that the greats have some internal quality that transcends their training. But where does the quality come from? Is it innate? Or do they develop it through diligence? As Auguste Gusteau (the fictional chef in Ratatouille) puts it, \u0026ldquo;anyone can cook, but only the fearless can be great.\u0026rdquo; I think of it more as willingness to devote a large portion of one\u0026rsquo;s life to deliberative practice. But maybe fearless is a way to summarize that. Or, as Gusteau\u0026rsquo;s critic, Anton Ego, says: \u0026ldquo;Not everyone can become a great artist, but a great artist can come from anywhere.\u0026rdquo;\nSo go ahead and buy that Java/Ruby/Javascript/PHP book; you\u0026rsquo;ll probably get some use out of it. But you won\u0026rsquo;t change your life, or your real overall expertise as a programmer in 24 hours or 21 days. How about working hard to continually improve over 24 months? Well, now you\u0026rsquo;re starting to get somewhere\u0026hellip;\n","date":"8 August 2025","externalUrl":null,"permalink":"/posts/programming-articles/","section":"Blog","summary":"","title":"Top 3 Articles for Learning Programming","type":"posts"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/categories/books/","section":"Categories","summary":"","title":"Books","type":"categories"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/categories/philosophy/","section":"Categories","summary":"","title":"Philosophy","type":"categories"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/series/reading-log/","section":"Series","summary":"","title":"Reading Log","type":"series"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" Category Philosophy / Taoism / Chinese Classics Author Laozi (Lao Tzu) (Ancient China) Title Tao Te Ching Year of Publication circa 4th century BCE (Estimated) Links Tao Te Ching @ Wikipedia ★老子 # 老子是春秋时期楚国人，即今河南地区，乃中国古代著名哲学家、思想家，道家学派的创始人。其生卒年不详，学界推测约为公元前570年左右，比孔子年长约二十岁。\n老子本名李耳，之所以被称为“老子”，据说是因为他出生时即白发白眉，形貌如老者，故得此名。至于是否“倒生”，虽无从考证，但传说如此。\n其生前曾任周朝守藏室柱下史，相当于今日国家图书档案机构的负责人。守藏室藏书极为丰富，据传汇集天下典籍，老子作为其管理员，因而得以博览群书、通晓古今。\n后因周朝衰落，战乱四起，老子遂辞官归隐。据传，他西行骑青牛，意欲隐居西方山中。途中至洛阳函谷关，遇守关官尹喜。尹喜识其不凡，劝其著述留世。老子遂著五千言，授之尹喜，此即后世所称之《老子五千言》，为其唯一传世之作。后此书被尊称为《老子》，在道教中则称为《道德经》。\n《道德经》共八十一章，篇幅不长，内容玄妙精深。书中分上下两篇，上篇为“道”，下篇为“德”，全书并无统一书名。“道德经”之名，乃后人据其结构所称。\n此书语言简约，章句之间多无明确逻辑衔接，通读全篇、反复体会，方能领会其深意。若无尹喜之请，老子或未曾留下文字，其生平或更难为世所知。因其唯一著作由尹喜所促成，道教遂尊尹喜为“文始真人”，并有诸多道教门派奉其为开山宗祖。\n值得一提的是，道教并非由老子亲自创立，而是由其后学弟子所建立。\n《老子道德经注》 - 维基文库\n作者：老子\n注：王弼\n★上篇（ 1 至 37 ） # ◇一章 # 道可道，非常道，名可名，非常名； ☍ 可道之道，可名之名，指事造形，非其常也。故不可道，不可名也。 无名，天地之始，有名，万物之母。 ☍ 凡有皆始于无，故“未形”“无名”之时，则为万物之始。及其“有形”“有名”之时，则长之、育之、亭之、毒之，为其母也。道以无形无名始成万物。以始以成而不知其所以然，玄之又玄也。 故常无欲，以观其妙， ☍ 妙者，微之极也。万物始于微而后成，始于无而后生。故常无欲空虚，可以观其始物之妙。 常有欲，以观其徼； ☍ 徼，归终也。凡有之为利，必以无为用。欲之所本，适道而后济。故常有欲，可以观其终物之徼也。 此两者，同出而异名，同谓之玄。玄之又玄，众妙之门。 ☍ 两者，始与母也。同出者，同出于玄也。异名，所施不可同也。在首则谓之始，在终则谓之母。玄者，冥默无有也，始、母之所出也。不可得而名，故不可言同名曰玄。而言谓之玄者，取于不可得而谓之然也。谓之然则不可以定乎一玄而已。若定乎一玄，则是名则失之远矣。故曰玄之又玄也。众妙皆从而出，故曰众妙之门也。 ◇二章 # 天下皆知美之为美，斯恶已。皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。 ☍ 美者，人心之所进乐也；恶者，人心之所恶疾也。美恶，犹喜怒也；善不善，犹是非也。喜怒同根，是非同门，故不可得偏举也。此六者皆陈自然不可偏举之明数也。 是以圣人处无为之事， ☍ 自然已足，为则败也。 行不言之教；万物作焉而不辞，生而不有，为而不恃， ☍ 智慧自备，为则伪也。 功成而弗居。 ☍ 因物而用，功自彼成，故不居也。 夫唯弗居，是以不去。 ☍ 使功在己，则功不可久也。 ◇三章 # 不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。 ☍ 贤，犹能也。尚者，嘉之名也。贵者，隆之称也。唯能是任，尚也曷为；唯用是施，贵之何为。尚贤显名，荣过其任，为而常校，能相射贵货，过用贪者，竞趣穿窬探箧，没命而盗，故可欲不见，则心无所乱也。 是以圣人之治，虚其心，实其腹， ☍ 心怀智而腹怀食，虚有智而实无知也。 弱其志，强其骨。 ☍ 骨无知以干，志生事以乱，心虚则志弱也。 常使民无知无欲。 ☍ 守其真也。 使夫智者不敢为也。 ☍ 知者谓知为也。 为无为，则无不治。\n◇四章 # 道冲而用之或不盈，渊兮似万物之宗；挫其锐，解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。 ☍ 夫执一家之量者，不能全家。执一国之量者，不能成国。穷力举重，不能为用，故人虽知，万物治也，治而不以二仪之道，则不能赡也。地虽形魄，不法于天则不能全其宁。天虽精象，不法于道则不能保其精。冲而用之，用乃不能穷，满以造实，实来则溢，故冲而用之，又复不盈，其为无穷亦已极矣。形虽大，不能累其体，事虽殷，不能充其量，万物舍此而求主，主其安在乎。不亦渊兮似万物之宗乎。锐挫而无损，纷解而不劳，和光而不污，其体同尘而不渝其真，不亦湛兮似或存乎。地守其形，德不能过其载，天慊其象，德不能过其覆，天地莫能及之，不亦似帝之先乎。帝，天帝也。 ◇五章 # 天地不仁，以万物为刍狗； ☍ 天地任自然，无为无造，万物自相治理，故不仁也。仁者必造立施化，有恩有为；造立施化，则物失其真，有恩有为，则物不具存，物不具存，则不足以备载矣。地不为兽生刍，而兽食刍；不为人生狗，而人食狗。无为于万物而万物各适其所用，则莫不赡矣。若慧由己树，未足任也。 圣人不仁，以百姓为刍狗。 ☍ 圣人与天地合其德，以百姓比刍狗也。 天地之间，其犹橐籥乎？虚而不屈，动而愈出。 ☍ 橐，排橐也。籥，乐籥也。橐籥之中空洞，无情无为，故虚而不得穷屈，动而不可竭尽也。天地之中，荡然任自然，故不可得而穷，犹若橐籥也。 多言数穷，不如守中。 ☍ 愈为之则愈失之矣。物树其恶，事错其言，不慧不济，不言不理，必穷之数也。橐籥而守数中，则无穷尽，弃己任物，则莫不理。若橐籥有意于为声也，则不足以共吹者之求也。 ◇六章 # 谷神不死，是谓玄牝。玄牝之门，是谓天地根。绵绵若存，用之不勤。 ☍ 谷神，谷中央无谷也。无形无影，无逆无违，处卑不动，守静不衰，谷以之成而不见其形，此至物也。处卑而不可得名，故谓天地之根，绵绵若存，用之不 勤。门，玄牝之所由也，本其所由，与极同体，故谓之天地之根也。欲言存邪，则不见其形，欲言亡邪，万物以之生。故绵绵若存也，无物不成，用而不劳也。故曰，用而不勤也。 ◇七章 # 天长地久。天地所以能长且久者，以其不自生， ☍ 自生则与物争，不自生则物归也。 故能长生。是以圣人后其身而身先；外其身而身存。非以其无私邪，故能成其私。 ☍ 无私者，无为于身也。身先身存，故曰，能成其私也。 ◇八章 # 上善若水。水善利万物而不争，处众人之所恶， ☍ 人恶卑也。 故几于道。 ☍ 道无水有，故曰，几也。 居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 ☍ 言人皆应于治道也。 ◇九章 # 持而盈之，不如其已； ☍ 持，谓不失德也。既不失其德又盈之，势必倾危。故不如其已者，谓乃更不如无德无功者也。 揣而棁之，不可长保。 ☍ 既揣末令尖，又锐之令利，势必摧衄，故不可长保也。 金玉满堂，莫之能守； ☍ 不若其已。 富贵而骄，自遗其咎。 ☍ 不可长保也。 功遂身退，天之道。 ☍ 四时更运，功成则移。 ◇十章 # 载营魄抱一，能无离乎？ ☍ 载，犹处也。营魄，人之常居处也，一人之真也。言人能处常居之宅，抱一清神，能常无离乎，则万物自宾也。 专气致柔，能婴儿乎？ ☍ 专，任也，致，极也，言任自然之气，致至柔之和，能若婴儿之无所欲乎，则物全而性得矣。 涤除玄览，能无疵乎？ ☍ 玄，物之极也，言能涤除邪饰，至于极览。能不以物介其明，疵之其神乎，则终与玄同也。 爱国治民，能无知乎？ ☍ 任术以求成，运数以求匿者，智也。玄览无疵，犹绝圣也。治国无以智，犹弃智也。能无以智乎，则民不辟而国治之也。 天门开阖，能为雌乎？ ☍ 天门，天下之所由从也。开阖，治乱之际也，或开或阖，经通于天下，故曰，天门开阖也。雌应而不倡，因而不为，言天门开阂能为雌乎，则物自宾而处自安矣。 明白四达，能无为乎？ ☍ 言至明四达，无迷无惑，能无以为乎，则物化矣。所谓道常无为，侯王若能守，则万物自化。 生之， ☍ 不塞其原也。 畜之。 ☍ 不禁其性也。 生而不有，为而不恃，长而不宰，是谓玄德。 ☍ 不塞其原，则物自生，何功之有。不禁其性，则物自济，何为之恃。物自长足，不吾宰成，有德无主，非玄而何。凡言玄德，皆有德而不知其主，出乎幽冥。 ◇十一章 # 三十辐共一毂，当其无，有车之用。 ☍ 毂所以能统三十辐者，无也，以其无能受物之故，故能以实统众也。 埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。 ☍ 木埴壁之所以成三者，而皆以无为用也。言无者，有之所以为利，皆赖无以为用也。 ◇十二章 # 五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂， ☍ 爽，差失也，失口之用，故谓之爽。夫耳目口心，皆顺其性也，不以顺性命，反以伤自然，故曰盲、聋、爽、狂也。 难得之货令人行妨。 ☍ 难得之货，塞人正路，故令人行妨也。 是以圣人为腹不为目，故去彼取此。 ☍ 为腹者以物养己，为目者以物役己，故圣人不为目也。 ◇十三章 # 宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。 ☍ 宠必有辱，荣必有患，惊辱等、荣患同也。为下得宠辱荣患若惊，则不足以乱天下也。 何谓贵大患若身？ ☍ 大患，荣宠之属也。生之厚，必入死之地，故谓之大患也。人迷之于荣宠，返之于身，故曰大患若身也。 吾所以有大患者，为吾有身， ☍ 由有其身也。 及吾无身， ☍ 归之自然也。 吾有何患？故贵以身为天下，若可寄天下； ☍ 无以易其身，故曰贵也。如此乃可以托天下也。 爱以身为天下，若可托天下。 ☍ 无物可以损其身，故曰爱也。如此乃可以寄天下也。不以宠辱荣患损易其身，然后乃可以天下付之也。 ◇十四章 # 视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者，不可致诘，故混而为一。 ☍ 无状无象，无声无响，故能无所不通，无所不往，不得而知，更以我耳目体不知为名，故不可致诘，混而为一也。 其上不皦，其下不昧。绳绳不可名，复归于无物。是谓无状之状，无物之象， ☍ 欲言无邪，而物由以成。欲言有邪，而不见其形，故曰，无状之状，无物之象也。 是谓惚恍。 ☍ 不可得而定也。 迎之不见其首，随之不见其后。执古之道，以御今之有。 ☍ 有，有其事。 能知古始，是谓道纪。 ☍ 无形无名者，万物之宗也。虽今古不同，时移俗易，故莫不由乎此以成其治者也。故可执古之道，以御今之有。上古虽远，其道存焉，故虽在今，可以知古始也。 ◇十五章 # 古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。豫焉若冬涉川， ☍ 冬之涉川，豫然若欲度、若不欲度，其情不可得见之貌也。 犹兮若畏四邻， ☍ 四邻合攻中央之主，犹然不知所趣向者也。上德之人，其端兆不可睹，德趣不可见，亦犹此也。 俨兮其若容，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。 ☍ 凡此诸若，皆言其容象不可得而形名也。 孰能浊以静之徐清？孰能安以久动之徐生？ ☍ 夫晦以理物则得明，浊以静物则得清，安以动物则得生，此自然之道也。孰能者，言其难也。徐者，详慎也。 保此道者不欲盈， ☍ 盈必溢也。 夫唯不盈，故能蔽不新成。 ☍ 蔽，覆盖也。 ◇十六章 # 致虚极，守静笃。 ☍ 言致虚物之极，笃守静物之真正也。 万物并作，吾以观复。 ☍ 以虚静观其反复。凡有起于虚，动起于静，故万物虽并动作，卒复归于虚静，是物之极笃也。 夫物芸芸，各复归其根。归根曰静，是谓复命。复命曰常， ☍ 归根则静，故曰静。静则复命，故曰复命也。复命则得性命之常，故曰常也。 知常曰明。不知常，妄作凶。 ☍ 常之为物，不偏不彰，无皦昧之状，温凉之象，故曰知常曰明也。唯此复，乃能包通万物，无所不容，失此以往，则邪入乎分，则物离其分，故曰不知常，则妄作凶也。 知常容， ☍ 无所不包通也。 容乃公， ☍ 无所不包通，则乃至于荡然公平也。 公乃全， ☍ 荡然公平，则乃至于无所不周普也。 全乃天， ☍ 无所不周普，则乃至于同乎天也。 天乃道， ☍ 与天合德，体道大通，则乃至于极虚无也。 道乃久， ☍ 穷极虚无，得道之常，则乃至于不穷极也。 没身不殆。 ☍ 无之为物，水火不能害，金石不能残。用之于心则虎兕无所投其齿角，兵戈无所容其锋刃，何危殆之有乎。 ◇十七章 # 太上，下知有之， ☍ 太上，谓大人也。大人在上，故曰太上。大人在上，居无为之事，行不言之教，万物作焉而不为始，故下知有之而已，言从上也。 其次，亲而誉之， ☍ 不能以无为居事，不言为教，立善行施，使下得亲而誉之也。 其次，畏之， ☍ 不复能以恩仁令物，而赖威权也。 其次，侮之。 ☍ 不能法以正齐民，而以智治国，下知避之，其令不从，故曰，侮之也。 信不足焉，有不信焉。 ☍ 夫御体失性，则疾病生；辅物失真，则疵衅作。信不足焉，则有不信，此自然之道也。已处不足，非智之所齐也。 悠兮其贵言，功成事遂，百姓皆谓：我自然。 ☍ 自然，其端兆不可得而见也，其意趣不可得而睹也，无物可以易其言，言必有应，故曰悠兮其贵言也。居无为之事，行不言之教，不以形立物，故功成事遂，而百姓不知其所以然也。 ◇十八章 # 大道废，有仁义； ☍ 失无为之事，更以施慧立善道，进物也。 智慧出，有大伪； ☍ 行术用明，以察奸伪；趣睹形见，物知避之。故智慧出则大伪生也。 六亲不和，有孝慈；国家昏乱，有忠臣。 ☍ 甚美之名生于大恶，所谓美恶同门。六亲，父子兄弟夫妇也。若六亲自和，国家自治，则孝慈忠臣不知其所在矣。鱼相忘于江湖之道，则相濡之德生也。 ◇十九章 # 绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者以为文不足，故令有所属﹕见素抱朴，少私寡欲。 ☍ 圣智，才之善也。仁义，人之善也。巧利，用之善也。而直云绝，文甚不足，不令之有所属，无以见其指，故曰，此三者以为文而未足，故令人有所属，属之于素朴寡欲。 ◇二十章 # 绝学无忧，唯之与阿，相去几何？善之与恶，相去若何？人之所畏，不可不畏。 ☍ 下篇，为学者日益，为道者日损。然则学求益所能，而进其智者也，若将无欲而足，何求于益。不知而中，何求于进。夫燕雀有匹，鸠鸽有仇，寒乡之民，必知旃裘，自然已足，益之则忧。故续凫之足，何异截鹤之胫，畏誉而进，何异畏刑。唯阿美恶，相去何若？故人之所畏，吾亦畏焉，未敢恃之以为用也。 荒兮其未央哉﹗ ☍ 叹与俗相返之远也。 众人熙熙，如享太牢，如春登台。 ☍ 众人迷于美进，惑于荣利，欲进心竞，故熙熙如享太牢，如春登台也。 我独泊兮其未兆，如婴儿之未孩； ☍ 言我廓然无形之可名、无兆之可举，如婴儿之未能孩也。 儽儽兮若无所归。 ☍ 若无所宅。 众人皆有馀，而我独若遗。 ☍ 众人无不有怀有志，盈溢胸心，故曰，皆有馀也。我独廓然无为无欲，若遗失之也。 我愚人之心也哉﹗ ☍ 绝愚之人，心无所别析，意无所好欲，犹然其情不可睹我颓然若此也。 沌沌兮， ☍ 无所别析，不可为明。 俗人昭昭， ☍ 耀其光也。 我独昏昏。俗人察察， ☍ 分别别析也。 我独闷闷。澹兮其若海， ☍ 情不可睹。 飂兮若无止。 ☍ 无所系絷。 众人皆有以， ☍ 以，用也。皆欲有所施用也。 而我独顽似鄙。 ☍ 无所欲为，闷闷昏昏，若无所识，故曰顽且鄙也。 我独异于人，而贵食母。 ☍ 食母，生之本也。人者皆弃生民之本，贵末饰之华，故曰我独欲异于人。 ◇二十一章 # 孔德之容，惟道是从。 ☍ 孔，空也，惟以空为德，然后乃能动作从道。 道之为物，惟恍惟惚。 ☍ 恍惚，无形不系之叹。 惚兮恍兮，其中有象；恍兮惚兮，其中有物。 ☍ 以无形始物，不系成物，万物以始以成，而不知其所以然，故曰，恍兮惚兮、惚兮恍兮，其中有象也。 窈兮冥兮，其中有精； ☍ 窈、冥，深远之叹，深远不可得而见。然而万物由之，其可得见，以定其真。故曰，窈兮冥兮，其中有精也。 其精甚真，其中有信。 ☍ 信，信验也。物反窈冥，则真精之极得，万物之性定。故曰，其精甚真，其中有信也。 自今及古，其名不去， ☍ 至真之极，不可得名，无名则是其名也。自古及今，无不由此而成，故曰，自古及今，其名不去也。 以阅众甫。 ☍ 众甫，物之始也。以无名说万物始也。 吾何以知众甫之状哉？以此。 ☍ 此上之所云也。言吾何以知万物之始于无哉，以此知之也。 ◇二十二章 # 曲则全， ☍ 不自见其明则全也。 枉则直， ☍ 不自是则其是彰也。 洼则盈， ☍ 不自伐则其功有也。 敝则新， ☍ 不自矜则其德长也。 少则得，多则惑。 ☍ 自然之道亦犹树也，转多转远其根，转少转得其本。多则远其真，故曰惑也；少则得其本，故曰得也。 是以圣人抱一为天下式。 ☍ 一，少之极也。式，犹则之也。 不自见故明，不自是故彰，不自伐故有功，不自矜故长。夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。\n◇二十三章 # 希言自然。 ☍ 听之不闻名曰希，下章言，道之出言淡兮其无味也，视之不足见，听之不足闻，然则无味不足听之言，乃是自然之至言也。 故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况于人乎？ ☍ 言暴疾美兴不长也。 故从事于道者，道者同于道， ☍ 从事，谓举动，从事于道者也。道以无形无为成济万物，故从事于道者，以无为为君，不言为教，绵绵若存而物得其真，与道同体，故曰同于道。 德者同于德， ☍ 得，少也，少则得，故曰得也。行得则与得同体，故曰，同于得也。 失者同于失。 ☍ 失，累多也，累多则失，故曰失也。行失则与失同体，故曰，同于失也。 同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。 ☍ 言随行其所，故同而应之。 信不足焉，有不信焉。 ☍ 忠信不足于下，焉有不信焉。 ◇二十四章 # 企者不立， ☍ 物尚进则失安，故曰，企者不立。 跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。其在道也，曰馀食赘行。 ☍ 其唯于道而论之，若郤至之行，盛馔之馀也。本虽美，更可薉也。本虽有功而自伐之，故更为肬赘者也。 物或恶之，故有道者不处。\n◇二十五章 # 有物混成，先天地生。 ☍ 混然不可得而知，而万物由之以成，故曰混成也。不知其谁之子，故先天地生。 寂兮寥兮，独立而不改， ☍ 寂寥，无形体也。无物之匹，故曰独立也。返化终始，不失其常，故曰不改也。 周行而不殆，可以为天下母。 ☍ 周行无所不至而免殆，能生全大形也，故可以为天下母也。 吾不知其名， ☍ 名以定形，混成无形，不可得而定，故曰，不知其名也。 字之曰道， ☍ 夫名以定形，字以称可言，道取于无物而不由也。是混成之中，可言之称最大也。 强为之名曰大。 ☍ 吾所以字之曰道者，取其可言之称最大也。责其字定之所由，则系于大，大有系，则必有分，有分则失其极矣。故曰，强为之名曰大。 大曰逝， ☍ 逝，行也。不守一大体而已。周行无所不至，故曰逝也。 逝曰远，远曰反。 ☍ 远，极也。周无所不穷极，不偏于一逝，故曰远也。不随于所适，其体独立，故曰反也。 故道大，天大，地大，王亦大。 ☍ 天地之性，人为贵，而王是人之主也。虽不职大亦复为大与三匹，故曰，王亦大也。 域中有四大， ☍ 四大，道、天、地、王也。凡物有称有名，则非其极也，言道则有所由，有所由然后谓之为道，然则是道，称中之大也，不若无称之大也。无称不可得而名曰域也，道天地王皆在乎无称之内，故曰，域中有四大者也。 而王居其一焉。 ☍ 处人主之大也。 人法地，地法天，天法道，道法自然。 ☍ 法，谓法则也。人不违地，乃得全安，法地也。地不违天，乃得全载，法天也。天不违道，乃得全覆，法道也。道不违自然，乃得其性，法自然者。在方而法 方，在圆而法圆，于自然无所违也。自然者，无称之言，穷极之辞也。用智不及无知，而形魄不及精象，精象不及无形，有仪不及无仪，故转相法也。道顺自然，天故资焉。天法于道，地故则焉。地法于天，人故象焉。所以为主其一之者，主也。 ◇二十六章 # 重为轻根，静为躁君。 ☍ 凡物轻不能载重，小不能镇大。不行者使行，不动者制动，是以重必为轻根，静必为躁君也。 是以圣人终日行不离辎重。 ☍ 以重为本，故不离。 虽有荣观，燕处超然。 ☍ 不以经心也。 奈何万乘之主，而以身轻天下？轻则失本，躁则失君。 ☍ 轻，不镇重也，失本，为丧身也，失君，为失君位也。 ◇二十七章 # 善行无辙迹， ☍ 顺自然而行，不造不始，故物得至而无辙迹也。 善言无瑕谪； ☍ 顺物之性，不别不析，故无瑕谪可得其门也。 善数不用筹策； ☍ 因物之数，不假形也。 善闭无关楗而不可开，善结无绳约而不可解。 ☍ 因物自然，不设不施，故不用关楗绳约而不可开解也。此五者皆言不造不施，因物之性，不以形制物也。 是以圣人常善救人，故无弃人； ☍ 圣人不立形名以检于物，不造进向以殊弃不肖，辅万物之自然而不为始，故曰无弃人也。不尚贤能，则民不争，不贵难得之货，则民不为盗，不见可欲，则民心不乱。常使民心无欲无惑，则无弃人矣。 常善救物，故无弃物，是谓袭明。故善人者，不善人之师； ☍ 举善以师不善，故谓之师矣。 不善人者，善人之资。 ☍ 资，取也。善人以善齐不善，以善弃不善也。故不善人，善人之所取也。 不贵其师，不爱其资，虽智大迷， ☍ 虽有其智，自任其智，不因物，于其道必失。故曰，虽智大迷。 是谓要妙。\n◇二十八章 # 知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。 ☍ 雄，先之属；雌，后之属也。知为天下之先也，必后也，是以圣人后其身而身先也。谿不求物而物自归之，婴儿不用智而合自然之智。 知其白，守其黑，为天下式。 ☍ 式，模则也。 为天下式，常德不忒， ☍ 忒，差也。 复归于无极。 ☍ 不可穷也。 知其荣，守其辱，为天下谷，常德乃足，复归于朴。 ☍ 此三者，言常反终，后乃德全其所处也。下章云，反者道之动也。功不可取，常处其母也。 朴散则为器，圣人用之，则为官长， ☍ 朴，真也。真散则百行出，殊类生，若器也。圣人因其分散，故为之立官长。以善为师，不善为资，移风易俗，复使归于一也。 故大制不割。 ☍ 大制者，以天下之心为心，故无割也。 ◇二十九章 # 将欲取天下而为之，吾见其不得已。天下神器， ☍ 神，无形无方也。器，合成也。无形以合，故谓之神器也。 不可为也，为者败之，执者失之。 ☍ 万物以自然为性，故可因而不可为也。可通而不可执也。物有常性，而造为之，故必败也。物有往来而执之，故必失矣。 故物或行或随，或歔或吹。或强或羸，或挫或隳。是以圣人去甚，去奢，去泰。 ☍ 凡此诸或，言物事逆顺反复，不施为执割也。圣人达自然之至，畅万物之情，故因而不为，顺而不施。除其所以迷，去其所以惑，故心不乱而物性自得之也。 ◇三十章 # 以道佐人主者，不以兵强天下。 ☍ 以道佐人主，尚不可以兵强于天下，况人主躬于道者乎。 其事好还。 ☍ 为始者务欲立功生事，而有道者务欲还反无为，故云，其事好还也。 师之所处，荆棘生焉。大军之后，必有凶年。 ☍ 言师凶害之物也。无有所济，必有所伤，贼害人民，残荒田亩，故曰荆棘生焉。 善有果而已，不敢以取强。 ☍ 果犹济也。言善用师者，趣以济难而已矣，不以兵力取强于天下也。 果而勿矜，果而勿伐，果而勿骄。 ☍ 吾不以师道为尚，不得已而用，何矜骄之有也。 果而不得已，果而勿强。 ☍ 言用兵虽趣功果济难，然时故不得已，当复用者，但当以除暴乱，不遂用果以为强也。 物壮则老，是谓不道，不道早已。 ☍ 壮，武力暴兴，喻以兵强于天下者也。飘风不终朝，骤雨不终日，故暴兴必不道早已也。 ◇三十一章 # 夫佳兵者，不祥之器，物或恶之，故有道者不处。君子居则贵左，用兵则贵右。兵者不祥之器，非君子之器，不得已而用之，恬淡为上。胜而不美，而美之者，是乐杀人。夫乐杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。杀人之众，以哀悲泣之，战胜，以丧礼处之。\n◇三十二章 # 道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。 ☍ 道，无形不系，常不可名，以无名为常。故曰“道常无名”也。朴之为物，以无为心也，亦无名，故将得道，莫若守朴，夫智者可以能臣也，勇者可以武使也，巧者可以事役也，力者可以重任也，朴之为物，愦然不偏，近于无有，故曰“莫能臣也”。抱朴无为，不以物累其真，不以欲害其神，则物自宾而道自得也。 天地相合，以降甘露，民莫之令而自均。 ☍ 言天地相合，则甘露不求而自降；我守其真性无为，则民不令而自均也。 始制有名，名亦既有，夫亦将知止，知止所以不殆。 ☍ 始制，谓朴散始为官长之时也。始制官长，不可不立名分，以定尊卑，故始制有名也，过此以往，将争锥刀之末，故曰“名亦既有”，夫亦将知止也，遂任名以号物，则失治之母也，故知止所以不殆也。 譬道之在天下，犹川谷之于江海。 ☍ 川谷之求江与海，非江海召之，不召不求而自归者，世行道于天下者，不令而自均，不求而自得，故曰“犹川谷之与江海”也。 ◇三十三章 # 知人者智，自知者明。 ☍ 知人者，智而已矣，未若自知者超智之上也。 胜人者有力，自胜者强。 ☍ 胜人者，有力而已矣，未若自胜者无物以损其力，用其智于人，未若用其智于己也。用其力于人，未若用其力于己也。明用于己，则物无避焉，力用于己，则物无改焉。 知足者富。 ☍ 知足自不失，故富也。 强行者有志。 ☍ 勤能行之，其志必获，故曰强行者有志矣。 不失其所者久。 ☍ 以明自察，量力而行，不失其所，必获久长矣。 死而不亡者寿。 ☍ 虽死而以为生之道不亡，乃得全其寿，身没而道犹存，况身存而道不卒乎。 ◇三十四章 # 大道氾兮，其可左右。 ☍ 言道泛滥，无所不适，可左右上下周旋而用，则无所不至也。 万物恃之而生而不辞，功成不名有。衣养万物而不为主，常无欲，可名于小； ☍ 万物皆由道而生，既生而不知所由，故天下常无欲之时，万物各得其所，若道无施于物，故名于小矣。 万物归焉而不为主，可名为大。 ☍ 万物皆归之以生，而力使不知其所由，此不为小，故复可名于大矣。 以其终不自为大，故能成其大。 ☍ 为大于其细，图难于其易。 ◇三十五章 # 执大象，天下往。 ☍ 大象，天象之母也，不寒不温不凉，故能包统万物，无所犯伤，主若执之，则天下往也。 往而不害，安平太。 ☍ 无形无识，不偏不彰，故万物得往而不害妨也。 乐与饵，过客止。道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。 ☍ 言道之深大，人闻道之言，乃更不如乐与饵，应时感悦人心也。乐与饵则能令过客止，而道之出言淡然无味，视之不足见则不足以悦其目，听之不足闻则不足以娱其耳，若无所中然，乃用之不可穷极也。 ◇三十六章 # 将欲歙之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之。是谓微明。 ☍ 将欲除强梁，去暴乱，当以此四者。因物之性，令其自戮，不假刑为大，以除将物也，故曰微明也。足其张，令之足，而又求其张，则众所歙也，与其张之不足，而改其求张者，愈益而已反危。 柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。 ☍ 利器，利国之器也。唯因物之性，不假刑以理物，器不可睹，而物各得其所，则国之利器也。示人者，任刑也。刑以利国则失矣。鱼脱于渊，则必见失矣。利国器而立刑以示人，亦必失也。 ◇三十七章 # 道常无为 ☍ 顺自然也。 而无不为。 ☍ 万物无不由为以治以成之也。 侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。 ☍ 化而欲作，作欲成也。吾将镇之无名之朴，不为主也。 无名之朴，夫亦将无欲。 ☍ 无欲竞也。 不欲以静，天下将自定。\n★下篇（ 38 至 81 ） # ◇三十八章 # 上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德为之而有以为。上仁为之而无以为，上义为之而有以为。上礼为之而莫之应， 则攘臂而扔之。故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄，而乱之首。前识者，道之华，而愚之始。是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。 ☍ 德者，得也。常得而无丧，利而无害，故以德为名焉。何以得德？由乎道也。何以尽德？以无为用。以无为用则莫不载也，故物无焉，则无物不经，有焉，则 不足以免其生。是以天地虽广，以无为心。圣王虽大，以虚为主。故曰，以复而视，则天地之心见。至日而思之，则先王之至睹也。故灭其私而无其身，则四海莫不瞻，远近莫不至。殊其己而有其心，则一体不能自全，肌骨不能相容，是以上德之人，唯道是用。不德其德，无执无用，故能有德而无不为，不求而得，不为而成， 故虽有德而无德名也。下德求而得之，为而成之，则立善以治物，故德名有焉。求而得之必有失焉，为而成之必有败焉，善名生则有不善应焉，故下德为之而有以为也。无以为者，无所遍为也。凡不能无为而为之者，皆下德也。仁义礼节是也，将明德之上下，辄举下德以对上德，至于无以为，极下德下之量，上仁是也，足及于无以为而犹为之焉。为之而无以为，故有为，为之患矣。本在无为，母在无名，弃本舍母而适其子，功虽大焉，必有不济。名虽美焉，伪亦必生。不能不为而成，不兴而治，则乃为之，故有宏普博施仁爱之者，而爱之无所偏私，故上仁为之而无以为也。爱不能兼，则有抑抗正真而义理之者，忿枉祐直，助彼攻此物事而有以心为矣，故上义为之而有以为也。直不能笃，则有游饰修文，礼敬之者，尚好修敬，校责往来，则不对之闲，忿怒生焉。故上礼为之而莫之应，则攘臂而扔之。夫大之极也，其唯道乎，自此已往，岂足尊哉。故虽盛业大富而有万物，犹各得其德，虽贵以无为用，不能舍无以为体也。不能舍无以为体，则失其为大矣。所谓失道而后德也。以无为用，德其母，故能己不劳焉而物无不理。下此已往，则失用之母，不能无为而贵博施，不能博施而贵正直，不能正直而贵饰敬，所谓失德而后仁，失仁而后义，失义而后礼也。夫礼也，所始首于忠信不笃，通简不阳，责备于表，机微争制，夫仁义发于内，为之犹伪，况务外饰而可久乎。故夫礼者，忠信之薄而乱之首也。前识者，前人而识也，即下德之伦也。竭其聪明以为前识，役其智力以营庶事，虽德其情，奸巧弥密，虽丰其誉，愈丧笃实。劳而事昏，务而治薉，虽竭圣智，而民愈害。舍己任物，则无为而泰。守夫素朴，则不顺典制，听彼所获，弃此所守，识道之华，而愚之首，故茍得其为功之母，则万物作焉而不辞也。万事存焉而不劳也，用不以形，御不以名，故仁义可显，礼敬可彰也。夫载之以大道，镇之以无名，则物无所尚，志无所营，各任其贞，事用其诚，则仁德厚焉，行义正焉，礼敬清焉，弃其所载，舍其所生，用其成形，役其聪明，仁则诚焉，义其竞焉，礼其争焉，故仁德之厚，非用仁之所能也，行义之正，非用义之所成也。礼敬之清，非用礼之所济也。载之以道，统之以母，故显之而无所尚，彰之而无所竞。用夫无名，故名以笃焉。用夫无形，故形以成焉。守母以存其子，崇本以举其末，则形名俱有，而邪不生。大美配天而华不作，故母不可远，本不可失。仁义，母之所生，非可以为母。形器，匠之所成，非可以为匠也。舍其母而用其子，弃其本而适其末，名则有 所分，形则有所止，虽极其大，必有不周，虽盛其美，必有忧患，功在为之，岂足处也。 ◇三十九章 # 昔之得一者， ☍ 昔，始也。一，数之始而物之极也。各是一物之生，所以为主也。物皆各得此一以成，既成而舍以居成，居成则失其母，故皆裂发歇竭灭蹶也。 天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下贞。其致之， ☍ 各以其一致此清、宁、灵、盈、生、贞。 天无以清将恐裂， ☍ 用一以致清耳，非用清以清也。守一则清不失，用清则恐裂也。故为功之母，不可舍也。是以皆无用其功，恐丧其本也。 地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以贵高将恐蹶。故贵以贱为本，高以下为基。是以侯王自称孤﹑寡﹑不穀。此非以贱为本邪？非乎？故致数舆无舆，不欲琭琭如玉，珞珞如石。 ☍ 清不能为清，盈不能为盈，皆有其母以存其形，故清不足贵，盈不足多，贵在其母，而母无贵形。贵乃以贱为本，高乃以下为基，故致数舆乃无舆也，玉石琭琭珞珞，体尽于形，故不欲也。 ◇四十章 # 反者道之动， ☍ 高以下为基，贵以贱为本，有以无为用，此其反也。动皆知其所无，则物通矣。故曰“反者道之动”也。 弱者道之用。 ☍ 柔弱同通，不可穷极。 天下万物生于有，有生于无。 ☍ 天下之物皆以有为生，有之所始，以无为本，将欲全有，必反于无也。 ◇四十一章 # 上士闻道，勤而行之； ☍ 有志也。 中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。故建言有之﹕ ☍ 建，犹立也。 明道若昧， ☍ 光而不耀。 进道若退， ☍ 后其身而身先，外其身而身存。 夷道若颣， ☍ 颣，㘨也。大夷之道，因物之性，不执平以割物，其平不见，乃更反若颣㘨也。 上德若谷， ☍ 不德其德，无所怀也。 大白若辱， ☍ 知其白，守其黑，大白然后乃得。 广德若不足， ☍ 广德不盈，廓然无形，不可满也。 建德若偷， ☍ 偷，匹也。建德者，因物自然，不立不施，故若偷匹。 质真若渝， ☍ 质真者，不矜其真，故渝。 大方无隅， ☍ 方而不割，故无隅也。 大器晚成， ☍ 大器成天下不持全别，故必晚成也。 大音希声， ☍ 听之不闻名曰希，不可得闻之音也。有声则有分，有分则不宫而商矣，分则不能统众，故有声者非大音也。 大象无形， ☍ 有形则有分，有分者不温则炎，不炎则寒。故象而形者，非大象。 道隐无名。夫唯道，善贷且成。 ☍ 凡此诸善，皆是道之所成也。在象则为大象，而大象无形。在音则为大音，而大音希声。物以之成而不见其成形，故隐而无名也。贷之非唯供其乏而已，一贷之则足以永终其德，故曰善贷也。成之不如机匠之裁，无物而不济其形，故曰善成。 ◇四十二章 # 道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯孤﹑寡﹑不穀，而王公以为称。故物或损之而益，或益之而损。 ☍ 万物万形，其归一也，何由致一，由于无也。由无乃一，一可谓无，已谓之一，岂得无言乎。有言有一，非二如何？有一有二，遂生乎三，从无之有，数尽乎斯，过此以往，非道之流，故万物之生，吾知其主，虽有万形，冲气一焉。百姓有心，异国殊风，而得一者，王侯主焉。以一为主，一何可舍，愈多愈远，损则近之，损之至尽，乃得其极。既谓之一，犹乃至三，况本不一而道可近乎，损之而益，岂虚言也。 人之所教，我亦教之。 ☍ 我之非强使人从之也，而用夫自然，举其至理，顺之必吉，违之必凶。故人相教，违之自取其凶也，亦如我之教人，勿违之也。 强梁者不得其死，吾将以为教父。 ☍ 强梁则必不得其死。人相教为强梁，则必如我之教人不当为强梁也。举其强梁不得其死以教邪。若云顺吾教之必吉也，故得其违教之徒，适可以为教父也。 ◇四十三章 # 天下之至柔，驰骋天下之至坚。 ☍ 气无所不入，水无所不出于经。 无有入无间，吾是以知无为之有益。 ☍ 虚无柔弱，无所不通，无有不可穷，至柔不可折，以此推之，故知无为之有益也。 不言之教，无为之益，天下希及之。\n◇四十四章 # 名与身孰亲？ ☍ 尚名好高，其身必疏。 身与货孰多？ ☍ 贪货无厌，其身必少。 得与亡孰病？ ☍ 得多利而亡其身，何者为病也。 是故甚爱必大费，多藏必厚亡， ☍ 甚爱不与物通，多藏不与物散，求之者多，攻之者众，为物所病，故大费厚亡也。 知足不辱，知止不殆，可以长久。\n◇四十五章 # 大成若缺，其用不弊。 ☍ 随物而成，不为一象，故若缺也。 大盈若冲，其用不穷。 ☍ 大盈充足，随物而与，无所爱矜，故若冲也。 大直若屈，其用不居。 ☍ 随物而直，直不在一，故若屈也。 大巧若拙，其用不辍。 ☍ 大巧，因自然以成器，不造为异端，故若拙也。 大辩若讷，其用不差。 ☍ 大辩因物而言，己无所造，故若讷也。 躁胜寒，静胜热。清静为天下正。 ☍ 躁罢然后胜寒，静无为以胜热，以此推之，则清静为天下正也。静则全物之真，躁则犯物之性，故惟清静，乃得如上诸大也。 ◇四十六章 # 天下有道，却走马以粪。 ☍ 天下有道，知足知止，无求于外，各修其内而已，故却走马以治田粪也。 天下无道，戎马生于郊。 ☍ 贪欲无厌，不修其内，各求于外，故戎马生于郊也。 祸莫大于不知足；咎莫大于欲得。故知足之足，常足矣。\n◇四十七章 # 不出户，知天下；不窥牖，见天道。 ☍ 事有宗，而物有主，途虽殊而同归也，虑虽百而其致一也。道有大常，理有大致，执古之道，可以御今，虽处于今，可以知古始，故不出户窥牖而可知也。 其出弥远，其知弥少。 ☍ 无在于一，而求之于众也，道视之不可见，听之不可闻，搏之不可得，如其知之，不须出户，若其不知，出愈远愈迷也。 是以圣人不行而知，不见而名， ☍ 得物之致，故虽不行而虑可知也。识物之宗，故虽不见，而是非之理可得而名也。 不为而成。 ☍ 明物之性，因之而已。故虽不为而使之成矣。 ◇四十八章 # 为学日益， ☍ 务欲进其所能，益其所习。 为道日损。 ☍ 务欲反虚无也。 损之又损，以至于无为。无为而无不为。 ☍ 有为则有所失，故无为乃无所不为也。 取天下常以无事， ☍ 动常因也。 及其有事， ☍ 自己造也。 不足以取天下。 ☍ 失统本也。 ◇四十九章 # 圣人无常心，以百姓心为心。 ☍ 动常因也。 善者，吾善之；不善者，吾亦善之， ☍ 各因其用则善不失也。 德善。 ☍ 无弃人也。 信者，吾信之；不信者，吾亦信之，德信。圣人在天下歙歙，为天下浑其心， ☍ 各用聪明。 百姓皆注其耳目, 圣人皆孩之。 ☍ 皆使和而无欲，如婴儿也。夫天地设位，圣人成能，人谋鬼谋，百姓与能者，能者与之，资者取之，能大则大，资贵则贵，物有其宗，事有其主，如此则可冕旒充目而不惧于欺，黈纩塞耳而无戚于慢，又何为劳一身之聪明，以察百姓之情哉。夫以明察物，物亦竞以其明应之，以不信察物，物亦竞以其不信应之。夫天下之 心，不必同其所应，不敢异则莫肯用其情矣，甚矣害之大也，莫大于用其明矣。夫在智则人与之讼，在力则人与之争。智不出于人而立乎讼地则穷矣；力不出于人而立乎争地则危矣。未有能使人无用其智力乎己者也，如此则己以一敌人，而人以千万敌己也。若乃多其法网，烦其刑罚，塞其径路，攻其幽宅，则万物失其自然，百姓丧其手足，鸟乱于上，鱼乱于下。是以圣人之于天下歙歙焉，心无所主也，为天下浑心焉，意无所适莫也。无所察焉，百姓何避，无所求焉，百姓何应， 无避无应，则莫不用其情矣。人无为舍其所能，而为其所不能，舍其所长，而为其所短，如此，则言者言其所知，行者行其所能，百姓各皆注其耳目焉，吾皆孩之而已。 ◇五十章 # 出生入死。 ☍ 出生地，入死地。 生之徒，十有三；死之徒，十有三；人之生，动之死地，亦十有三。夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕虎，入军不被甲兵；兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。 ☍ 十有三，犹云十分有三分，取其生道，全生之极，十分有三耳。取死之道，全死之极，亦十分有三耳。而民生生之厚，更之无生之地焉，善摄生者无以生为 生，故无死地也。器之害者，莫甚乎兵戈，兽之害者，莫甚乎兕虎，而令兵戈无所容其锋刃，虎兕无所措其爪角，斯诚不以欲累其身者也，何死地之有乎。夫蚖蟺以 渊为浅，而凿穴其中，鹰鹯以山为卑，而增巢其上，矰缴不能及，网罟不能到，可谓处于无死地矣，然而卒以甘饵，乃入于无生之地，岂非生生之厚乎，故物茍不以 求离其本，不以欲渝其真，虽入军而不害，陆行而不可犯也，赤子之可则而贵信矣。 ◇五十一章 # 道生之，德畜之，物形之，势成之。 ☍ 物生而后畜，畜而后形，形而后成，何由而生？道也；何得而畜？德也；何由而形？物也；何使而成，势也。唯因也，故能无物而不形；唯势也，故能无物而不成。凡物之所以生，功之所以成，皆有所由，有所由焉，则莫不由乎道也。故推而极之，亦至道也。随其所因，故各有称焉。 是以万物莫不尊道而贵德。 ☍ 道者，物之所由也。德者，物之所得也。由之乃得，故曰不得不失，尊之则害，不得不贵也。 道之尊，德之贵，夫莫之命而常自然。 ☍ 命并作爵。 故道生之，德畜之。长之育之，亭之毒之，盖之覆之。 ☍ 谓成其实，各得其庇荫，不伤其体矣。 生而不有，为而不恃， ☍ 为而不有。 长而不宰。是谓玄德。 ☍ 有德而不知其主也，出乎幽冥，是以谓之玄德也。 ◇五十二章 # 天下有始，以为天下母。 ☍ 善始之则善养畜之矣，故天下有始则可以为天下母矣。(按此段注文原脱，据楼宇烈补。) 既得其母，以知其子，既知其子，复守其母，没身不殆。 ☍ 母，本也，子，末也。得本以知末，不舍本以逐末也。 塞其兑，闭其门， ☍ 兑，事欲之所由生；门，事欲之所由从也。 终身不勤。 ☍ 无事永逸，故终身不勤也。 开其兑，济其事，终身不救。 ☍ 不闭其原而济其事，故虽终身不救。 见小曰明，守柔曰强。 ☍ 为治之功不在大，见大不明，见小乃明。守强不强，守柔乃强也。 用其光， ☍ 显道以去民迷。 复归其明， ☍ 不明察也。 无遗身殃，是为习常。 ☍ 道之常也。 ◇五十三章 # 使我介然有知，行于大道，唯施是畏。 ☍ 言若使我可介然有知，行大道于天下，唯施为之是畏也。 大道甚夷，而民好径。 ☍ 言大道荡然正平，而民犹尚舍之而不由，好从邪径，况复施为以塞大道之中乎。故曰，大道甚夷，而民好径。 朝甚除， ☍ 朝，宫室也。除，洁好也。 田甚芜，仓甚虚； ☍ 朝甚除，则田甚芜，仓甚虚，设一而众害生也。 服文彩，带利剑，厌饮食，财货有馀；是为盗夸。非道也哉！ ☍ 凡物不以其道得之，则皆邪也，邪则盗也。夸而不以其道得之，窃位也，故举非道以明非道，则皆盗夸也。 ◇五十四章 # 善建者不拔， ☍ 固其根而后营其末，故不拔也。 善抱者不脱， ☍ 不贪于多，齐其所能，故不脱也。 子孙以祭祀不辍。 ☍ 子孙传此道以祭祀则不辍也。 修之于身，其德乃真；修之于家，其德乃馀； ☍ 以身及人也，修之身则真，修之家则有馀，修之不废，所施转大。 修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家，以乡观乡，以国观国， ☍ 彼皆然也。 以天下观天下。 ☍ 以天下百姓心观天下之道也，天下之道，逆顺吉凶，亦皆如人之道也。 吾何以知天下然哉？以此。 ☍ 此上之所云也。言吾何以得知天下乎，察己以知之，不求于外也，所谓不出户以知天下者也。 ◇五十五章 # 含德之厚，比于赤子。蜂虿虺蛇不螫，猛兽不据，攫鸟不搏。 ☍ 赤子无求无欲，不犯众物，故毒虫之物无犯之人也。含德之厚者，不犯于物，故无物以损其全也。 骨弱筋柔而握固。 ☍ 以柔弱之故，故握能周固。 未知牝牡之合而全作， ☍ 作，长也。无物以损其身，故能全长也。言含德之厚者，无物可以损其德、渝其真，柔弱不争而不摧折，皆若此也。 精之至也。终日号而不嗄， ☍ 无争欲之心，故终日出声而不嗄也。 和之至也。知和曰常， ☍ 物以和为常，故知和则得常也。 知常曰明。 ☍ 不皦不昧，不温不凉，此常也。无形不可得而见，曰明也。 益生曰祥。 ☍ 生不可益，益之则夭也。 心使气曰强。 ☍ 心宜无有，使气则强。 物壮则老，谓之不道，不道早已。\n◇五十六章 # 知者不言， ☍ 因自然也。 言者不知。 ☍ 造事端也。 塞其兑，闭其门，挫其锐， ☍ 含守质也。 解其分， ☍ 除争原也。 和其光， ☍ 无所特显，则物无所偏争也。 同其尘， ☍ 无所特贱，则物无所偏耻也。 是谓玄同。故不可得而亲，不可得而疏； ☍ 可得而亲，则可得而疏也。 不可得而利，不可得而害； ☍ 可得而利，则可德而害也。 不可得而贵，不可得而贱。 ☍ 可得而贵，则可得而贱也。 故为天下贵。 ☍ 无物可以加之也。 ◇五十七章 # 以正治国，以奇用兵，以无事取天下。 ☍ 以道治国则国平，以正治国则奇正起也，以无事则能取天下也。上章云：其取天下者，常以无事，及其有事，又不足以取天下也。故以正治国则不足以取天下，而以奇用兵也。夫以道治国，崇本以息末，以正治国，立辟以攻末，本不立而末浅，民无所及，故必至于奇用兵也。 吾何以知其然哉？以此。天下多忌讳，而民弥贫；民多利器，国家滋昏； ☍ 利器，凡所以利己之器也。民强则国家弱。 人多伎巧，奇物滋起； ☍ 民多智慧则巧伪生，巧伪生则邪事起。 法令滋彰，盗贼多有。 ☍ 立正欲以息邪，而奇兵用；多忌讳欲以耻贫，而民弥贫；利器欲以强国者也，而国愈昏多。皆舍本以治末，故以致此也。 故圣人云﹕“我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。” ☍ 上之所欲，民从之速也。我之所欲，唯无欲而民亦无欲而自朴也。此四者，崇本以息末也。 ◇五十八章 # 其政闷闷，其民淳淳； ☍ 言善治政者，无形无名，无事无政可举，闷闷然，卒至于大治，故曰，其政闷闷也。其民无所争竞，宽大淳淳，故曰，其民淳淳也。 其政察察，其民缺缺。 ☍ 立刑名，明赏罚，以检奸伪，故曰察察也。殊类分析，民怀争竞，故曰，其民缺缺也。 祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。 ☍ 言谁知善治之极乎！唯无可正举，无可形名，闷闷然而天下大化，是其极也。 正复为奇， ☍ 以正治国，则便复以奇用兵矣。故曰，正复为奇。 善复为妖。 ☍ 立善以和万物，则便复有妖之患也。 人之迷，其日固久。 ☍ 言人之迷惑失道，固久矣。不可便正善治以责。 是以圣人方而不割， ☍ 以方导物，舍去其邪，不以方割物，所谓大方无隅。 廉而不刿， ☍ 廉，清廉也；刿，伤也。以清廉清民，令去其邪，令去其污，不以清廉刿伤于物也。 直而不肆， ☍ 以直导物，令去其僻，而不以直激沸于物也。所谓大直若屈也。 光而不燿。 ☍ 以光鉴其所以迷，不以光照求其隐慝也，所谓明道若昧也，此皆崇本以息末，不攻而使复之也。 ◇五十九章 # 治人事天，莫若啬。 ☍ 莫若，犹莫过也。啬，农夫，农人之治田务，去其殊类，归于齐一也。全其自然，不急其荒病，除其所以荒病，上承天命，下绥百姓，莫过于此。 夫唯啬，是谓早服； ☍ 早服，常也。 早服谓之重积德； ☍ 唯重积德，不欲锐速，然后乃能使早服其常，故曰早服谓之重积德者也。 重积德则无不克，无不克则莫知其极； ☍ 道无穷也。 莫知其极，可以有国； ☍ 以有穷而莅国，非能有国也。 有国之母，可以长久； ☍ 国之所以安谓之母，重积德是唯图其根，然后营末，乃得其终也。 是谓深根固柢，长生久视之道。\n◇六十章 # 治大国，若烹小鲜。 ☍ 不扰也，躁则多害，静则全真，故其国弥大，而其主弥静，然后乃能广得众心矣。 以道莅天下，其鬼不神； ☍ 治大国则若烹小鲜，以道莅天下则其鬼不神也。 非其鬼不神，其神不伤人； ☍ 神不害自然也，物守自然则神无所加，神无所加则不知神之为神也。 非其神不伤人，圣人亦不伤人。 ☍ 道洽则神不伤人，神不伤人则不知神之为神。道洽则圣人亦不伤人，圣人不伤人则不知圣人之为圣也。犹云，不知神之为神，亦不知圣人之为圣也。夫恃威网以使物者，治之衰也。使不知神圣之为神圣，道之极也。 夫两不相伤，故德交归焉。 ☍ 神不伤人，圣人亦不伤人，圣人不伤人，神亦不伤人。故曰，两不相伤也。神圣合道，交归之也。 ◇六十一章 # 大国者下流， ☍ 江海居大而处下，则百川流之，大国居大而处下，则天下流之，故曰，大国下流也。 天下之交。 ☍ 天下所归会也。 天下之牝， ☍ 静而不求，物自归之也。 牝常以静胜牡，以静为下。 ☍ 以其静故能为下也。牝，雌也。雄躁动贪欲，雌常以静，故能胜雄也。以其静复能为下，故物归之也。 故大国以下小国， ☍ 大国以下，犹云以大国下小国。 则取小国； ☍ 小国则附之。 小国以下大国，则取大国。 ☍ 大国纳之也。 故或下以取，或下而取。 ☍ 言唯修卑下，然后乃各得其所。 大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。 ☍ 小国修下自全而已，不能令天下归之，大国修下则天下归之。故曰，各得其所欲，则大者宜为下也。 ◇六十二章 # 道者万物之奥。 ☍ 奥，犹暧也。可得庇荫之辞。 善人之宝， ☍ 宝以为用也。 不善人之所保。 ☍ 保以全也。 美言可以市，尊行可以加人。 ☍ 言道无所不先，物无有贵于此也。虽有珍宝璧马，无以匹之，美言之则可以夺众货之贾，故曰，美言可以市也，尊行之则千里之外应之，故曰，可以加于人也。 人之不善，何弃之有？ ☍ 不善当保道以免放。 故立天子，置三公， ☍ 言以尊行道也。 虽有拱璧以先驷马，不如坐进此道。 ☍ 此道，上之所云也。言故立天子、置三公，尊其位、重其人，所以为道也。物无有贵于此者。故虽有拱抱宝璧以先，驷马而进之，不如坐而进此道也。 古之所以贵此道者何？不曰以求得，有罪以免邪？故为天下贵。 ☍ 以求则得求，以免则得免，无所而不施，故为天下贵也。 ◇六十三章 # 为无为，事无事，味无味。 ☍ 以无为为居，以不言为教，以恬淡为味，治之极也。 大小多少，报怨以德。 ☍ 小怨则不足以报，大怨则天下之所欲诛，顺天下之所同者，德也。 图难于其易，为大于其细；天下难事必作于易，天下大事必作于细。是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之， ☍ 以圣人之才犹尚难于细易，况非圣人之才而欲忽于此乎，故曰，犹难之也。 故终无难矣\n◇六十四章 # 其安易持，其未兆易谋。 ☍ 以其安不忘危，持之不忘亡，谋之无功之势，故曰易也。 其脆易泮，其微易散。 ☍ 虽失无入有，以其微脆之故，未足以兴大功，故易也。此四者，皆说慎终也。不可以无之故而不持，不可以微之故而弗散也。无而弗持则生有焉，微而不散则生大焉。故虑终之患，如始之祸，则无败事。 为之于未有， ☍ 谓其安未兆也。 治之于未乱。 ☍ 谓微脆也。 合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之，执者失之。 ☍ 当以慎终除微，慎微除乱，而以施为治之，形名执之，反生事原，巧辟滋作，故败失也。 是以圣人无为故无败，无执故无失。民之从事，常于几成而败之。 ☍ 不慎终也。 慎终如始，则无败事。是以圣人欲不欲，不贵难得之货； ☍ 好欲虽微，争尚为之，兴难得之货虽细，贪盗为之起也。 学不学，复众人之所过。 ☍ 不学而能者，自然也，喻于不学者，过也。故学不学，以复众人之过。 以辅万物之自然，而不敢为。\n◇六十五章 # 古之善为道者，非以明民，将以愚之。 ☍ 明谓多见巧诈，蔽其朴也。愚谓无知守真，顺自然也。 民之难治，以其智多。 ☍ 多智巧诈，故难治也。 故以智治国，国之贼， ☍ 智，犹治也，以智而治国，所以谓之贼者，故谓之智也。民之难治，以其多智也，当务塞兑闭门，令无知无欲，而以智术动民。邪心既动，复以巧术防民之伪，民知其术，防随而避之，思惟密巧，奸伪益滋，故曰，以智治国，国之贼也。 不以智治国，国之福。知此两者亦稽式。常知稽式，是谓玄德。玄德深矣，远矣， ☍ 稽，同也。今古之所同，则而不可废，能知稽式，是谓玄德，玄德深矣，远矣。 与物反矣， ☍ 反其真也。 然后乃至大顺。\n◇六十六章 # 江海所以能为百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之。欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌，以其不争，故天下莫能与之争。\n◇六十七章 # 天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细也夫！ ☍ 久矣其细，犹曰其细久矣。肖，则失其所以为大矣。故曰，若肖久矣，其细也夫。 我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。 慈故能勇， ☍ 夫慈，以陈则胜，以守则固，故能勇也。 俭故能广， ☍ 节俭爱费，天下不匮，故能广也。 不敢为天下先，故能成器长。 ☍ 唯后外其身，为物所归，然后乃能立成器为天下利，为物之长也。 今舍慈且勇， ☍ 且，犹取也。 舍俭且广，舍后且先，死矣！ 夫慈以战则胜， ☍ 相慜而不避于难，故胜也。 以守则固。天将救之，以慈卫之。\n◇六十八章 # 善为士者不武， ☍ 士，卒之帅也。武，尚先陵人也。 善战者不怒， ☍ 后而不先，应而不唱，故不在怒。 善胜敌者不与， ☍ 不与争也。 善用人者为之下，是谓不争之德，是谓用人之力， ☍ 用人而不为之下，则力不为用也。 是谓配天古之极。\n◇六十九章 # 用兵有言﹕“吾不敢为主而为客，不敢进寸而退尺。”是谓行无行， ☍ 彼遂不止。 攘无臂，扔无敌， ☍ 行，谓行陈也，言以谦退哀慈，不敢为物先，用战犹行无行，攘无臂，执无兵，扔无敌也，言无有与之抗也。 执无兵。 祸莫大于轻敌，轻敌几丧吾宝。 ☍ 言吾哀慈谦退，非欲以取强，无敌于天下也。不得已而卒至于无敌，斯乃吾之所以为大祸也。宝，三宝也，故曰，几亡吾宝。 故抗兵相加，哀者胜矣。 ☍ 抗，举也；加，当也。哀者，必相惜而不趣利避害，故必胜。 ◇七十章 # 吾言甚易知，甚易行。天下莫能知，莫能行。 ☍ 可不出户窥牖而知，故曰甚易知也。无为而成，故曰甚易行也。惑于躁欲，故曰，莫之能知也。迷于荣利，故曰，莫之能行也。 言有宗，事有君。 ☍ 宗，万物之宗也。君，万物之主也。 夫唯无知，是以不我知。 ☍ 以其言有宗、事有君之故，故有知之人不得不知之也。 知我者希，则我者贵。 ☍ 唯深，故知者希也；知我益希，我亦无匹。故曰，知我者希则我者贵也。 是以圣人被褐怀玉。 ☍ 被褐者，同其尘，怀玉者，宝其真也。圣人之所以难知，以其同尘而不殊，怀玉而不渝，故难知而为贵也。 ◇七十一章 # 知不知上，不知知病。 ☍ 不知知之不足任则病也。 夫唯病病，是以不病。圣人不病，以其病病，是以不病。\n◇七十二章 # 民不畏威，则大威至。无狎其所居，无厌其所生。 ☍ 清静无为谓之居，谦后不盈谓之生，离其清净，行其躁欲，弃其谦后，任其威权，则物扰而民僻，威不能复制民，民不能堪其威，则上下大溃矣，天诛将至。故曰，民不畏威，则大威至。无狎其所居，无厌其所生，言威力不可任也。 夫唯不厌， ☍ 不自厌也。 是以不厌。 ☍ 不自厌，是以天下莫之厌。 是以圣人自知不自见， ☍ 不自见其所知，以光耀行威也。 自爱不自贵； ☍ 自贵则物狎厌居生。 故去彼取此。\n◇七十三章 # 勇于敢则杀， ☍ 必不得其死也。 勇于不敢则活。 ☍ 必齐命也。 此两者，或利或害。 ☍ 俱勇而所施者异，利害不同，故曰，或利或害也。 天之所恶，孰知其故？是以圣人犹难之。 ☍ 孰，谁也。言谁能知天下之所恶意故邪？其唯圣人。夫圣人之明，犹难于勇敢，况无圣人之明而欲行之也。故曰，犹难之也。 天之道，不争而善胜， ☍ 天唯不争，故天下莫能与之争。 不言而善应， ☍ 顺则吉，逆则凶，不言而善应也。 不召而自来， ☍ 处下则物自归。 然而善谋。 ☍ 垂象而见吉凶，先事而设诚，安而不忘危，未召而谋之，故曰，𦈎然而善谋也。 天网恢恢，疏而不失。\n◇七十四章 # 民不畏死，奈何以死惧之？若使民常畏死，而为奇者，吾得执而杀之，孰敢？ ☍ 诡异乱群谓之奇也。 常有司杀者杀，夫代司杀者杀，是谓代大匠斲。 夫代大匠斲者，希有不伤其手矣。 ☍ 为逆顺者之所恶忿也，不仁者人之所疾也。故曰，常有司杀也。 ◇七十五章 # 民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。民之轻死，以其上求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。 ☍ 言民之所以僻，治之所以乱，皆由上不由其下也，民从上也。 ◇七十六章 # 人之生也柔弱，其死也坚强。 万物草木之生也柔脆，其死也枯槁。 故坚强者死之徒，柔弱者生之徒。 是以兵强则不胜， ☍ 强兵以暴于天下者，物之所恶也，故必不得胜。 木强则兵。 ☍ 物所加也。 强大处下， ☍ 木之本也。 柔弱处上。 ☍ 枝条是也。 ◇七十七章 # 天之道，其犹张弓与？高者抑之，下者举之；有馀者损之，不足者补之。天之道，损有馀而补不足。 人之道则不然， ☍ 与天地合德，乃能包之，如天之道。如人之量，则各有其身，不得相均，如惟无身无私乎，自然然后乃能与天地合德。 损不足以奉有馀。 孰能有馀以奉天下？唯有道者。 是以圣人为而不恃，功成而不处，其不欲见贤。 ☍ 言唯能处盈而全虚，损有以补无，和光同尘，荡而均者，唯其道也。是以圣人不欲示其贤以均天下。 ◇七十八章 # 天下莫柔弱于水，而攻坚强者，莫之能胜，其无以易之。 ☍ 以，用也。其，谓水也。言用水之柔弱，无物可以易之也。 弱之胜强，柔之胜刚，天下莫不知莫能行。是以圣人云﹕“受国之垢，是谓社稷主；受国不祥，是为天下王。”正言若反。\n◇七十九章 # 和大怨，必有馀怨， ☍ 不明理其契，以致大怨已至。而德和之，其伤不复，故有馀怨也。 安可以为善？是以圣人执左契， ☍ 左契，防怨之所由生也。 而不责于人。有德司契， ☍ 有德之人念思其契，不念怨生而后责于人也。 无德司彻。 ☍ 彻，司人之过也。 天道无亲，常与善人。\n◇八十章 # 小国寡民， ☍ 国既小，民又寡，尚可使反古，况国大民众乎？故举小国而言也。 使有什伯之器而不用， ☍ 言使民虽有什伯之器而无所用，何患不足也。 使民重死而不远徙。 ☍ 使民不用，惟身是宝，不贪货赂，故各安其居，重死而不远徙也。 虽有舟舆，无所乘之；虽有甲兵，无所陈之。 使人复结绳而用之，甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬之声相闻，民至老死，不相往来。 ☍ 无所欲求。 ◇八十一章 # 信言不美， ☍ 实在质也。 美言不信。 ☍ 本在朴也。 善者不辩，辩者不善。 知者不博， ☍ 极在一也。 博者不知。 圣人不积， ☍ 无私自有，唯善是与，任物而已。 既以为人己愈有， ☍ 物所尊也。 既以与人己愈多。 ☍ 物所归也。 天之道，利而不害； ☍ 动常生成之也。 圣人之道，为而不争。 ☍ 顺天之利不相伤也。 ","date":"4 August 2025","externalUrl":null,"permalink":"/posts/reading-2-tao_te_ching/","section":"Blog","summary":"","title":"Tao Te Ching","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/hong-kong/","section":"Tags","summary":"","title":"Hong Kong","type":"tags"},{"content":" Overnight at the Airport 15 July Hangzhou → Hangzhou Xiaoshan International Airport Hong Kong Banks \u0026amp; Hostel 16 July Hong Kong International Airport → Yau Ma Tei The plane landed at Hong Kong T1 at 10:40. After clearing customs, it was already 11:10. Follow the Bus signs out of the airport, cross the road and turn right; where there are many people is the S1 bus stop. Take the Citybus Airport Express S1 and get off at Tung Chung Station Bus Terminus. Then transfer to the MTR Tung Chung Line to Olympic Station, go to 7-ELEVEn (Olympian City) to buy a Club Sim card. By then, it was already 12:31. Exit C of the metro leads directly to HSBC Centre. Connect to HSBC's Wi-Fi to apply for a bank account online: HSBC: Ask the staff about depositing HKD after opening the account. They will help you get a queue number and ask you to supplement your signature. Airstar Bank ZA Bank Ant Bank (binds with AlipayHK) After completing the online account openings, it was already 15:16. Walk to Yesinn @ YMT (Yau Ma Tei Yesinn Youth Hostel) to check in; by then, it was 15:51. City Walk 1 16 July Yau Ma Tei → Tsim Sha Tsui By evening, I finally packed away all my paperwork and walked from the hostel to the Avenue of Stars in Tsim Sha Tsui. The sea breeze carried a moist, salty scent, and the lights on both sides of Victoria Harbour shimmered on the water. In that moment, the fatigue of the day was washed away by the night view. City Walk 2 17 July Tsim Sha Tsui → Central → Causeway Bay → Tsim Sha Tsui The next day, I decided to slow down a bit. In the morning, I walked to Star Ferry Terminal, Tsim Sha Tsui, bought a ticket, queued up, and boarded the Star Ferry—an ordinary-looking boat that carries countless memories. As the ferry left the pier, a cool breeze hit my face, and the Hong Kong Island skyline slowly approached. After arriving at Central Ferry Pier, I took a bus and then walked to Causeway Bay, enjoying the city scenery along the way. The minimalism of MUJI, the familiarity of IKEA, and the lively atmosphere of Donki each offered a different shopping experience. In the evening, I walked along the street to Wan Chai Pier and took the Star Ferry again, watching the water turn orange-red in the sunset. Returning to Tsim Sha Tsui, I took a bus back to Yesinn @ YMT, ending two packed but fulfilling days. Practical Information Tips Accommodation: Yesinn @ YMT (Yau Ma Tei) (Convenient for the metro, suitable for short stays) Transport: Alipay Transit QR code can be used for all transport (bus, MTR, Star Ferry) Suggestion: Complete all bank procedures in one day, so you can arrange sightseeing easily on the second day ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/life-2-hongkong/","section":"Blog","summary":"","title":"Hong Kong","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/china/","section":"Tags","summary":"","title":"China","type":"tags"},{"content":" The road is not perfect, but it leads to the distance Preface # Taking advantage of the iPhone\u0026rsquo;s Live Photos feature to generate videos, I compiled the photos taken along my 318 cycling journey into a short video. During this process, many memories suddenly resurfaced, as if I was once again on that familiar and long road. A year has passed, many things have changed, but the feelings and thoughts from that journey remain vivid. So, I decided to write them down—for my present self, and for someday in the future when I look back.\nMain Text # Looking back on this experience, it can be as long or as short as you want.\nIf I write too much, I worry my future self will be too lazy to read; if I write too little, I\u0026rsquo;m afraid it will be lost in the river of time.\nSo I’ll just leave this part, which touched me the most and is most worth recording.\nThe biggest feeling from cycling 318 is: Once you choose a road, walk it firmly.\nWhy do I say this? Because this 2,160 km Sichuan-Tibet Route 318, starting from Chengdu, made me truly experience that the “road” is never fixed—it’s neither perfect nor simple.\nI rode through country lanes and got lost at highway entrances;\nExperienced days stranded by flat tires and delays, and moments of endless climbing that left me breathless;\nWalked misty mountain roads in the rain and fog, greeted monkeys along the way;\nClimbed wild hills at midnight for hot springs, and after fixing a tire, got caught in hail and rain so heavy I couldn’t see the road;\nThere were plateaus, muddy construction, roaring trucks in long tunnels, landslides\u0026hellip;\nOf course, there were also roads with breathtaking scenery that made me stop in awe.\nThe diversity and challenge of just the “road” alone is so rich, yet it’s only part of the journey.\nThe people along the way, the stories I encountered, the loneliness and excitement, the surging emotions inside\u0026hellip;\nThere’s so much more, far beyond what a few words can express.\nThis is one road, but it let me experience countless possibilities of what a “road” can be.\nBut none of that matters anymore. What matters is: I didn’t get lost. I knew I was riding toward Tibet, toward Lhasa.\nIsn’t life the same?\nSometimes we care too much about which road “looks better” right now—smoother, more profitable—and forget the most crucial thing: Are you moving toward your goal?\nWhat 318 taught me is that once you’ve chosen your goal, even if the road you’re on isn’t perfect, isn’t comfortable, or doesn’t seem “worth it,” as long as it leads toward the destination, it’s worth sticking to.\nGo a segment, then another, and piece together those fragments into the complete path to your dream.\nOn the other hand, those “good-looking” roads—if they only take you further off course—are the real detour.\nSo, after finishing 318, I have more courage to face life’s choices.\nI no longer blindly pursue the “best road,” but have learned to ask myself: Is this the road that brings me closer to my destination?\nAs long as the answer is yes, then just like cycling 318, even if it’s wind and rain all the way, it’s worth it.\nPhoto Gallery (238 photos) # Closing Remark / Motto # Not every step is perfect, but every step brings you closer to the distance.\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/life-1-road-318/","section":"Blog","summary":"Looking back on a year of cycling along National Highway 318, reflecting on those imperfect but goal-oriented roads.","title":"Reflections on the First Anniversary of Cycling China's 318","type":"posts"},{"content":"Back to the series index\nCategory Reading Method / Education / Intellectual Training Authors Mortimer J. Adler (USA)\nCharles Van Doren (USA) Title How to Read a Book Year of Publication 1940 (First Edition)\n1972 (Revised and Expanded Edition) Links How to Read a Book @ Wikipedia Summary:\nMortimer J. Adler, an American philosopher and educator, originally published this book in 1940. The 1972 edition, co-authored with Charles Van Doren, is the most widely read and influential version.\nThe book introduces four levels of reading: Elementary Reading, Inspectional Reading, Analytical Reading, and Syntopical Reading. It systematically explains how to read and truly understand complex and theoretical books.\nIt emphasizes that reading is not just about gathering information, but about training comprehension and thinking skills. This book is suitable not only for students but also for anyone who wants to improve their learning efficiency and engage in deep reading.\nOften referred to as \u0026ldquo;the user manual for all books,\u0026rdquo; it is a starting point for independent learning.\n★PART ONE The Dimensions of Reading # ★1 THE ACTIVITY AND ART OF READING # This is a book for readers and for those who wish to become readers. Particularly, it is for readers of books. Even more particularly, it is for those whose main purpose in reading books is to gain increased understanding.\nBy “readers” we mean people who are still accustomed, as almost every literate and intelligent person used to be, to gain a large share of their information about and their understanding of the world from the written word. Not all of it, of course; even in the days before radio and television, a certain amount of information and understanding was acquired through spoken words and through observation. But for intelligent and curious people that was never enough. They knew that they had to read too, and they did read.\nThere is some feeling nowadays that reading is not as necessary as it once was. Radio and especially television have taken over many of the functions once served by print, just as photography has taken over functions once served by painting and other graphic arts. Admittedly, television serves some of these functions extremely well; the visual communication of news events, for example, has enormous impact. The ability of radio to give us information while we are engaged in doing other things—for instance, driving a car—is remarkable, and a great saving of time. But it may be seriously questioned whether the advent of modern communication media has much enhanced our understanding of the world in which we live.\nPerhaps we know more about the world than we used to, and insofar as knowledge is prerequisite to understanding, that is all to the good. But knowledge is not as much a prerequisite to understanding as is commonly supposed. We do not have to know everything about something in order to understand it; too many facts are often as much of an obstacle to understanding as too few. There is a sense in which we modems are inundated with facts to the detriment of understanding.\nOne of the reasons for this situation is that the very media we have mentioned are so designed as to make thinking seem unnecessary (though this is only an appearance). The packaging of intellectual positions and views is one of the most active enterprises of some of the best minds of our day. The viewer of television, the listener to radio, the reader of magazines, is presented with a whole complex of elements—all the way from ingenious rhetoric to carefully selected data and statistics—to make it easy for him to “make up his own mind” with the minimum of difficulty and effort. But the packaging is often done so effectively that the viewer, listener, or reader does not make up his own mind at all. Instead, he inserts a packaged opinion into his mind, somewhat like inserting a cassette into a cassette player. He then pushes a button and “plays back” the opinion whenever it seems appropriate to do so. He has performed acceptably without having had to think.\n◇Active Reading # As we said at the beginning, we will be principally concerned in these pages with the development of skill in reading books; but the rules of reading that, if followed and practiced, develop such skill can be applied also to printed material in general, to any type of reading matter—to newspapers, magazines, pamphlets, articles, tracts, even advertisements.\nSince reading of any sort is an activity, all reading must to some degree be active. Completely passive reading is impossible; we cannot read with our eyes immobilized and our minds asleep. Hence when we contrast active with passive reading, our purpose is, first, to call attention to the fact that reading can be more or less active, and second, to point out that the more active the reading the better. One reader is better than another in proportion as he is capable of a greater range of activity in reading and exerts more effort. He is better if he demands more of himself and of the text before him.\nThough, strictly speaking, there can be no absolutely passive reading, many people think that, as compared with writing and speaking, which are obviously active undertakings, reading and listening are entirely passive. The writer or speaker must put out some effort, but no work need be done by the reader or listener. Reading and listening are thought of as receiving communication from someone who is actively engaged in giving or sending it. The mistake here is to suppose that receiving communication is like receiving a blow or a legacy or a judgment from the court. On the contrary, the reader or listener is much more like the catcher in a game of baseball.\nCatching the ball is just as much an activity as pitching or hitting it. The pitcher or batter is the sender in the sense that his activity initiates the motion of the ball. The catcher or fielder is the receiver in the sense that his activity terminates it. Both are active, though the activities are different. If anything is passive, it is the ball. It is the inert thing that is put in motion or stopped, whereas the players are active, moving to pitch, hit, or catch. The analogy with writing and reading is almost perfect. The thing that is written and read, like the ball, is the passive object common to the two activities that begin and terminate the process.\nWe can take this analogy a step further. The art of catching is the skill of catching every kind of pitch—fast balls and curves, changeups and knucklers. Similarly, the art of reading is the skill of catching every sort of communication as well as possible.\nIt is noteworthy that the pitcher and catcher are successful only to the extent that they cooperate. The relation of writer and reader is similar. The writer isn’t trying not to be caught, although it sometimes seems so. Successful communication occurs in any case where what the writer wanted to have received finds its way into the reader’s possession. The writer’s skill and the reader’s skill converge upon a common end.\nAdmittedly, writers vary, just as pitchers do. Some writers have excellent “control”; they know exactly what they want to convey, and they convey it precisely and accurately. Other things being equal, they are easier to “catch” than a “wild” writer without “control.”\nThere is one respect in which the analogy breaks down. The ball is a simple unit. It is either completely caught or not. A piece of writing, however, is a complex object. It can be received more or less completely, all the way from very little of what the writer intended to the whole of it. The amount the reader “catches” will usually depend on the amount of activity he puts into the process, as well as upon the skill with which he executes the different mental acts involved.\nWhat does active reading entail? We will return to this question many times in this book. For the moment, it suffices to say that, given the same thing to read, one person reads it better than another, first, by reading it more actively, and second, by performing each of the acts involved more skillfully. These two things are related. Reading is a complex activity, just as writing is. It consists of a large number of separate acts, all of which must be performed in a good reading. The person who can perform more of them is better able to read.\n◇The Goals of Reading: Reading for Information and Reading for Understanding # You have a mind. Now let us suppose that you also have a book that you want to read. The book consists of language written by someone for the sake of communicating something to you. Your success in reading it is determined by the extent to which you receive everything the writer intended to communicate.\nThat, of course, is too simple. The reason is that there are two possible relations between your mind and the book, not just one. These two relations are exemplified by two different experiences that you can have in reading your book.\nThere is the book; and here is your mind. As you go through the pages, either you understand perfectly everything the author has to say or you do not. If you do, you may have gained information, but you could not have increased your understanding. If the book is completely intelligible to you from start to finish, then the author and you are as two minds in the same mold. The symbols on the page merely express the common understanding you had before you met.\nLet us take our second alternative. You do not understand the book perfectly. Let us even assume—what unhappily is not always true—that you understand enough to know that you do not understand it all. You know the book has more to say than you understand and hence that it contains something that can increase your understanding.\nWhat do you do then? You can take the book to someone else who, you think, can read better than you, and have him explain the parts that trouble you. (“He” may be a living person or another book—a commentary or textbook.) Or you may decide that what is over your head is not worth bothering about, that you understand enough. In either case, you are not doing the job of reading that the book requires.\nThat is done in only one way. Without external help of any sort, you go to work on the book. With nothing but the power of your own mind, you operate on the symbols before you in such a way that you gradually lift yourself from a state of understanding less to one of understanding more. Such elevation, accomplished by the mind working on a book, is highly skilled reading, the kind of reading that a book which challenges your understanding deserves.\nThus we can roughly define what we mean by the art of reading as follows: the process whereby a mind, with nothing to operate on but the symbols of the readable matter, and with no help from outside, ☍ There is one kind of situation in which it is appropriate to ask for outside help in reading a difficult book. This exception is discussed in Chapter 18. elevates itself by the power of its own operations. The mind passes from understanding less to understanding more. The skilled operations that cause this to happen are the various acts that constitute the art of reading.\nTo pass from understanding less to understanding more by your own intellectual effort in reading is something like pulling yourself up by your bootstraps. It certainly feels that way. It is a major exertion. Obviously, it is a more active kind of reading than you have done before, entailing not only more varied activity but also much more skill in the performance of the various acts required. Obviously, too, the things that are usually regarded as more difficult to read, and hence as only for the better reader, are those that are more likely to deserve and demand this kind of reading.\nThe distinction between reading for information and reading for understanding is deeper than this. Let us try to say more about it. We will have to consider both goals of reading because the line between what is readable in one way and what must be read in the other is often hazy. To the extent that we can keep these two goals of reading distinct, we can employ the word “reading” in two distinct senses.\nThe first sense is the one in which we speak of ourselves as reading newspapers, magazines, or anything else that, according to our skill and talents, is at once thoroughly intelligible to us. Such things may increase our store of information, but they cannot improve our understanding, for our understanding was equal to them before we started. Otherwise, we would have felt the shock of puzzlement and perplexity that comes from getting in over our depth—that is, if we were both alert and honest.\nThe second sense is the one in which a person tries to read something that at first he does not completely understand. Here the thing to be read is initially better or higher than the reader. The writer is communicating something that can increase the reader’s understanding. Such communication between unequals must be possible, or else one person could never learn from another, either through speech or writing. Here by “learning” is meant understanding more, not remembering more information that has the same degree of intelligibility as other information you already possess.\nThere is clearly no difficulty of an intellectual sort about gaining new information in the course of reading if the new facts are of the same sort as those you already know. A person who knows some of the facts of American history and understands them in a certain light can readily acquire by reading, in the first sense, more such facts and understand them in the same light. But suppose he is reading a history that seeks not merely to give him some more facts but also to throw a new and perhaps more revealing light on all the facts he knows. Suppose there is greater understanding available here than he possessed before he started to read. If he can manage to acquire that greater understanding, he is reading in the second sense. He has indeed elevated himself by his activity, though indirectly, of course, the elevation was made possible by the writer who had something to teach him.\nWhat are the conditions under which this kind of reading—reading for understanding—takes place? There are two. First, there is initial inequality in understanding. The writer must be “superior” to the reader in understanding, and his book must convey in readable form the insights he possesses and his potential readers lack. Second, the reader must be able to overcome this inequality in some degree, seldom perhaps fully, but always approaching equality with the writer. To the extent that equality is approached, clarity of communication is achieved.\nIn short, we can learn only from our “betters.” We must know who they are and how to learn from them. The person who has this sort of knowledge possesses the art of reading in the sense with which we are especially concerned in this book. Everyone who can read at all probably has some ability to read in this way. But all of us, without exception, can learn to read better and gradually gain more by our efforts through applying them to more rewarding materials.\nWe do not want to give the impression that facts, leading to increased information, and insights, leading to increased understanding, are always easy to distinguish. And we would admit that sometimes a mere recital of facts can itself lead to greater understanding. The point we want to emphasize here is that this book is about the art of reading for the sake of increased understanding. Fortunately, if you learn to do that, reading for information will usually take care of itself.\nOf course, there is still another goal of reading, besides gaining information and understanding, and that is entertainment. However, this book will not be much concerned with reading for entertainment. It is the least demanding kind of reading, and it requires the least amount of effort. Furthermore, there are no rules for it. Everyone who knows how to read at all can read for entertainment if he wants to.\nIn fact, any book that can be read for understanding or information can probably be read for entertainment as well, just as a book that is capable of increasing our understanding can also be read purely for the information it contains. (This proposition cannot be reversed: it is not true that every book that can be read for entertainment can also be read for understanding.) Nor do we wish to urge you never to read a good book for entertainment. The point is, if you wish to read a good book for understanding, we believe we can help you. Our subject, then, is the art of reading good books when understanding is the aim you have in view.\n◇Reading as Learning: The Difference Between Learning by Instruction and Learning by Discovery # Getting more information is learning, and so is coming to understand what you did not understand before. But there is an important difference between these two kinds of learning.\nTo be informed is to know simply that something is the case. To be enlightened is to know, in addition, what it is all about: why it is the case, what its connections are with other facts, in what respects it is the same, in what respects it is different, and so forth.\nThis distinction is familiar in terms of the differences between being able to remember something and being able to explain it. If you remember what an author says, you have learned something from reading him. If what he says is true, you have even learned something about the world. But whether it is a fact about the book or a fact about the world that you have learned, you have gained nothing but information if you have exercised only your memory. You have not been enlightened. Enlightenment is achieved only when, in addition to knowing what an author says, you know what he means and why he says it.\nIt is true, of course, that you should be able to remember what the author said as well as know what he meant. Being informed is prerequisite to being enlightened. The point, however, is not to stop at being informed.\nMontaigne speaks of \u0026ldquo;an abecedarian ignorance that precedes knowledge, and a doctoral ignorance that comes after it.\u0026rdquo; The first is the ignorance of those who, not knowing their ABC’s, cannot read at all. The second is the ignorance of those who have misread many books. They are, as Alexander Pope rightly calls them, bookful blockheads, ignorantly read. There have always been literate ignoramuses who have read too widely and not well. The Greeks had a name for such a mixture of learning and folly which might be applied to the bookish but poorly read of all ages. They are all sophomores.\nTo avoid this error—the error of assuming that to be widely read and to be well-read are the same thing—we must consider a certain distinction in types of learning. This distinction has a significant bearing on the whole business of reading and its relation to education generally.\nIn the history of education, men have often distinguished between learning by instruction and learning by discovery. Instruction occurs when one person teaches another through speech or writing. We can, however, gain knowledge without being taught. If this were not the case, and every teacher had to be taught what he in turn teaches others, there would be no beginning in the acquisition of knowledge. Hence, there must be discovery—the process of learning something by research, by investigation, or by reflection, without being taught.\nDiscovery stands to instruction as learning without a teacher stands to learning through the help of one. In both cases, the activity of learning goes on in the one who learns. It would be a mistake to suppose that discovery is active learning and instruction passive. There is no inactive learning, just as there is no inactive reading.\nThis is so true, in fact, that a better way to make the distinction clear is to call instruction “aided discovery.” Without going into learning theory as psychologists conceive it, it is obvious that teaching is a very special art, sharing with only two other arts-agriculture and medicine—an exceptionally important characteristic. A doctor may do many things for his patient, but in the final analysis it is the patient himself who must get well—grow in health. The fanner does many things for his plants or animals, but in the final analysis it is they that must grow in size and excellence. Similarly, although the teacher may help his student in many ways, it is the student himself who must do the learning. Knowledge must grow in his mind if learning is to take place.\nThe difference between learning by instruction and learning by discovery—or, as we would prefer to say, between aided and unaided discovery—is primarily a difference in the materials on which the learner works. When he is being instructed—discovering with the help of a teacher—the learner acts on something communicated to him. He performs operations on discourse, written or oral. He learns by acts of reading or listening. Note here the close relation between reading and listening. If we ignore the minor differences between these two ways of receiving communication, we can say that reading and listening are the same art—the art of being taught. When, however, the learner proceeds without the help of any sort of teacher, the operations of learning are performed on nature or the world rather than on discourse. The rules of such learning constitute the art of unaided discovery. If we use the word \u0026ldquo;reading\u0026rdquo; loosely, we can say that discovery—strictly, unaided discovery—is the art of reading nature or the world, as instruction (being taught, or aided discovery) is the art of reading books or, to include listening, of learning from discourse.\nWhat about thinking? If by “thinking” we mean the use of our minds to gain knowledge or understanding, and if learning by discovery and learning by instruction exhaust the ways of gaining knowledge, then thinking must take place during both of these two activities. We must think in the course of reading and listening, just as we must think in the course of research. Naturally, the kinds of thinking are different—as different as the two ways of learning are.\nThe reason why many people regard thinking as more closely associated with research and unaided discovery than with being taught is that they suppose reading and listening to be relatively effortless. It is probably true that one does less thinking when one reads for information or entertainment than when one is undertaking to discover something. Those are the less active sorts of reading. But it is not true of the more active reading—the effort to understand. No one who has done this sort of reading would say it can be done thoughtlessly.\nThinking is only one part of the activity of learning. One must also use one’s senses and imagination. One must observe, and remember, and construct imaginatively what cannot be observed. There is, again, a tendency to stress the role of these activities in the process of unaided discovery and to forget or minimize their place in the process of being taught through reading or listening. For example, many people assume that though a poet must use his imagination in writing a poem, they do not have to use their imagination in reading it. The art of reading, in short, includes all of the same skills that are involved in the art of unaided discovery: keenness of observation, readily available memory, range of imagination, and, of course, an intellect trained in analysis and reflection. The reason for this is that reading in this sense is discovery, too—although with help instead of without it.\n◇Present and Absent Teachers # We have been proceeding as if reading and listening could both be treated as learning from teachers. To some extent that is true. Both are ways of being instructed, and for both one must be skilled in the art of being taught. Listening to a course of lectures, for example, is in many respects like reading a book; and listening to a poem is like reading it. Many of the rules to be formulated in this book apply to such experiences. Yet there is good reason to place primary emphasis on reading, and let listening become a secondary concern. The reason is that listening is learning from a teacher who is present—a living teacher—while reading is learning from one who is absent.\nIf you ask a living teacher a question, he will probably answer you. If you are puzzled by what he says, you can save yourself the trouble of thinking by asking him what he means. If, however, you ask a book a question, you must answer it yourself. In this respect a book is like nature or the world. When you question it, it answers you only to the extent that you do the work of thinking and analysis yourself.\nThis does not mean, of course, that if the living teacher answers your question, you have no further work. That is so only if the question is simply one of fact. But if you are seeking an explanation, you have to understand it or nothing has been explained to you. Nevertheless, with the living teacher available to you, you are given a lift in the direction of understanding him, as you are not when the teacher’s words in a book are all you have to go by.\nStudents in school often read difficult books with the help and guidance of teachers. But for those of us who are not in school, and indeed also for those of us who are when we try to read books that are not required or assigned, our continuing education depends mainly on books alone, read without a teachers help. Therefore if we are disposed to go on learning and discovering, we must know how to make books teach us well. That, indeed, is the primary goal of this book.\n★2 THE LEVELS OF READING # In the preceding chapter, we made some distinctions that will be important in what follows. The goal a reader seeks—be it entertainment, information or understanding—determines the way he reads. The effectiveness with which he reads is determined by the amount of effort and skill he puts into his reading. In general, the rule is: the more effort the better, at least in the case of books that are initially beyond our powers as readers and are therefore capable of raising us from a condition of understanding less to one of understanding more. Finally, the distinction between instruction and discovery (or between aided and unaided discovery) is important because most of us, most of the time, have to read without anyone to help us. Reading, like unaided discovery, is learning from an absent teacher. We can only do that successfully if we know how.\nBut important as these distinctions are, they are relatively insignificant compared to the points we are going to make in this chapter. These all have to do with the levels of reading. The differences between the levels must be understood before any effective improvement in reading skills can occur.\nThere are four levels of reading. They are here called levels rather than kinds because kinds, strictly speaking, are distinct from one another, whereas it is characteristic of levels that higher ones include lower ones. So it is with the levels of reading, which are cumulative. The first level is not lost in the second, the second in the third, the third in the fourth. In fact, the fourth and highest level of reading includes all the others. It simply goes beyond them.\nThe first level of reading we will call Elementary Reading. Other names might be rudimentary reading, basic reading or initial reading; any one of these terms serves to suggest that as one masters this level one passes from nonliteracy to at least beginning literacy. In mastering this level, one learns the rudiments of the art of reading, receives basic training in reading, and acquires initial reading skills. We prefer the name elementary reading, however, because this level of reading is ordinarily learned in elementary school.\nThe child’s first encounter with reading is at this level. His problem then (and ours when we began to read) is to recognize the individual words on the page. The child sees a collection of black marks on a white ground (or perhaps white marks on a black ground, if he is reading from a blackboard); what the marks say is, “The cat sat on the hat.” The first grader is not really concerned at this point with whether cats do sit on hats, or with what this implies about cats, hats, and the world. He is merely concerned with language as it is employed by the writer.\nAt this level of reading, the question asked of the reader is “What does the sentence say?” That could be conceived as a complex and difficult question, of course. We mean it here, however, in its simplest sense.\nThe attainment of the skills of elementary reading occurred some time ago for almost all who read this book. Nevertheless, we continue to experience the problems of this level of reading, no matter how capable we may be as readers. This happens, for example, whenever we come upon something we want to read that is written in a foreign language that we do not know very well. Then our first effort must be to identify the actual words. Only after recognizing them individually can we begin to try to understand them, to struggle with perceiving what they mean.\nEven when they are reading material written in their own language, many readers continue to have various kinds of difficulties at this level of reading. Most of these difficulties are mechanical, and some of them can be traced back to early instruction in reading. Overcoming these difficulties usually allows us to read faster; hence, most speed reading courses concentrate on this level. We will have more to say about elementary reading in the next chapter; and in Chapter 4, we will discuss speed reading.\nThe second level of reading we will call Inspectional Reading. It is characterized by its special emphasis on time. When reading at this level, the student is allowed a set time to complete an assigned amount of reading. He might be allowed fifteen minutes to read this book, for instance—or even a book twice as long.\nHence, another way to describe this level of reading is to say that its aim is to get the most out of a book within a given time—usually a relatively short time, and always (by definition) too short a time to get out of the book everything that can be gotten.\nStill another name for this level might be skimming or pre-reading. However, we do not mean the kind of skimming that is characterized by casual or random browsing through a book. Inspectional reading is the art of skimming systematically.\nWhen reading at this level, your aim is to examine the surface of the book, to learn everything that the surface alone can teach you. That is often a good deal.\nWhereas the question that is asked at the first level is “What does the sentence say?” the question typically asked at this level is “What is the book about?” That is a surface question; others of a similar nature are “What is the structure of the book?” or “What are its parts?”\nUpon completing an inspectional reading of a book, no matter how short the time you had to do it in, you should also be able to answer the question, “What kind of book is it—a novel, a history, a scientific treatise?”\nChapter 4 is devoted to an account of this level of reading, so we will not discuss it further here. We do want to stress, however, that most people, even many quite good readers, are unaware of the value of inspectional reading. They start a book on page one and plow steadily through it, without even reading the table of contents. They are thus faced with the task of achieving a superficial knowledge of the book at the same time that they are trying to understand it. That compounds the difficulty.\nThe third level of reading we will call Analytical Reading. It is both a more complex and a more systematic activity than either of the two levels of reading discussed so far. Depending on the difficulty of the text to be read, it makes more or less heavy demands on the reader.\nAnalytical reading is thorough reading, complete reading, or good reading—the best reading you can do. If inspectional reading is the best and most complete reading that is possible given a limited time, then analytical reading is the best and most complete reading that is possible given unlimited time.\nThe analytical reader must ask many, and organized, questions of what he is reading. We do not want to state these questions here, since this book is mainly about reading at this level: Part Two gives its rules and tells you how to do it. We do want to emphasize here that analytical reading is always intensely active. On this level of reading, the reader grasps a book—the metaphor is apt—and works at it until the book becomes his own. Francis Bacon once remarked that “some books are to be tasted, others to be swallowed, and some few to be chewed and digested.” Reading a book analytically is chewing and digesting it.\nWe also want to stress that analytical reading is hardly ever necessary if your goal in reading is simply information or entertainment. Analytical reading is preeminently for the sake of understanding. Conversely, bringing your mind with the aid of a book from a condition of understanding less to one of understanding more is almost impossible unless you have at least some skill in analytical reading.\nThe fourth and highest level of reading we will call Syntopical Reading. It is the most complex and systematic type of reading of all. It makes very heavy demands on the reader, even if the materials he is reading are themselves relatively easy and unsophisticated.\nAnother name for this level might be comparative reading. When reading syntopically, the reader reads many books, not just one, and places them in relation to one another and to a subject about which they all revolve. But mere comparison of texts is not enough. Syntopical reading involves more. With the help of the books read, the syntopical reader is able to construct an analysis of the subject that may not be in any of the books. It is obvious, therefore, that syntopical reading is the most active and effortful kind of reading.\nWe will discuss syntopical reading in Part Four. Let it suffice for the moment to say that syntopical reading is not an easy art, and that the rules for it are not widely known. Nevertheless, syntopical reading is probably the most rewarding of all reading activities. The benefits are so great that it is well worth the trouble of learning how to do it.\n★3 THE FIRST LEVEL OF READING: ELEMENTARY READING # Ours is a time of great interest in and concern about reading. Public officials have declared that the 1970’s will be “the decade of reading.” Best-selling books tell us why Johnny can or can’t read. Research and experimentation in all fields of initial reading instruction proceed at an ever-increasing pace.\nThree historical trends or movements have converged upon our time to produce this ferment. The first is the continuing effort of the United States to educate all of its citizens, which means, of course, at a minimum, to make them all literate. This effort, which Americans have supported almost from the beginning of the national existence and which is one of the cornerstones of our democratic way of life, has had remarkable results. Near-universal literacy was obtained in the United States earlier than anywhere else, and this in turn has helped us to become the highly developed industrial society that we are at the present day. But there have been enormous problems, too. They can be summed up in the observation that teaching a small percentage of highly motivated children, most of them the children of literate parents, to read—as was the case a century ago—is a far cry from teaching every child to read, no matter how little motivated he may be, or how deprived his background.\nThe second historical trend is in the teaching of reading itself. As late as 1870, reading instruction was little changed from what it had been in Greek and Roman schools. In America, at least, the so-called ABC method was dominant throughout most of the nineteenth century. Children were taught to sound out the letters of the alphabet individually—hence the name of this method—and to combine them in syllables, first two letters at a time and then three and four, whether the syllables so constructed were meaningful or not. Thus, syllables such as ab, ac, ad, ib, ic were practiced for the sake of mastery of the language. When a child could name all of a determined number of combinations, he was said to know his ABC’s.\nThis synthetic method of teaching reading came under heavy criticism around the middle of the last century, and two alternatives to it were proposed. One was a variant on the synthetic ABC method, known as the phonic method. Here the word was recognized by its sounds rather than by its letter-names. Complicated and ingenious systems of printing were evolved for the purpose of representing the different sounds made by a single letter, especially the vowels. If you are fifty or over, it is probable that you learned to read using some variant of the phonic method.\nA wholly different approach, analytical rather than synthetic, originated in Germany and was advocated by Horace Mann and other educators after about 1840. This involved teaching the visual recognition of whole words before giving any attention to letter-names or letter-sounds. This so-called sight method was later extended so that whole sentences, representing units of thought, were introduced first, with the pupils only later learning to recognize the constituent words and then, finally, the constituent letters. This method was especially popular during the 1920’s and 30’s, which period was also characterized by the shift in emphasis from oral reading to silent reading. It was found that ability to read orally did not necessarily mean ability to read silently and that instruction in oral reading was not always adequate if silent reading was the goal. Thus, an almost exclusive emphasis on rapid, comprehensive silent reading was a feature of the years from about 1920 to 1925. More recently, however, the pendulum has swung back again toward phonics, which indeed had never entirely left the curriculum.\nAll of these different methods of teaching elementary reading were successful for some pupils, unsuccessful for others. In the last two or three decades, it has perhaps been the failures that have attracted the most attention. And here the third historical trend comes into play. It is traditional in America to criticize the schools; for more than a century, parents, self-styled experts, and educators themselves have attacked and indicted the educational system. No aspect of schooling has been more severely criticized than reading instruction. The current books have a long ancestry, and every innovation carries in its train a posse of suspicious and, one feels, unpersuadable observers.\nThe critics may or may not be right, but in any event the problems have taken on a new urgency as the continuing effort to educate all citizens has entered a new phase, resulting in ever-growing high school and college populations. A young man or woman who cannot read very well is hindered in his pursuit of the American dream, but that remains largely a personal matter if he is not in school. If he remains in school or goes to college, however, it is a matter of concern for his teachers as well, and for his fellow students.\nHence, researchers are very active at the present time, and their work has resulted in numerous new approaches to reading instruction. Among the more important new programs are the so-called eclectic approach, the individualized reading approach, the language-experience approach, the various approaches based on linguistic principles, and others based more or less closely on some kind of programmed instruction. In addition, new mediums such as the Initial Teaching Alphabet (i.t.a.) have been employed, and sometimes these involve new methods as well. Still other devices and programs are the \u0026ldquo;total immersion method,\u0026rdquo; the \u0026ldquo;foreign-language-school method,\u0026rdquo; and the method known variously as the \u0026ldquo;see-say,\u0026rdquo; \u0026ldquo;look-say,\u0026rdquo; \u0026ldquo;look-and-say,\u0026rdquo; or \u0026ldquo;word method.\u0026rdquo; Doubtless experiments are now being undertaken in methods and approaches that differ from all of these. It is perhaps too early to tell whether any of these is the long-sought panacea for all reading ills.\n◇Stages of Learning to Read # One useful finding of recent research is the analysis of stages in learning to read. It is now widely accepted that there are at least four more or less clearly distinguishable stages in the child’s progress toward what is called mature reading ability. The first stage is known by the term \u0026ldquo;reading readiness.\u0026rdquo; This begins, it has been pointed out, at birth, and continues normally until the age of about six or seven.\nReading readiness includes several different kinds of preparation for learning to read. Physical readiness involves good vision and hearing. Intellectual readiness involves a minimum level of visual perception such that the child can take in and remember an entire word and the letters that combine to form it Language readiness involves the ability to speak clearly and to use several sentences in correct order. Personal readiness involves the ability to work with other children, to sustain attention, to follow directions, and the like.\nGeneral reading readiness is assessed by tests and is also estimated by teachers who are often skillful at discerning just when a pupil is ready to learn to read. The important thing to remember is that jumping the gun is usually self-defeating. The child who is not yet ready to read is frustrated if attempts are made to teach him, and he may carry over his dislike for the experience into his later school career and even into adult life. Delaying the beginning of reading instruction beyond the reading readiness stage is not nearly so serious, despite the feelings of parents who may fear that their child is \u0026ldquo;backward\u0026rdquo; or is not \u0026ldquo;keeping up\u0026rdquo; with his peers.\nIn the second stage, children learn to read very simple materials. They usually begin, at least in the United States, by learning a few sight words, and typically manage to master perhaps three hundred to four hundred words by the end of the first year. Basic skills are introduced at this time, such as the use of context or meaning clues and the beginning sounds of words. By the end of this period pupils are expected to be reading simple books independently and with enthusiasm.\nIt is incidentally worth observing that something quite mysterious, almost magical, occurs during this stage. At one moment in the course of his development the child, when faced with a series of symbols on a page, finds them quite meaningless. Not much later—perhaps only two or three weeks later—he has discovered meaning in them; he knows that they say \u0026ldquo;The cat sat on the hat.\u0026rdquo; How this happens no one really knows, despite the efforts of philosophers and psychologists over two and a half millennia to study the phenomenon. Where does meaning come from? How is it that a French child would find the same meaning in the symbols \u0026ldquo;Le chat s’asseyait sur le chapeau\u0026rdquo;? Indeed, this discovery of meaning in symbols may be the most astounding intellectual feat that any human being ever performs—and most humans perform it before they are seven years old!\nThe third stage is characterized by rapid progress in vocabulary building and by increasing skill in \u0026ldquo;unlocking\u0026rdquo; the meaning of unfamiliar words through context clues. In addition, children at this stage learn to read for different purposes and in different areas of content, such as science, social studies, language arts, and the like. They learn that reading, besides being something one does at school, is also something one can do on one’s own, for fun, to satisfy curiosity, or even to \u0026ldquo;expand one’s horizons.\u0026rdquo;\nFinally, the fourth stage is characterized by the refinement and enhancement of the skills previously acquired. Above all, the student begins to be able to assimilate his reading experiences—that is, to carry over concepts from one piece of writing to another, and to compare the views of different writers on the same subject. This, the mature stage of reading, should be reached by young persons in their early teens. Ideally, they should continue to build on it for the rest of their lives.\nThat they often do not even reach it is apparent to many parents and to most educators. The reasons for the failure are many, ranging all the way from various kinds of deprivations in the home environment—economic, social, and/or intellectual (including parental illiteracy)—to personal problems of all kinds (including total revolt against \u0026ldquo;the system\u0026rdquo;). But one cause of the failure is not often noted. The very emphasis on reading readiness and on the methods employed to teach children the rudiments of reading has meant that the other, the higher, levels of reading have tended to be slighted. This is quite understandable, considering the urgency and extent of the problems found on this first level. Nevertheless, effective remedies for the overall reading deficiencies of Americans cannot be found unless efforts are made on all levels of reading.\n◇Stages and Levels # We have described four levels of reading, and we have also outlined four stages of learning to read in an elementary fashion. What is the relation between these stages and levels?\nIt is of paramount importance to recognize that the four stages outlined here are all stages of the first level of reading, as outlined in the previous chapter. They are stages, that is, of elementary reading, which thus can be usefully divided somewhat in the manner of the elementary school curriculum. The first stage of elementary reading—reading readiness—corresponds to pre-school and kindergarten experiences. The second stage—word mastery—corresponds to the first grade experience of the typical child (although many quite normal children are not \u0026ldquo;typical\u0026rdquo; in this sense), with the result that the child attains what we can call second-stage reading skills, or first grade ability in reading or first grade literacy. The third stage of elementary reading—vocabulary growth and the utilization of context—is typically (but not universally, even for normal children) acquired at about the end of the fourth grade of elementary school, and results in what is variously called fourth grade, or functional, literacy—the ability, according to one common definition, to read traffic signs or picture captions fairly easily, to fill out the simpler government forms, and the like. The fourth and final stage of elementary reading is attained at about the time the pupil leaves or graduates from elementary school or junior high school. It is sometimes called eighth grade, ninth grade, or tenth grade literacy. The child is a \u0026ldquo;mature\u0026rdquo; reader in the sense that he is now capable of reading almost anything, but still in a relatively unsophisticated manner. In the simplest terms, he is mature enough to do high school work.\nHowever, he is not yet a \u0026ldquo;mature\u0026rdquo; reader in the sense in which we want to employ the term in this book. He has mastered the first level of reading, that is all; he can read on his own and is prepared to learn more about reading. But he does not yet know how to read beyond the elementary level.\nWe mention all this because it is highly germane to the message of this book. We assume—we must assume—that you, our reader, have attained ninth grade literacy, that you have mastered the elementary level of reading, which means that you have passed successfully through the four stages described. If you think about it, you realize that we could not assume less. No one can learn from a how-to-do-it book until he can read it; and it is particularly true of a book purporting to teach one to read that its readers must be able to read in some sense of the term.\nThe difference between aided and unaided discovery comes into play here. Typically, the four stages of elementary reading are attained with the help of living teachers. Children differ in their abilities, of course; some need more help than others. But a teacher is usually present to answer questions and smooth over difficulties that arise during the elementary school years. Only when he has mastered all of the four stages of elementary reading is the child prepared to move on to the higher levels of reading. Only then can he read independently and learn on his own. Only then can he begin to become a really good reader.\n◇Higher Levels of Reading and Higher Education # Traditionally, the high schools of America have provided little reading instruction for their students, and the colleges have provided none. That situation has changed in recent years. Two generations ago, when high school enrollments increased greatly within a relatively short period, educators began to realize that it could no longer be assumed that entering students could read effectively. Remedial reading instruction was therefore provided, sometimes for as many as 75% or more students. Within the last decade, the same situation has occurred at the college level. Thus, of approximately 40,000 freshmen entering the City University of New York in the fall of 1971, upwards of half, or more than 20,000 young people, had to be given some kind of remedial training in reading.\nThat does not mean, however, that reading instruction beyond the elementary level is offered in many U.S. colleges to this day. In fact, it is offered in almost none of them. Remedial reading instruction is not instruction in the higher levels of reading. It serves only to bring students up to a level of maturity in reading that they should have attained by the time they graduated from elementary school. To this day, most institutions of higher learning either do not know how to instruct students in reading beyond the elementary level, or lack the facilities and personnel to do so.\nWe say this despite the fact that a number of four-year and community colleges have recently instituted courses in speed reading, or in \u0026ldquo;effective\u0026rdquo; reading, or \u0026ldquo;competence\u0026rdquo; in reading. On the whole (though there are exceptions), these courses are remedial. They are designed to overcome various kinds of failures of the lower schools. They are not designed to take the student beyond the first level or to introduce him to the kinds and levels of reading that are the main subject of this book.\nThis, of course, should not be the case. A good liberal arts high school, if it does nothing else, ought to produce graduates who are competent analytical readers. A good college, if it does nothing else, ought to produce competent syntopical readers. A college degree ought to represent general competence in reading such that a graduate could read any kind of material for general readers and be able to undertake independent research on almost any subject (for that is what syntopical reading, among other things, enables you to do). Often, however, three or four years of graduate study are required before students attain this level of reading ability, and they do not always attain it even then.\nOne should not have to spend four years in graduate school in order to learn how to read. Four years of graduate school, in addition to twelve years of preparatory education and four years of college—that adds up to twenty full years of schooling. It should not take that long to learn to read. Something is very wrong if it does.\nWhat is wrong can be corrected. Courses could be instituted in many high schools and colleges that are based on the program described in this book. There is nothing arcane or even really new about what we have to propose. It is largely common sense.\n◇Reading and the Democratic Ideal of Education # We do not want to seem to be mere carping critics. We know that the thunder of thousands of freshmen feet upon the stairs makes it hard to hear, no matter how reasonable the message. And as long as a large proportion, even a majority, of these new students cannot read effectively at the elementary level, we are aware that the first task to be faced must be to teach them to read in the lowest, the largest common-denominator, sense of the term.\nNor, for the moment, would we want it any other way. We are on record as holding that unlimited educational opportunity—or, speaking practically, educational opportunity that is limited only by individual desire, ability, and need—is the most valuable service that society can provide for its members. That we do not yet know how to provide that kind of opportunity is no reason to give up the attempt.\nBut we must also realize—students, teachers, and laymen alike—that even when we have accomplished the task that lies before us, we will not have accomplished the whole task. We must be more than a nation of functional literates. We must become a nation of truly competent readers, recognizing all that the word competent implies. Nothing less will satisfy the needs of the world that is coming.\n★4 THE SECOND LEVEL OF READING: INSPECTIONAL READING # Inspectional reading is a true level of reading. It is quite distinct from the level that precedes it (elementary reading) and from the one that follows it in natural sequence (analytical reading). But, as we noted in Chapter 2, the levels of reading are cumulative. Thus, elementary reading is contained in inspectional reading, as, indeed, inspectional reading is contained in analytical reading, and analytical reading in syntopical reading.\nPractically, this means that you cannot read on the inspectional level unless you can read effectively on the elementary level. You must be able to read an author’s text more or less steadily, without having to stop to look up the meaning of many words, and without stumbling over the grammar and syntax. You must be able to make sense of a majority of the sentences and paragraphs, although not necessarily the best sense of all of them.\nWhat, then, is involved in inspectional reading? How do you go about doing it?\nThe first thing to realize is that there are two types of inspectional reading. They are aspects of a single skill, but the beginning reader is well-advised to consider them as two different steps or activities. The experienced reader learns to perform both steps simultaneously, but for the moment we will treat them as if they were quite distinct.\n◇Inspectional Reading I: Systematic Skimming or Pre-reading # Let us return to the basic situation to which we have referred before. There is a book or other reading matter, and here is your mind. What is the first thing that you do?\nLet us assume two further elements in the situation, elements that are quite common. First, you do not know whether you want to read the book. You do not know whether it deserves an analytical reading. But you suspect that it does, or at least that it contains both information and insights that would be valuable to you if you could dig them out.\nSecond, let us assume—and this is very often the case—that you have only a limited time in which to find all this out.\nIn this case, what you must do is skim the book, or, as some prefer to say, pre-read it. Skimming or pre-reading is the first sublevel of inspectional reading. Your main aim is to discover whether the book requires a more careful reading. Secondly, skimming can tell you lots of other things about the book, even if you decide not to read it again with more care.\nGiving a book this kind of quick once-over is a threshing process that helps you to separate the chaff from the real kernels of nourishment. You may discover that what you get from skimming is all the book is worth to you for the time being. It may never be worth more. But you will know at least what the author’s main contention is, as well as what kind of book he has written, so the time you have spent looking through the book will not have been wasted.\nThe habit of skimming should not take much time to acquire. Here are some suggestions about how to do it.\n1. LOOK AT THE TITLE PAGE AND, IF THE BOOK HAS ONE, AT ITS PREFACE. Read each quickly. Note especially the subtitles or other indications of the scope or aim of the book or of the author’s special angle on his subject. Before completing this step you should have a good idea of the subject, and, if you wish, you may pause for a moment to place the book in the appropriate category in your mind. What pigeonhole that already contains other books does this one belong in?\n2. STUDY THE TABLE OF CONTENTS to obtain a general sense of the book’s structure; use it as you would a road map before taking a trip. It is astonishing how many people never even glance at a book’s table of contents unless they wish to look something up in it. In fact, many authors spend a considerable amount of time in creating the table of contents, and it is sad to think their efforts are often wasted.\nIt used to be a common practice, especially in expository works, but sometimes even in novels and poems, to write very full tables of contents, with the chapters or parts broken down into many subtitles indicative of the topics covered. Milton, for example, wrote more or less lengthy headings, or \u0026ldquo;Arguments,\u0026rdquo; as he called them, for each book of Paradise Lost. Gibbon published his Decline and Fall of the Roman Empire with an extensive analytical table of contents for each chapter. Such summaries are no longer common, although occasionally you do still come across an analytical table of contents. One reason for the decline of the practice may be that people are not so likely to read tables of contents as they once were. Also, publishers have come to feel that a less revealing table of contents is more seductive than a completely frank and open one. Readers, they feel, will be attracted to a book with more or less mysterious chapter titles—they will want to read the book to find out what the chapters are about. Even so, a table of contents can be valuable, and you should read it carefully before going on to the rest of the book.\nAt this point, you might turn back to the table of contents of this book, if you have not already read it. We tried to make it as full and informative as we could. Examining it should give you a good idea of what we are trying to do.\n3. CHECK THE INDEX if the book has one—most expository works do. Make a quick estimate of the range of topics covered and of the kinds of books and authors referred to. When you see terms listed that seem crucial, look up at least some of the passages cited. (We will have much more to say about crucial terms in Part Two. Here you must make your judgment of their importance on the basis of your general sense of the book, as obtained from steps 1 and 2.) The passages you read may contain the crux—the point on which the book hinges—or the new departure which is the key to the author’s approach and attitude.\nAs in the case of the table of contents, you might at this point check the index of this book. You will recognize as crucial some terms that have already been discussed. Can you identify, for example, by the number of references under them, any others that also seem important?\n4. If the book is a new one with a dust jacket, READ THE PUBLISHER’S BLURB. Some people have the impression that the blurb is never anything but sheer puffery. But this is quite often not true, especially in the case of expository works. The blurbs of many of these books are written by the authors themselves, admittedly with the help of the publisher’s public relations department. It is not uncommon for authors to try to summarize as accurately as they can the main points in their book. These efforts should not go unnoticed. Of course, if the blurb is nothing but a puff for the book, you will ordinarily be able to discover this at a glance. But that in itself can tell you something about the work. Perhaps the book does not say anything of importance—and that is why the blurb does not say anything, either.\nUpon completing these first four steps you may already have enough information about the book to know that you want to read it more carefully, or that you do not want or need to read it at all. In either case, you may put it aside for the moment. If you do not do so, you are now ready to skim the book, properly speaking.\n5. From your general and still rather vague knowledge of the book’s contents, LOOK NOW AT THE CHAPTERS THAT SEEM TO BE PIVOTAL TO ITS ARGUMENT. If these chapters have summary statements in their opening or closing pages, as they often do, read these statements carefully.\n6. Finally, TURN THE PAGES, DIPPING IN HERE AND THERE, READING A PARAGRAPH OR TWO, SOMETIMES SEVERAL PAGES IN SEQUENCE, NEVER MORE THAN THAT. Thumb through the book in this way, always looking for signs of the main contention, listening for the basic pulsebeat of the matter. Above all, do not fail to read the last two or three pages, or, if these are an epilogue, the last few pages of the main part of the book. Few authors are able to resist the temptation to sum up what they think is new and important about their work in these pages. You do not want to miss this, even though, as sometimes happens, the author himself may be wrong in his judgment.\nYou have now skimmed the book systematically; you have given it the first type of inspectional reading. You should know a good deal about the book at this point, after having spent no more than a few minutes, at most an hour, with it. In particular, you should know whether the book contains matter that you still want to dig out, or whether it deserves no more of your time and attention. You should also be able to place the book even more accurately than before in your mental card catalogue, for further reference if the occasion should ever arise.\nIncidentally, this is a very active sort of reading. It is impossible to give any book an inspectional reading without being alert, without having all of one’s faculties awake and working. How many times have you daydreamed through several pages of a good book only to wake up to the realization that you have no idea of the ground you have gone over? That cannot happen if you follow the steps outlined here—that is, if you have a system for following a general thread.\nThink of yourself as a detective looking for clues to a book’s general theme or idea, alert for anything that will make it clearer. Heeding the suggestions we have made will help you sustain this attitude. You will be surprised to find out how much time you will save, pleased to see how much more you will grasp, and relieved to discover how much easier it all can be than you supposed.\n◇Inspectional Reading II: Superficial Reading # The title of this section is intentionally provocative. The word \u0026ldquo;superficial\u0026rdquo; ordinarily has a negative connotation. We are quite serious, however, in using the term.\nEveryone has had the experience of struggling fruitlessly with a difficult book that was begun with high hopes of enlightenment. It is natural enough to conclude that it was a mistake to try to read it in the first place. But that was not the mistake. Rather it was in expecting too much from the first going over of a difficult book. Approached in the right way, no book intended for the general reader, no matter how difficult, need be a cause for despair.\nWhat is the right approach? The answer lies in an important and helpful rule of reading that is generally overlooked. That rule is simply this: In tackling a difficult book for the first time, read it through without ever stopping to look up or ponder the things you do not understand right away.\nPay attention to what you can understand and do not be stopped by what you cannot immediately grasp. Go right on reading past the point where you have difficulties in understanding, and you will soon come to things you do understand. Concentrate on these. Keep on in this way. Read the book through, undeterred and undismayed by the paragraphs, footnotes, comments, and references that escape you. If you let yourself get stalled, if you allow yourself to be tripped up by any one of these stumbling blocks, you are lost. In most cases, you will not be able to puzzle the thing out by sticking to it. You will have a much better chance of understanding it on a second reading, but that requires you to have read the book through at least once.\nWhat you understand by reading the book through to the end—even if it is only fifty percent or less—will help you when you make the additional effort later to go back to the places you passed by on your first reading. And even if you never go back, understanding half of a really tough book is much better than not understanding it at all, which will be the case if you allow yourself to be stopped by the first difficult passage you come to.\nMost of us were taught to pay attention to the things we did not understand. We were told to go to a dictionary when we met an unfamiliar word. We were told to go to an encyclopedia or some other reference work when we were confronted with allusions or statements we did not comprehend. We were told to consult footnotes, scholarly commentaries, or other secondary sources to get help. But when these things are done prematurely, they only impede our reading, instead of helping it.\nThe tremendous pleasure that can come from reading Shakespeare, for instance, was spoiled for generations of high school students who were forced to go through Julius Caesar, As You Like It, or Hamlet, scene by scene, looking up all the strange words in a glossary and studying all the scholarly footnotes. As a result, they never really read a Shakespearean play. By the time they reached the end, they had forgotten the beginning and lost sight of the whole. Instead of being forced to take this pedantic approach, they should have been encouraged to read the play at one sitting and discuss what they got out of that first quick reading. Only then would they have been ready to study the play carefully and closely because then they would have understood enough of it to learn more.\nThe rule applies with equal force to expository works. Here, indeed, the best proof of the soundness of the rule—give a book a first superficial reading—is what happens when you do not follow it. Take a basic work in economics, for example, such as Adam Smith\u0026rsquo;s classic The Wealth of Nations. (We choose this book as an example because it is more than a textbook or a work for specialists in the field. It is a book for the general reader.) If you insist on understanding everything on every page before you go on to the next, you will not get very far. In your effort to master the fine points, you will miss the big points that Smith makes so clearly about the factors of wages, rents, profits, and interest that enter into the cost of things, the role of the market in determining prices, the evils of monopoly, the reasons for free trade. You will miss the forest for the trees. You will not be reading well on any level.\n◇On Reading Speeds # We described inspectional reading in Chapter 2 as the art of getting the most out of a book in a limited time. In describing it further in the present chapter, we have in no way changed that definition. The two steps involved in inspectional reading are both taken rapidly. The competent inspectional reader will accomplish them both quickly, no matter how long or difficult the book he is trying to read.\nThat working definition, however, inevitably raises the question. What about speed reading? What is the relation between the levels of reading and the many speed reading courses, both academic and commercial, that are offered at the present day?\nWe have already suggested that such courses are basically remedial—that is, that they provide instruction mainly, if not exclusively, in reading on the elementary level. But more needs to be said.\nLet it be understood at once that we are wholly in favor of the proposition that most people ought to be able to read faster than they do. Too often, there are things we have to read that are not really worth spending a lot of time reading; if we cannot read them quickly, it will be a terrible waste of time. It is true enough that many people read some things too slowly, and that they ought to read them faster. But many people also read some things too fast, and they ought to read those things more slowly. A good speed reading course should therefore teach you to read at many different speeds, not just one speed that is faster than anything you can manage now. It should enable you to vary your rate of reading in accordance with the nature and complexity of the material.\nOur point is really very simple. Many books are hardly worth even skimming; some should be read quickly; and a few should be read at a rate, usually quite slow, that allows for complete comprehension. It is wasteful to read a book slowly that deserves only a fast reading; speed reading skills can help you solve that problem. But this is only one reading problem. The obstacles that stand in the way of comprehension of a difficult book are not ordinarily, and perhaps never primarily, physiological or psychological. They arise because the reader simply does not know what to do when approaching a difficult—and rewarding—book. He does not know the rules of reading; he does not know how to marshal his intellectual resources for the task. No matter how quickly he reads, he will be no better off if, as is too often true, he does not know what he is looking for and does not know when he has found it.\nWith regard to rates of reading, then, the ideal is not merely to be able to read faster, but to be able to read at different speeds—and to know when the different speeds are appropriate. Inspectional reading is accomplished quickly, but that is not only because you read faster, although in fact you do; it is also because you read less of a book when you give it an inspectional reading, and because you read it in a different way, with different goals in mind. Analytical reading is ordinarily much slower than inspectional reading, but even when you are giving a book an analytical reading, you should not read all of it at the same rate of speed. Every book, no matter how difficult, contains interstitial material that can be and should be read quickly; and every good book also contains matter that is difficult and should be read very slowly.\n◇Fixations and Regressions # Speed reading courses properly make much of the discovery—we have known it for half a century or more—that most people continue to sub-vocalize for years after they are first taught to read. Films of eye movements, furthermore, show that the eyes of young or untrained readers \u0026ldquo;fixate\u0026rdquo; as many as five or six times in the course of each line that is read. (The eye is blind while it moves; it can only see when it stops.) Thus single words or at the most two-word or three-word phrases are being read at a time, in jumps across the line. Even worse than that, the eyes of incompetent readers regress as often as once every two or three lines—that is, they return to phrases or sentences previously read.\nAll of these habits are wasteful and obviously cut down reading speed. They are wasteful because the mind, unlike the eye, does not need to \u0026ldquo;read\u0026rdquo; only a word or short phrase at a time. The mind, that astounding instrument, can grasp a sentence or even a paragraph at a \u0026ldquo;glance\u0026rdquo;—if only the eyes will provide it with the information it needs. Thus the primary task—recognized as such by all speed reading courses—is to correct the fixations and regressions that slow so many readers down. Fortunately, this can be done quite easily. Once it is done, the student can read as fast as his mind will let him, not as slow as his eyes make him.\nThere are various devices for breaking the eye fixations, some of them complicated and expensive. Usually, however, it is not necessary to employ any device more sophisticated than your own hand, which you can train yourself to follow as it moves more and more quickly across and down the page. You can do this yourself. Place your thumb and first two fingers together. Sweep this \u0026ldquo;pointer\u0026rdquo; across a line of type, a little faster than it is comfortable for your eyes to move. Force yourself to keep up with your hand. You will very soon be able to read the words as you follow your hand. Keep practicing this, and keep increasing the speed at which your hand moves, and before you know it you will have doubled or trebled your reading speed.\n◇The Problem of Comprehension # But what exactly have you gained if you increase your reading speed significantly? It is true that you have saved time—but what about comprehension? Has that also increased, or has it suffered in the process?\nThere is no speed reading course that we know of that does not claim to be able to increase your comprehension along with your reading speed. And on the whole, there is probably some foundation for these claims. The hand (or some other device) used as a timer tends not only to increase your reading rate, but also to improve your concentration on what you are reading. As long as you are following your hand it is harder to fall asleep, to daydream, to let your mind wander. So far, so good. Concentration is another name for what we have called activity in reading. The good reader reads actively, with concentration.\nBut concentration alone does not really have much of an effect on comprehension, when that is properly understood. Comprehension involves much more than merely being able to answer simple questions of fact about a text. This limited kind of comprehension, in fact, is nothing but the elementary ability to answer the question about a book or other reading material: \u0026ldquo;What does it say?\u0026rdquo; The many further questions that, when correctly answered, imply higher levels of comprehension are seldom asked in speed reading courses, and instruction in how to answer them is seldom given.\nTo make this clearer, let us take an example of something to read. Let us take the Declaration of Independence. You probably have a copy of it available. Take it down and look at it. It occupies less than three pages when printed. How fast should you read it?\nThe second paragraph of the Declaration ends with the sentence: \u0026ldquo;To prove this, let facts be submitted to a candid world.\u0026rdquo; The following two pages of \u0026ldquo;facts,\u0026rdquo; some of which, incidentally, are quite dubious, can be read quickly. It is not necessary to gain more than a general idea of the kind of facts that Jefferson is citing, unless, of course, you are a scholar concerned with the historical circumstances in which he wrote. Even the last paragraph, ending with the justly celebrated statement that the signers \u0026ldquo;mutually pledge to each other our lives, our fortunes, and our sacred honour,\u0026rdquo; can be read quickly. This is a rhetorical flourish, and it deserves what mere rhetoric always deserves. But the first two paragraphs of the Declaration of Independence require more than a first rapid reading.\nWe doubt that there is anyone who can read those first two paragraphs at a rate much faster than 20 words a minute. Indeed, individual words in the famous second paragraph- words like \u0026ldquo;inalienable,\u0026rdquo; \u0026ldquo;rights,\u0026rdquo; \u0026ldquo;liberty,\u0026rdquo; \u0026ldquo;happiness,\u0026rdquo; \u0026ldquo;consent,\u0026rdquo; \u0026ldquo;just powers\u0026rdquo;—are worth dwelling over, puzzling about, considering at length. Properly read, for full comprehension, those first two paragraphs of the Declaration might require days, or weeks, or even years.\nThe problem of speed reading, then, is the problem of comprehension. Practically, this comes down to defining comprehension at levels beyond the elementary. Speed reading courses, for the most part, do not attempt this. It is worth emphasizing, therefore, that it is precisely comprehension in reading that this book seeks to improve. You cannot comprehend a book without reading it analytically; analytical reading, as we have noted, is undertaken primarily for the sake of comprehension (or understanding).\n◇Summary of Inspectional Reading # A few words in summary of this chapter. There is no single right speed at which you should read; the ability to read at various speeds and to know when each speed is appropriate is the ideal. Great speed in reading is a dubious achievement; it is of value only if what you have to read is not really worth reading. A better formula is this: Every book should be read no more slowly than it deserves, and no more quickly than you can read it with satisfaction and comprehension. In any event, the speed at which they read, be it fast or slow, is but a fractional part of most people’s problem with reading.\nSkimming or pre-reading a book is always a good idea; it is necessary when you do not know, as is often the case, whether the book you have in hand is worth reading carefully. You will find that out by skimming it. It is generally desirable to skim even a book that you intend to read carefully, to get some idea of its form and structure.\nFinally, do not try to understand every word or page of a difficult book the first time through. This is the most important rule of all; it is the essence of inspectional reading. Do not be afraid to be, or to seem to be, superficial. Race through even the hardest book. You will then be prepared to read it well the second time.\nWe have now completed our initial discussion of the second level of reading—inspectional reading. We will return to the subject when we come to Part Four, where we will show what an important role inspectional reading plays in syntopical reading, the fourth and highest level of reading.\nHowever, you should keep in mind during our discussion of the third level of reading—analytical reading—which is described in the second part of this book, that inspectional reading serves an important function at that level, too. The two stages of inspectional reading can both be thought of as anticipations of steps that the reader takes when he reads analytically. The first stage of inspectional reading—the stage we have called systematic skimming—serves to prepare the analytical reader to answer the questions that must be asked during the first stage of that level. Systematic skimming, in other words, anticipates the comprehension of a book’s structure. And the second stage of inspectional reading—the stage we have called superficial reading—serves the reader when he comes to the second stage of reading at the analytical level. Superficial reading is the first necessary step in the interpretation of a book’s contents.\nBefore going on to explain analytical reading, we want to pause for a moment to consider again the nature of reading as an activity. There are certain actions the active or demanding reader must perform in order to read well. We will discuss them in the next chapter.\n★5 HOW TO BE A DEMANDING READER # The rules for reading yourself to sleep are easier to follow than are the rules for staying awake while reading. Get into bed in a comfortable position, make sure the light is inadequate enough to cause a slight eyestrain, choose a book that is either terribly difficult or terribly boring—in any event, one that you do not really care whether you read or not—and you will be asleep in a few minutes. Those who are experts in relaxing with a book do not have to wait for nightfall. A comfortable chair in the library will do any time.\nUnfortunately, the rules for keeping awake do not consist in doing just the opposite. It is possible to keep awake while reading in a comfortable chair or even in bed, and people have been known to strain their eyes by reading late in light too dim. What kept the famous candlelight readers awake? One thing certainly—it made a difference to them, a great difference, whether or not they read the book they had in hand.\nWhether you manage to keep awake or not depends in large part on your goal in reading. If your aim in reading is to profit from it—to grow somehow in mind or spirit—you have to keep awake. That means reading as actively as possible. It means making an effort—an effort for which you expect to be repaid.\nGood books, fiction or nonfiction, deserve such reading. To use a good book as a sedative is conspicuous waste. To fall asleep or, what is the same, to let your mind wander during the hours you planned to devote to reading for profit—that is, primarily for understanding—is clearly to defeat your own ends.\nBut the sad fact is that many people who can distinguish between profit and pleasure—between understanding, on the one hand, and entertainment or the mere satisfaction of curiosity, on the other hand—nevertheless fail to carry out their reading plans. They fail even if they know which books give which. The reason is that they do not know how to be demanding readers, how to keep their mind on what they are doing by making it do the work without which no profit can be earned.\n◇The Essence of Active Reading: The Four Basic Questions a Reader Asks # We have already discussed active reading extensively in this book. We have said that active reading is better reading, and we have noted that inspectional reading is always active. It is an effortful, not an effortless, undertaking. But we have not yet gone to the heart of the matter by stating the one simple prescription for active reading. It is: Ask questions while you read—questions that you yourself must try to answer in the course of reading.\nAny questions? No. The art of reading on any level above the elementary consists in the habit of asking the right questions in the right order. There are four main questions you must ask about any book. ☍ These four questions, as stated, together with the discussion of them that follows, apply mainly to expository or nonfiction works. However, the questions, when adapted, apply to fiction and poetry as well. The adaptations required are discussed in Chapters 14 and 15. 1. WHAT IS THE BOOK ABOUT AS A WHOLE? You must try to discover the leading theme of the book, and how the author develops this theme in an orderly way by subdividing it into its essential subordinate themes or topics.\n2. WHAT IS BEING SAID IN DETAIL, AND HOW? You must try to discover the main ideas, assertions, and arguments that constitute the author’s particular message.\n3. IS THE BOOK TRUE, IN WHOLE OR IN PART? You cannot answer this question until you have answered the first two. You have to know what is being said before you can decide whether it is true or not. When you understand a book, however, you are obligated, if you are reading seriously, to make up your own mind. Knowing the author’s mind is not enough.\n4. WHAT OF IT? If the book has given you information, you must ask about its significance. Why does the author think it is important to know these things? Is it important to you to know them? And if the book has not only informed you, but also enlightened you, it is necessary to seek further enlightenment by asking what else follows, what is further implied or suggested.\nWe will return to these four questions at length in the rest of this book. Stated another way, they become the basic rules of reading with which Part Two is mainly concerned. They are stated here in question form for a very good reason. Reading a book on any level beyond the elementary is essentially an effort on your part to ask it questions (and to answer them to the best of your ability). That should never be forgotten. And that is why there is all the difference in the world between the demanding and the undemanding reader. The latter asks no questions—and gets no answers.\nThe four questions stated above summarize the whole obligation of a reader. They apply to anything worth reading—a book or an article or even an advertisement. Inspectional reading tends to provide more accurate answers to the first two questions than to the last two, but it nevertheless helps with those also. An analytical reading of a book has not been accomplished satisfactorily until you have answers to those last questions—until you have some idea of the book’s truth, in whole or part, and of its significance, if only in your own scheme of things. The last question—What of it?—is probably the most important one in syntopical reading. Naturally, you will have to answer the first three questions before attempting the final one.\nKnowing what the four questions are is not enough. You must remember to ask them as you read. The habit of doing that is the mark of a demanding reader. More than that, you must know how to answer them precisely and accurately. The trained ability to do that is the art of reading.\nPeople go to sleep over good books not because they are unwilling to make the effort, but because they do not know how to make it. Good books are over your head; they would not be good for you if they were not. And books that are over your head weary you unless you can reach up to them and pull yourself up to their level. It is not the stretching that tires you, but the frustration of stretching unsuccessfully because you lack the skill to stretch effectively. To keep on reading actively, you must have not only the will to do so, but also the skill—the art that enables you to elevate yourself by mastering what at first sight seems to be beyond you.\n◇How to Make a Book Your Own # If you have the habit of asking a book questions as you read, you are a better reader than if you do not. But, as we have indicated, merely asking questions is not enough. You have to try to answer them. And although that could be done, theoretically, in your mind only, it is much easier to do it with a pencil in your hand. The pencil then becomes the sign of your alertness while you read.\nIt is an old saying that you have to \u0026ldquo;read between the lines\u0026rdquo; to get the most out of anything. The rules of reading are a formal way of saying this. But we want to persuade you to “write between the lines,” too. Unless you do, you are not likely to do the most efficient kind of reading.\nWhen you buy a book, you establish a property right in it, just as you do in clothes or furniture when you buy and pay for them. But the act of purchase is actually only the prelude to possession in the case of a book. Full ownership of a book only comes when you have made it a part of yourself, and the best way to make yourself a part of it—which comes to the same thing—is by writing in it.\nWhy is marking a book indispensable to reading it? First, it keeps you awake—not merely conscious, but wide awake. Second, reading, if it is active, is thinking, and thinking tends to express itself in words, spoken or written. The person who says he knows what he thinks but cannot express it usually does not know what he thinks. Third, writing your reactions down helps you to remember the thoughts of the author.\nReading a book should be a conversation between you and the author. Presumably he knows more about the subject than you do; if not, you probably should not be bothering with his book. But understanding is a two-way operation; the learner has to question himself and question the teacher. He even has to be willing to argue with the teacher, once he understands what the teacher is saying. Marking a book is literally an expression of your differences or your agreements with the author. It is the highest respect you can pay him.\nThere are all kinds of devices for marking a book intelligently and fruitfully. Here are some devices that can be used:\n1. UNDERLINING—of major points; of important or forceful statements.\n2. VERTICAL LINES AT THE MARGIN—to emphasize a statement already underlined or to point to a passage too long to be underlined.\n3. STAR, ASTERISK, OR OTHER DOODAD AT THE MARGIN—to be used sparingly, to emphasize the ten or dozen most important statements or passages in the book. You may want to fold a corner of each page on which you make such marks or place a slip of paper between the pages. In either case, you will be able to take the book off the shelf at any time and, by opening it to the indicated page, refresh your recollection.\n4. NUMBERS IN THE MARGIN—to indicate a sequence of points made by the author in developing an argument.\n5. NUMBERS OF OTHER PAGES IN THE MARGIN—to indicate where else in the book the author makes the same points, or points relevant to or in contradiction of those here marked; to tie up the ideas in a book, which, though they may be separated by many pages, belong together. Many readers use the symbol \u0026ldquo;Cf\u0026rdquo; to indicate the other page numbers; it means \u0026ldquo;compare\u0026rdquo; or \u0026ldquo;refer to\u0026rdquo;.\n6. CIRCLING OF KEY WORDS OR PHRASES—This serves much the same function as underlining.\n7. WRITING IN THE MARGIN, OR AT THE TOP OR BOTTOM OF THE PAGE—to record questions (and perhaps answers) which a passage raises in your mind; to reduce a complicated discussion to a simple statement; to record the sequence of major points right through the book. The endpapers at the back of the book can be used to make a personal index of the author’s points in the order of their appearance.\nTo inveterate book-markers, the front endpapers are often the most important. Some people reserve them for a fancy bookplate. But that expresses only their financial ownership of the book. The front endpapers are better reserved for a record of your thinking. After finishing the book and making your personal index on the back endpapers, turn to the front and try to outline the book, not page by page or point by point (you have already done that at the back), but as an integrated structure, with a basic outline and an order of parts. That outline will be the measure of your understanding of the work; unlike a bookplate, it will express your intellectual ownership of the book.\n◇The Three Kinds of Note-making # There are three quite different kinds of notes that you will make in your books as well as about them. Which kind you make depends upon the level at which you are reading.\nWhen you give a book an inspectional reading, you may not have much time to make notes in it; inspectional reading, as we have observed, is always limited as to time. Nevertheless, you are asking important questions about a book when you read it at this level, and it would be desirable, even if it is not always possible, to record your answers when they are fresh in your mind.\nThe questions answered by inspectional reading are: first, what kind of book is it? second, what is it about as a whole? and third, what is the structural order of the work whereby the author develops his conception or understanding of that general subject matter? You may and probably should make notes concerning your answers to these questions, especially if you know that it may be days or months before you will be able to return to the book to give it an analytical reading. The best place to make such notes is on the contents page, or perhaps on the title page, which are otherwise unused in the scheme we have outlined above.\nThe point to recognize is that these notes primarily concern the structure of the book, and not its substance—at least not in detail. We therefore call this kind of note-making structural.\nIn the course of an inspectional reading, especially of a long and difficult book, you may attain some insights into the author’s ideas about his subject matter. Often, however, you will not; and certainly you should put off making any judgment of the accuracy or truth of the statements until you have read the book more carefully. Then, during an analytical reading, you will need to give answers to questions about the truth and significance of the book. The notes you make at this level of reading are, therefore, not structural but conceptual. They concern the author’s concepts, and also your own, as they have been deepened or broadened by your reading of the book.\nThere is an obvious difference between structural and conceptual note-making. What kind of notes do you make when you are giving several books a syntopical reading—when you are reading more than one book on a single subject? Again, such notes will tend to be conceptual; and the notes on a page may refer you not only to other pages in that book, but also to pages in other books.\nThere is a step beyond even that, however, and a truly expert reader can take it when he is reading several books syntopically. That is to make notes about the shape of the discussion—the discussion that is engaged in by all of the authors, even if unbeknownst to them. For reasons that will become clear in Part Four, we prefer to call such notes dialectical. Since they are made concerning several books, not just one, they often have to be made on a separate sheet (or sheets) of paper. Here, a structure of concepts is implied—an order of statements and questions about a single subject matter. We will return to this kind of note-making in Chapter 20.\n◇Forming the Habit of Reading # Any art or skill is possessed by those who have formed the habit of operating according to its rules. This is the way the artist or craftsman in any field differs from those who lack his skill.\nNow there is no other way of forming a habit of operation than by operating. That is what it means to say one learns to do by doing. The difference between your activity before and after you have formed a habit is a difference in facility and readiness. After practice, you can do the same thing much better than when you started. That is what it means to say practice makes perfect. What you do very imperfectly at first, you gradually come to do with the kind of almost automatic perfection that an instinctive performance has. You do something as if you were born to it, as if the activity were as natural to you as walking or eating. That is what it means to say that habit is second nature.\nKnowing the rules of an art is not the same as having the habit. When we speak of a man as skilled in any way, we do not mean that he knows the rules of making or doing something, but that he possesses the habit of making or doing it. Of course, it is true that knowing the rules, more or less explicitly, is a condition of getting the skill. You cannot follow rules you do not know. Nor can you acquire an artistic habit—any craft or skill—without following rules. The art as something that can be taught consists of rules to be followed in operation. The art as something learned and possessed consists of the habit that results from operating according to the rules.\nIncidentally, not everyone understands that being an artist consists in operating according to rules. People point to a highly original painter or sculptor and say, “He isn’t following rules. He\u0026rsquo;s doing something entirely original, something that has never been done before, something for which there are no rules.” But they fail to see what rules it is that the artist follows. There are no final, unbreakable rules, strictly speaking, for making a painting or sculpture. But there are rules for preparing canvas and mixing paints and applying them, and for moulding clay or welding steel. Those rules the painter or sculptor must have followed, or else he could not have made the thing he has made. No matter how original his final production, no matter how little it seems to obey the “rules” of art as they have traditionally been understood, he must be skilled to produce it. And this is the art—the skill or craft—that we are talking about here.\n◇From Many Rules to One Habit # Reading is like skiing. When done well, when done by an expert, both reading and skiing are graceful, harmonious activities. When done by a beginner, both are awkward, frustrating, and slow.\nLearning to ski is one of the most humiliating experiences an adult can undergo (that is one reason to start young). After all, an adult has been walking for a long time; he knows where his feet are; he knows how to put one foot in front of the other in order to get somewhere. But as soon as he puts skis on his feet, it is as though he had to learn to walk all over again. He slips and slides, falls down, has trouble getting up, gets his skis crossed, tumbles again, and generally looks—and feels—like a fool.\nEven the best instructor seems at first to be no help. The ease with which the instructor performs actions that he says are simple but that the student secretly believes are impossible is almost insulting. How can you remember everything the instructor says you have to remember? Bend your knees. Look down the hill. Keep your weight on the downhill ski. Keep your back straight, but nevertheless lean forward. The admonitions seem endless—how can you think about all that and still ski?\nThe point about skiing, of course, is that you should not be thinking about the separate acts that, together, make a smooth turn or series of linked turns—instead, you should merely be looking ahead of you down the hill, anticipating bumps and other skiers, enjoying the feel of the cold wind on your cheeks, smiling with pleasure at the fluid grace of your body as you speed down the mountain. In other words, you must learn to forget the separate acts in order to perform all of them, and indeed any of them, well. But in order to forget them as separate acts, you have to learn them first as separate acts. Only then can you put them together to become a good skier.\nIt is the same with reading. Probably you have been reading for a long time, too, and starting to learn all over again can be humiliating. But it is just as true of reading as it is of skiing that you cannot coalesce a lot of different acts into one complex, harmonious performance until you become expert at each of them. You cannot telescope the different parts of the job so that they run into one another and fuse intimately. Each separate act requires your full attention while you are doing it. After you have practiced the parts separately, you can not only do each with greater facility and less attention but can also gradually put them together into a smoothly running whole.\nAll of this is common knowledge about learning a complex skill. We say it here merely because we want you to realize that learning to read is at least as complex as learning to ski or to typewrite or to play tennis. If you can recall your patience in any other learning experience you have had, you will be more tolerant of instructors who will shortly enumerate a long list of rules for reading.\nThe person who has had one experience in acquiring a complex skill knows that he need not fear the array of rules that present themselves at the beginning of something new to be learned. He knows that he does not have to worry about how all the separate acts in which he must become separately proficient are going to work together.\nThe multiplicity of the rules indicates the complexity of the one habit to be formed, not a plurality of distinct habits. The parts coalesce and telescope as each reaches the stage of automatic execution. When all the subordinate acts can be done more or less automatically, you have formed the habit of the whole performance. Then you can think about tackling an expert run you have never skied before, or reading a book that you once thought was too difficult for you. At the beginning, the learner pays attention to himself and his skill in the separate acts. When the acts have lost their separateness in the skill of the whole performance, the learner can at last pay attention to the goal that the technique he has acquired enables him to reach.\nWe hope we have encouraged you by the things we have said in these pages. It is hard to learn to read well. Not only is reading, especially analytical reading, a very complex activity-much more complex than skiing; it is also much more of a mental activity. The beginning skier must think of physical acts that he can later forget and perform almost automatically. It is relatively easy to think of and be conscious of physical acts. It is much harder to think of mental acts, as the beginning analytical reader must do; in a sense, he is thinking about his own thoughts. Most of us are unaccustomed to doing this. Nevertheless, it can be done, and a person who does it cannot help learning to read much better.\n★PART TWO The Third Level of Reading: Analytical Reading # ★6 PIGEONHOLING A BOOK # We said at the beginning of this book that the instruction in reading that it provides applies to anything you have to or want to read. However, in expounding the rules of analytical reading, as we will do in Part Two, we may seem to be ignoring that fact. We will usually, if not always, refer to the reading of whole books. Why is this so?\nThe answer is simple. Reading a whole book, and especially a long and difficult one, poses the severest problems any reader can face. Reading a short story is almost always easier than reading a novel; reading an article is almost always easier than reading a book on the same subject. If you can read an epic poem or a novel, you can read a lyric or a short story; if you can read an expository book—a history, a philosophical work, a scientific treatise—you can read an article or abstract in the same field.\nHence everything that we will say about reading books applies to reading other materials of the kinds indicated. You are to understand, when we refer to the reading of books, that the rules expounded refer to lesser and more easily understood materials, too. Sometimes the rules do not apply to the latter in quite the same way, or to the extent that they apply to whole books. Nevertheless, it will always be easy for you to adapt them so that they are applicable.\n◇The Importance of Classifying Books # The first rule of analytical reading can be expressed as follows: RULE 1. YOU MUST KNOW WHAT KIND OF BOOK YOU ARE READING, AND YOU SHOULD KNOW THIS AS EARLY IN THE PROCESS AS POSSIBLE, PREFERABLY BEFORE YOU BEGIN TO READ.\nYou must know, for instance, whether you are reading fiction—a novel, a play, an epic, a lyric—or whether it is an expository work of some sort. Almost every reader knows a work of fiction when he sees it. Or so it seems—and yet this is not always easy. Is Portnoy\u0026rsquo;s Complaint a novel or a psychoanalytical study? Is Naked Lunch a fiction or a tract against drug abuse, similar to the books that used to recount the horrors of alcohol for the betterment of readers? Is Gone with the Wind a romance or a history of the South before and during the Civil War? Do Main Street and The Grapes of Wrath belong in the category of belles-lettres or are both of them sociological studies, the one concentrating on urban experiences, the other on agrarian life?\nAll of these, of course, are novels; all of them appeared on the fiction side of the best-seller lists. Yet the questions are not absurd. Just by their titles, it would be hard to tell in the case of Main Street and Middletown which was fiction and which was social science. There is so much social science in some contemporary novels, and so much fiction in much of sociology, that it is hard to keep them apart. But there is another kind of science, too—physics and chemistry, for instance—in books like The Andromeda Strain or the novels of Robert Heinlein or Arthur C Clarke. And a book like The Universe and Dr. Einstein, while clearly not fiction, is almost as “readable” as a novel, and probably more readable than some of the novels of, say, William Faulkner.\nAn expository book is one that conveys knowledge primarily, “knowledge” being construed broadly. Any book that consists primarily of opinions, theories, hypotheses, or speculations, for which the claim is made more or less explicitly that they are true in some sense, conveys knowledge in this meaning of knowledge and is an expository work. As with fiction, most people know an expository work when they see it. Here, however, the problem is not to distinguish nonfiction from fiction, but to recognize that there are various kinds of expository books. It is not merely a question of knowing which books are primarily instructive, but also which are instructive in a particular way. The kinds of information or enlightenment that a history and a philosophical work affords are not the same. The problems dealt with by a book on physics and one on morals are not the same, nor are the methods the writers employ in solving such different problems.\nThus this first rule of analytical reading, though it is applicable to all books, applies particularly to nonfictional, expository works. How do you go about following the rule, particularly its last clause?\nAs we have already suggested, you do so by first inspecting the book—giving it an inspectional reading. You read the title, the subtitle, the table of contents, and you at least glance at the preface or introduction by the author and at the index. If the book has a dust jacket, you look at the publisher’s blurb. These are the signal flags the author waves to let you know which way the wind is blowing. It is not his fault if you will not stop, look, and listen.\n◇What You Can Learn from the Title of a Book # The numbers of readers who pay no attention to the signals is larger than you might expect. We have had this experience again and again with students. We have asked them what a book was about. We have asked them, in the most general terms, to tell us what sort of book it was. This is a good way, almost an indispensable way, to begin a discussion of a book. Nevertheless, it is often hard to get any kind of answer to the question.\nLet us take a couple of examples of the kind of confusion that can occur. In 1859, Darwin published a very famous book. A century later the entire English-speaking world celebrated the publication of the book. It was discussed endlessly, and its influence was assessed by learned and not-so-learned commentators. The book was about the theory of evolution, and the word “species” was in the title. What was the title?\nProbably you said The Origin of Species, in which case you were correct. But you might not have said that. You might have said that the title was The Origin of the Species. Recently, we asked some twenty-five reasonably well-read persons what the title of Darwin\u0026rsquo;s book was and more than half said The Origin of the Species. The reason for the mistake is obvious; they supposed, never having read the book, that it had something to do with the development of the human species. In fact, it has little or nothing to do with that subject, which Darwin covered in a later book, The Descent of Man. The Origin of Species is about what its title says it is about—namely the proliferation in the natural world of a vast number of species of plants and animals from an originally much smaller number of species, owing mainly to the principle of natural selection. We mention this common error because many think they know the title of the book, although few have actually ever read the title carefully and thought about what it means.\nHere is another example. In this case we will not ask you to remember the title, but to think about what it means. Gibbon wrote a famous, and famously long, book about the Roman Empire. He called it The Decline and Fall of the Roman Empire. Almost everybody who takes up the book recognizes that title; and most people, even without the book in their hand, know the title. Indeed, the phrase “decline and fall” has become proverbial. Nevertheless, when we asked the same twenty-five well-read people why the first chapter is called “The Extent and Military Force of the Empire in the Age of the Antonines,” they had no idea. They did not see that if the book as a whole was titled Decline and Fall, then it might be assumed that the narrative would begin with the high point of the Roman Empire, and continue through to the end. Unconsciously, they had translated “decline and fall” into “rise and fall.” They were puzzled because there was no discussion of the Roman Republic, which ended a century and a half before the Age of the Antonines. If they had read the title carefully they could have assumed that the Age of the Antonines was the high point of the Empire, even if they had not known it before. Reading the title, in other words, could have given them essential information about the book before they started to read it; but they had failed to do that, as most people fail to do even with an unfamiliar book.\nOne reason why titles and prefaces are ignored by many readers is that they do not think it important to classify the book they are reading. They do not follow this first rule of analytical reading. If they tried to follow it, they would be grateful to the author for helping them. Obviously, the author thinks it is important for the reader to know the kind of book he is being given. That is why he goes to the trouble of making it plain in the preface, and usually tries to make his title—or at least his subtitle—descriptive. Thus, Einstein and Inf eld, in their preface to The Evolution of Physics, tell the reader that they expect him to know “that a scientific book, even though popular, must not be read in the same way as a novel.” They also construct an analytical table of contents to advise the reader in advance of the details of their treatment. In any event, the chapter headings listed in the front serve the purpose of amplifying the significance of the main title.\nThe reader who ignores all these things has only himself to blame if he is puzzled by the question. What kind of book is this? He is going to become more perplexed. If he cannot answer that question, and if he never asks it of himself, he is going to be unable to answer a lot of other questions about the book.\nImportant as reading titles is, it is not enough. The clearest titles in the world, the most explicit front matter, will not help you to classify a book unless you have the broad lines of classification already in your mind.\nYou will not know the sense in which Euclid’s Elements of Geometry and William James’ Principles of Psychology are books of the same sort if you do not know that psychology and geometry are both sciences—and, incidentally, if you do not know that “elements” and “principles” mean much the same thing in these two titles (though not in general), nor will you further be able to distinguish them as different unless you know there are different kinds of science. Similarly, in the case of Aristotle’s Politics and Adam Smith’s The Wealth of Nations, you can tell how these books are alike and different only if you know what a practical problem is, and what different kinds of practical problems there are.\nTitles sometimes make the grouping of books easy. Anyone would know that Euclid’s Elements, Descartes’ Geometry, and Hilbert’s Foundations of Geometry are three mathematical books, more or less closely related in subject matter. This is not always the case. It might not be so easy to tell from the titles that Augustine’s The City of God, Hobbes’ Leviathan, and Rousseau’s Social Contract are political treatises, although a careful perusal of their chapter headings would reveal the problems that are common to these three books.\nAgain, however, to group books as being of the same kind is not enough; to follow this first rule of reading you must know what that kind is. The title will not tell you, nor all the rest of the front matter, nor even the whole book itself sometimes, unless you have some categories you can apply to classify books intelligently. In other words, this rule has to be made a little more intelligible if you are to follow it intelligently. It can only be made intelligible by drawing distinctions and thus creating categories that make sense and will stand up to the test of time.\nWe have already discussed a rough classification of books. The main distinction, we said, was between works of fiction, on the one hand, and works conveying knowledge, or expository works, on the other hand. Among expository works, we can further distinguish history from philosophy, and both from science and mathematics.\nNow this is all very well as far as it goes. This is a classification scheme with fairly perspicuous categories, and most people could probably place most books in the right category if they thought about it. But not all books in all categories.\nThe trouble is that as yet we have no principles of classification. We will have more to say about these principles as we proceed in our discussion of the higher levels of reading. For the moment, we want to confine ourselves to one basic distinction, a distinction that applies across the board to all expository works. It is the distinction between theoretical and practical works.\n◇Practical vs. Theoretical Books # Everyone uses the words “theoretical” and “practical,” but not everyone knows what they mean, perhaps least of all the hardheaded practical man who distrusts all theorists, especially if they are in the government. For such persons, “theoretical” means visionary or even mystical; “practical” means something that works, something that has an immediate cash return. There is an element of truth in this. The practical has to do with what works in some way, at once or in the long run. The theoretical concerns something to be seen or understood. If we polish the rough truth that is here being grasped, we come to the distinction between knowledge and action as the two ends a writer may have in mind.\nBut, you may say, in dealing with expository books, are we not dealing with books that convey knowledge? How does action come into it? The answer, of course, is that intelligent action depends on knowledge. Knowledge can be used in many ways, not only for controlling nature and inventing useful machines or instruments but also for directing human conduct and regulating man’s operations in various fields of skill. What we have in mind here is exemplified by the distinction between pure and applied science, or, as it is sometimes very inaccurately expressed, between science and technology.\nSome books and some teachers are interested only in the knowledge itself that they have to communicate. This does not mean that they deny its utility, or that they insist that knowledge is good only for its own sake. They simply limit themselves to one kind of communication or teaching, and leave the other kind to other men. These others have an interest beyond knowledge for its own sake. They are concerned with the problems of human life that knowledge can help to solve. They communicate knowledge, too, but always with a view to and an emphasis upon its application.\nTo make knowledge practical we must convert it into rules of operation. We must pass from knowing what is the case to knowing what to do about it if we wish to get somewhere. This can be summarized in the distinction between knowing that and knowing how. Theoretical books teach you that something is the case. Practical books teach you how to do something you want to do or think you should do.\nThis book is practical, not theoretical. Any guidebook is a practical book. Any book that tells you either what you should do or how to do it is practical. Thus you see that the class of practical books includes all expositions of arts to be learned, all manuals of practice in any field, such as engineering or medicine or cooking, and all treatises that are conveniently classified as moral, such as books on economic, ethical, or political problems. We will later explain why this last group of books, properly called “normative,” constitutes a very special category of practical books.\nProbably no one would question our calling expositions of arts to be learned and manuals or rule books, practical works. But the “practical” man to whom we have referred might object to the notion that a book on ethics, say, or one on economics, was practical. He might say that such a book was not practical because it was not true or would not work.\nIn fact, this is irrelevant to the point, although a book about economics that is not true is a bad book. Strictly speaking, any ethical work teaches us how to live our lives, tells us what we should do and not do, and often informs us of the rewards and punishments attached to doing and not doing it. Thus, whether or not we agree with its conclusions, any such work is practical. (Some modem sociological studies merely report the actual behavior of men, without judging it. These are neither ethical nor practical books. They are theoretical works—works of science.)\nSimilarly with a work on economics. Apart from reportorial, mathematical, or statistical studies of economic behavior, which are theoretical rather than practical, such works usually teach us how to organize our economic life, either as individuals or as societies or states, tell us what we should do and not do, and also inform us of the penalties involved if we do not do what we should. Again, we may disagree, but our disagreement does not make the book unpractical.\nImmanuel Kant wrote two famous philosophical works, one called The Critique of Pure Reason, the other. The Critique of Practical Reason. The first is about what is and how we know it—not how to know it, but how we in fact do know it—as well as about what can and cannot be known. It is a theoretical book par excellence. The Critique of Practical Reason is about how men should conduct themselves and about what constitutes virtuous or right conduct. This book places great emphasis on duty as the basis of all right action, and that emphasis may seem repellent to many modem readers. They may even say it is “impractical” to believe that duty is any longer a useful ethical concept. What they mean, of course, is that Kant is wrong, in their opinion, in his basic approach. But that does not mean that his book is any less a practical work in the sense we are employing here.\nApart from manuals and moral treatises (in the broad sense) one other instance of practical writing should be mentioned. An oration—a political speech or moral exhortation—certainly tries to tell you what you should do or how you should feel about something. Anyone who writes practically about anything not only tries to advise you but also tries to persuade you to follow his advice. Hence there is an element of oratory or exhortation in every moral treatise. It is also present in books that try to teach an art, such as this one. Thus, in addition to trying to teach you to read better, we have tried, and will continue to try, to persuade you to make the effort to do so.\nAlthough every practical book is somewhat oratorical and hortatory, it does not follow that oratory and exhortation are coextensive with the practical. There is a difference between a political harangue and a treatise on politics, between economic propaganda and an analysis of economic problems. The Communist Manifesto is a piece of oratory, but Marx’s Capital is much more than that.\nSometimes you can detect that a book is practical by its title. If the title contains such phrases as “the art of” or “how to,” you can spot it at once. If the title names fields that you know are practical, such as ethics or politics, engineering or business, and in many cases economics, law, or medicine, you can classify the book fairly readily.\nTitles can tell you even more than that. John Locke wrote two books with similar titles: An Essay Concerning Human Understanding and A Treatise Concerning the Origin, Extent, and End of Civil Government. Which of these is theoretical, which practical?\nFrom the titles alone we may conclude that the first is theoretical, because any analysis of understanding would be theoretical, and that the second is practical, because problems of government are themselves practical. But one could go beyond that, employing the techniques of inspectional reading that we have described. Locke wrote an introduction to the book on understanding. There he expressed his intention as being to inquire into the “origin, certainty, and extent of human knowledge.” The phrasing resembles the title of the book on government, but with one important difference. Locke was concerned with the certainty or validity of knowledge in the one case, and with the end or purpose of government in the other. Questions about the validity of something are theoretical, whereas to raise questions about the end of anything, the purpose it serves, is practical.\nIn describing the art of inspectional reading, we noted that you should not ordinarily stop after reading the front matter of a book and perhaps its index. You should read passages in the book that appear to be of a summary nature. You should also read the beginning and end of the book and of its major parts.\nThis becomes necessary when, as is sometimes the case, it is impossible to classify a book from its title and other front matter. In that case, you have to depend on signs to be found in the main body of the text. By paying attention to the words and keeping the basic categories in mind, you should be able to classify a book without reading very far.\nA practical book will soon betray its character by the frequent occurrence of such words as “should” and “ought,” “good” and “bad,” “ends” and “means.” The characteristic statement in a practical book is one that says that something should be done (or made); or that this is the right way of doing (or making) something; or that one thing is better than another as an end to be sought, or a means to be chosen. In contrast, a theoretical book keeps saying “is,” not “should” or “ought.” It tries to show that something is true, that these are the facts; not that things would be better if they were otherwise, and here is the way to make them better.\nBefore turning to theoretical books, let us caution you against supposing that the problem is as simple as telling whether you are drinking coffee or milk. We have merely suggested some signs whereby you can begin to make discriminations. The better you understand everything that is involved in the distinction between the theoretical and the practical, the better you will be able to use the signs.\nFor one thing, you will have to learn to mistrust them. You have to be suspicious in classifying books. We have noted that although economics is primarily and usually a practical matter, there are nevertheless books on economics that are purely theoretical. Similarly, although understanding is primarily and usually a theoretical matter, there are books (most of them are terrible) that purport to teach you “how to think.” You will also find authors who do not know the difference between theory and practice, just as there are novelists who do not know the difference between fiction and sociology. You will find books that are partly of one sort and partly of another, such as Spinoza’s Ethics. It remains, nevertheless, to your advantage as a reader to detect the way an author approaches his problem.\n◇Kinds of Theoretical Books # The traditional subdivision of theoretical books classifies them as history, science, and philosophy. Everybody knows the differences here in a rough way. It is only when you try to refine the obvious, and give the distinctions greater precision, that you get into difficulties. For the moment, let us try to skirt that danger and let rough approximations suffice.\nIn the case of history, the title usually does the trick. If the word “history” does not appear in the title, the rest of the front matter is likely to inform us that this is a book about something that happened in the past—not necessarily in the far past, of course, because it may have happened only yesterday. The essence of history is narration. History is knowledge of particular events or things that not only existed in the past but also underwent a series of changes in the course of time. The historian narrates these happenings and often colors his narrative with comment on, or insight into, the significance of the events.\nHistory is chronotopic. Chronos is the Greek word for time, topos the Greek word for place. History always deals with things that existed or events that occurred on a particular date and in a particular place. The word “chronotopic” can remind you of that.\nScience is not concerned with the past as such. It treats of matters than can happen at any time or place. The scientist seeks laws or generalizations. He wants to find out how things happen for the most part or in every case, not, as the historian does, how some particular things happened at a given time and place in the past.\nThe title of a scientific work is usually less revealing than the title of a history book. The word “science” sometimes appears, but more often the name of the subject matter appears, such as psychology or geology or physics. Then we must know whether that subject matter belongs to the scientist, as geology clearly does, or to the philosopher, as metaphysics clearly does. The trouble comes with the cases that are not so clear, such as physics and psychology, which have been claimed, at various times, by both scientists and philosophers. There is even trouble with the very words “philosophy” and “science,” for they have been variously used. Aristotle called his book on Physics a scientific treatise, although according to current usage we should regard it as philosophical; and Newton titled his great work Mathematical Principles of Natural Philosophy, though for us it is one of the masterpieces of science.\nPhilosophy is like science and unlike history in that it seeks general truths rather than an account of particular events, either in the near or distant past. But the philosopher does not ask the same questions as the scientist, nor does he employ the same kind of method to answer them.\nSince titles and subject-matter names are not likely to help us determine whether a book is philosophical or scientific, how can we tell? There is one criterion that we think always works, although you may have to read a certain amount of the book before you can apply it. If a theoretical book emphasizes things that lie outside the scope of your normal, routine, daily experience, it is a scientific work. If not, it is philosophical.\nThe distinction may be surprising. Let us illustrate it. (Remember that it applies only to books that are either science or philosophy, not to books that are neither.) Galileo’s Two New Sciences requires you to imagine, or to repeat for yourself in a laboratory, certain experiments with inclined planes. Newton’s Opticks refers to experiences in dark rooms with prisms, mirrors, and specially controlled rays of light. The special experience to which the author refers may not have been obtained by him in a laboratory. The facts that Darwin reported in The Origin of Species he observed in the course of many years of work in the field. They are facts that can be and have been rechecked by other observers making a similar effort. But they are not facts that can be checked in terms of the ordinary daily experience of the average man.\nIn contrast, a philosophical book appeals to no facts or observations that lie outside the experience of the ordinary man. A philosopher refers the reader to his own normal and common experience for the verification or support of anything the writer has to say. Thus, Locke’s Essay Concerning Human Understanding is a philosophical work in psychology, whereas many of Freud’s writings are scientific. Locke makes every point in terms of the experience all of us have of our own mental processes. Freud can make many of his points only by reporting what he observed under the clinical conditions of the psychoanalyst’s office.\nWilliam James, another great psychologist, took an interesting middle course. He reports many examples of the special experience that only the careful, trained observer can know about, but he also frequently asks the reader to judge whether what is being said is not true from his own experience. Thus James’ Principles of Psychology is both a scientific and a philosophical work, although it is primarily scientific.\nThe distinction proposed here is popularly recognized when we say that science is experimental or depends upon elaborate observational researches, whereas philosophy is merely armchair thinking. The contrast should not be invidious. There are certain problems, some of them very important, that can be solved in an armchair by a man who knows how to think about them in the light of common, human experience. There are other problems that no amount of the best armchair thinking can solve. What is needed to solve them is investigation of some sort—experiments in the laboratory or research in the field—extending experience beyond the normal, everyday routine. Special experience is required.\nThis does not mean that the philosopher is a pure thinker and the scientist merely an observer. Both have to observe and think, but they think about different sorts of observations. And however they may have arrived at the conclusions that they want to prove, they prove them in different ways, the scientist by pointing to the results of his special experiences, the philosopher by pointing to experiences that are common to all.\nThis difference in method always reveals itself in philosophical and scientific books, and that is how you can tell which sort of book you are reading. If you note the sort of experience that is being referred to as a condition of understanding what is being said, you will know whether the book is scientific or philosophical.\nIt is important to know this because, apart from the different kinds of experiences that they depend on, scientists and philosophers do not think in exactly the same way. Their styles in arguing are different. You must be able to find the terms and propositions—here we are getting a little ahead of ourselves—that constitute these different sorts of argumentation.\nThe same is true of history. Historical statements are different from scientific and philosophical ones. A historian argues differently and interprets facts differently. Furthermore, the typical history book is narrative in form. A narrative is a narrative, whether it be fact or fiction. The historian must write poetically, which means he must obey the rules for telling a good story. Whatever other excellences Locke’s Essay on Human Understanding or Newton’s Principia may have, neither is a good story.\nYou may object that we are making too much of the classification of books, at least before one has read them. Is it really all that important?\nWe may be able to meet the objections by calling your attention to one obvious fact. If you walked into a classroom in which a teacher was lecturing or otherwise instructing students, you could tell very soon whether the class was one in history, science, or philosophy. There would be something in the way the teacher proceeded, the kind of words he used, the type of arguments he employed, the sort of problems he proposed, and the kind of responses he expected from his students, that would give him away as belonging to one department or another. And it would make a difference to you to know this, if you were going to try to listen intelligently to what went on.\nIn short, the methods of teaching different kinds of subject matter are different. Any teacher knows this. Because of the difference in method and subject matter, the philosopher usually finds it easier to teach students who have not been previously taught by his colleagues, whereas the scientist prefers the student whom his colleagues have already prepared. And so forth and so on.\nNow, just as there is a difference in the art of teaching in different fields, so there is a reciprocal difference in the art of being taught. The activity of the student must somehow be responsive to the activity of the instructor. The relation between books and their readers is the same as that between teachers and their students. Hence, as books differ in the kinds of knowledge they have to communicate, they proceed to instruct us differently; and, if we are to follow them, we must learn to read each kind in an appropriate manner.\n★7 X-RAYING A BOOK # Every book has a skeleton hidden between its covers. Your job as an analytical reader is to find it.\nA book comes to you with flesh on its bare bones and clothes over its flesh. It is all dressed up. You do not have to undress it or tear the flesh off its limbs to get at the firm structure that underlies the soft surface. But you must read the book with X-ray eyes, for it is an essential part of your apprehension of any book to grasp its structure.\nRecognition of the need to see the structure of a book leads to the discovery of the second and third rules for reading any book. We say “any book.” These rules apply to poetry as well as to science, and to any kind of expository work. Their application will be different, of course, according to the kind of book they are used on. The unity of a novel is not the same as the unity of a treatise on politics; nor are the parts of the same sort, or ordered in the same way. But every book without exception that is worth reading at all has a unity and an organization of parts. A book that did not would be a mess. It would be relatively unreadable, as bad books actually are.\nWe will state these two rules as simply as possible. Then we will explain and illustrate them.\nThe second rule of analytical reading can be expressed as follows: RULE 2. STATE THE UNITY OF THE WHOLE BOOK IN A SINGLE SENTENCE, OR AT MOST A FEW SENTENCES (A SHORT PARAGRAPH).\nThis means that you must say what the whole book is about as briefly as possible. To say what the whole book is about is not the same as saying what land of book it is. (That was covered by Rule 1.) The word “about” may be misleading here. In one sense, a book is about a certain type of subject matter, which it treats in a certain way. If you know this, you know what kind of book it is. But there is another, more colloquial sense of “about.” We ask a person what he is about, what he is up to. So we can wonder what an author is up to, what he is trying to do. To find out what a book is about in this sense is to discover its theme or main point.\nA book is a work of art. (Again, we want to warn you against too narrow a conception of “art.” We do not mean, or we do not only mean, “fine art” here. A book is the product of someone who has a certain skill in making. He is a maker of books and he has made one here for our benefit.) In proportion as it is good, as a book and as a work of art, it has a more nearly perfect, a more pervasive unity. This is true of music and paintings, of novels and plays; it is no less true of books that convey knowledge.\nBut it is not enough to acknowledge this fact vaguely. You must apprehend the unity with definiteness. There is only one way to know that you have succeeded. You must be able to tell yourself or anybody else what the unity is, and in a few words. (If it requires too many words, you have not seen the unity but a multiplicity.) Do not be satisfied with “feeling the unity” that you cannot express. The reader who says, “I know what it is, but I just can’t say it,” probably does not even fool himself.\nThe third rule can be expressed as follows: RULE 3. SET FORTH THE MAJOR PARTS OF THE BOOK, AND SHOW HOW THESE ARE ORGANIZED INTO A WHOLE, BY BEING ORDERED TO ONE ANOTHER AND TO THE UNITY OF THE WHOLE.\nThe reason for this rule should be obvious. If a work of art were absolutely simple, it would, of course, have no parts. But that is never the case. None of the sensible, physical things man knows is simple in this absolute way, nor is any human production. They are all complex unities. You have not grasped a complex unity if all you know about it is how it is one. You must also know how it is many, not a many that consists of a lot of separate things, but an organized many. If the parts were not organically related, the whole that they composed would not be one. Strictly speaking, there would be no whole at all but merely a collection.\nThere is a difference between a heap of bricks, on the one hand, and the single house they can constitute, on the other. There is a difference between a single house and a collection of houses. A book is like a single house. It is a mansion having many rooms, rooms on different levels, of different sizes and shapes, with different outlooks, with different uses. The rooms are independent, in part. Each has its own structure and interior decoration. But they are not absolutely independent and separate. They are connected by doors and arches, by corridors and stairways, by what architects call a “traffic pattern.” Because they are connected, the partial function that each performs contributes its share to the usefulness of the whole house. Otherwise the house would not be livable.\nThe analogy is almost perfect. A good book, like a good house, is an orderly arrangement of parts. Each major part has a certain amount of independence. As we will see, it may have an interior structure of its own, and it may be decorated in a different way from other parts. But it must also be connected with the other parts—that is, related to them functionally—for otherwise it would not contribute its share to the intelligibility of the whole.\nAs houses are more or less livable, so books are more or less readable. The most readable book is an architectural achievement on the part of the author. The best books are those that have the most intelligible structure. Though they are usually more complex than poorer books, their greater complexity is also a greater simplicity, because their parts are better organized, more unified.\nThat is one of the reasons why the best books are also the most readable. Lesser works are really more bothersome to read. Yet to read them well—that is, as well as they can be read—you must try to find some plan in them. They would have been better books if their authors had themselves seen the plan a little more clearly. But if they hang together at all, if they are a complex unity to any degree and not mere collections, there must be a plan and you must find it.\n◇Of Plots and Plans: Stating the Unity of a Book # Let us return now to the second rule, which requires you to state the unity of a book. A few illustrations of the rule in operation may guide you in putting it into practice.\nLet us begin with a famous case. You probably read Homer’s Odyssey in school. If not, you must know the story of Odysseus, or Ulysses, as the Romans call him, the man who took ten years to return from the siege of Troy only to find his faithful wife Penelope herself besieged by suitors. It is an elaborate story as Homer tells it, full of exciting adventures on land and sea, replete with episodes of all sorts and many complications of plot. But it also has a single unity of action, a main thread of plot that ties everything together.\nAristotle, in his Poetics, insists that this is the mark of every good story, novel, or play. To support his point, he shows how the unity of the Odyssey can be summarized in a few sentences.\nA certain man is absent from home for many years; he is jealously watched by Poseidon, and left desolate. Meanwhile his home is in a wretched plight; suitors are wasting his substance and plotting against his son. At length, tempest-tossed, he himself arrives; he makes certain persons acquainted with him; he attacks the suitors with his own hand, and is himself preserved while he destroys them.\n“This,” says Aristotle, “is the essence of the plot; the rest is episode.”\nAfter you know the plot in this way, and through it the unity of the whole narrative, you can put the parts into their proper places. You might find it a good exercise to try this with some novels you have read. Try it on some good ones, such as Fielding’s Tom Jones or Dostoevsky’s Crime and Punishment or Joyce’s modem Ulysses. The plot of Tom Jones, for instance, can be reduced to the familiar formula: Boy meets girl, boy loses girl, boy gets girl. That, indeed, is the plot of every romance. To recognize this is to learn what it means to say that there are only a small number of plots in the world. The difference between good and bad stories having the same essential plot lies in what the author does with it, how he dresses up the bare bones.\nYou do not always have to find out the unity of a book all by yourself. The author often helps you. Sometimes, the title is all you have to read. In the eighteenth century, writers had the habit of composing elaborate titles that told the reader what the whole book was about. Here is a title by Jeremy Collier, an English divine who attacked what he considered to be the obscenity—we would say pornography, perhaps—of Restoration drama much more learnedly than is customary nowadays: A Short View of the Immorality and Profaneness of the English Stage, together with the Sense of Antiquity upon this Argument. You can guess from this that Collier recites many flagrant instances of the abuse of morals and that he supports his protest by quoting texts from those ancients who argued, as Plato did, that the stage corrupts youth, or, as the early Church fathers did, that plays are seductions of the flesh and the devil.\nSometimes the author tells you the unity of his plan in his preface. In this respect, expository books differ radically from fiction. A scientific or philosophical writer has no reason to keep you in suspense. In fact, the less suspense he keeps you in, the more likely you are to sustain the effort of reading him through. Like a newspaper article, an expository book may summarize itself in its first paragraph.\nDo not be too proud to accept the author’s help if he proffers it, but do not rely too completely on what he says in the preface, either. The best-laid plans of authors, like those of mice and other men, often go awry. Be guided by the prospectus the author gives you, but always remember that the obligation of finding the unity belongs finally to the reader, as much as the obligation of having one belongs to the writer. You can discharge that obligation honestly only by reading the whole book.\nThe introductory paragraph of Herodotus’ history of the war between the Greeks and the Persians provides an excellent summary of the whole. It runs:\nThese are the researches of Herodotus of Halicarnassus, which he publishes, in the hope of thereby preserving from decay the remembrance of what men have done, and of preventing the great and wonderful actions of the Greeks and the Barbarians from losing their due meed of glory; and withal to put on record what were their grounds of feud.\nThat is a good beginning for you as a reader. It tells you succinctly what the whole book is about.\nBut you had better not stop there. After you have read the nine parts of Herodotus’ history through, you will probably find it necessary to elaborate on that statement to do justice to the whole. You might want to mention the Persian kings—Cyrus, Darius, and Xerxes; the Greek heroes of the war—primarily Themistocles; and the major events—the crossing of the Hellespont and the decisive battles, notably Thermopylae and Salamis.\nAll the rest of the fascinating details, with which Herodotus richly prepares you for his climax, can be left out of your summary of the plot. Note, here, that the unity of a history is a single thread of plot, very much as in fiction. So far as unity is concerned, this rule of reading elicits the same kind of answer in history and in fiction.\nA few more illustrations may suffice. Let us take a practical book first. The unity of Aristotle’s Ethics can be stated thus:\nThis is an inquiry into the nature of human happiness and an analysis of the conditions under which happiness may be gained or lost, with an indication of what men must do in their conduct and thinking in order to become happy or to avoid unhappiness, the principal emphasis being placed on the cultivation of the virtues, both moral and intellectual, although other goods are also recognized as necessary for happiness, such as wealth, health, friends, and a just society in which to live.\nAnother practical book is Adam Smith’s The Wealth of Nations. Here the reader is aided by the author’s own statement of “the plan of the work” at the very beginning. But that takes several pages. The unity can be more briefly stated as follows:\nThis is an inquiry into the source of national wealth in any economy that is built on a division of labor, considering the relation of the wages paid labor, the profits returned to capital, and the rent owed the landowner, as the prime factors in the price of commodities. It discusses the various ways in which capital can be more or less gainfully employed, and relates the origin and use of money to the accumulation and employment of capital. Examining the development of opulence in different nations and under different conditions, it compares the several systems of political economy, and argues for the beneficence of free trade.\nIf a reader grasped the unity of The Wealth of Nations in this way, and did a similar job for Marx’s Das Kapital, he would be well on the way toward seeing the relation between two of the most influential books of the past two centuries.\nDarwin’s The Origin of Species provides us with a good example of the unity of a theoretical book in science. Here is a statement of it:\nThis is an account of the variation of living things during the course of countless generations and the way in which this results in new groupings of plants and animals; it treats both of the variability of domesticated animals and of variability under natural conditions, showing how such factors as the struggle for existence and natural selection operate to bring about and sustain such groupings; it argues that species are not fixed and immutable groups, but that they are merely varieties in transition from a less to a more marked and permanent status, supporting this argument by evidences from extinct animals found in the earth’s crust, and from comparative embryology and anatomy.\nThat may seem like a big mouthful, but the book was an even bigger one for a great many readers in the nineteenth century, partly because they did not go to the trouble of finding out what it was really about.\nFinally, let us take Locke’s Essay Concerning Human Understanding as a theoretical book in philosophy. You may recall our observing that Locke himself summarized his work by saying that it was “an inquiry into the origin, certainty and extent of human knowledge, together with the grounds and degrees of belief, opinion and assent.” We would not quarrel with so excellent a statement of plan by the author, except to add two subordinate qualifications to do justice to the first and third parts of the essay: it will be shown, we would add, that there are no innate ideas, but that all human knowledge is acquired from experience; and language will be discussed as a medium for the expression of thought, its proper use and most familiar abuses to be indicated.\nThere are two things we want you to note before we proceed. The first is how frequently you can expect the author, especially a good one, to help you to state the plan of his book. Despite that fact, most readers are at a total loss if you ask them to say briefly what the whole book is about. Partly this is owing to the widespread inability to speak concise English sentences. Partly it is owing to neglect of this rule in reading. But it also indicates that many readers pay as little attention to the author’s introductory words as they ordinarily do to his title.\nThe second point is a word of caution. Do not take the sample summaries we have given you as if they were, in each case, a final and absolute formulation of the book’s unity. A unity can be variously stated. There is no one right way to do it. One statement is better than another, of course, in proportion as it is brief, accurate, and comprehensive. But quite different statements may be equally good, or equally bad.\nWe have here sometimes stated the unity of a book quite differently from the author’s expression of it, and without apologies to him. You may differ similarly from us. After all, a book is something different to each reader. It would not be surprising if that difference expressed itself in the way the reader stated its unity. This does not mean, however, that anything goes. Though readers are different, the book is the same, and there can be an objective check upon the accuracy and fidelity of the statements anyone makes about it.\n◇Mastering the Multiplicity: The Art of Outlining a Book # Let us turn now to the other structural rule, the rule that requires us to set forth the major parts of the book in their order and relation. This third rule is closely related to the second. A well-stated unity indicates the major parts that compose the whole; you cannot comprehend a whole without somehow seeing its parts. But it is also true that unless you grasp the organization of its parts, you cannot know the whole comprehensively.\nWhy, then, make two rules here instead of one? It is primarily a matter of convenience. It is easier to grasp a complex and unified structure in two steps than in one. The second rule directs your attention toward the unity, the third toward the complexity, of a book. There is another reason for the separation. The major parts of a book may be seen at the moment when you grasp its unity. But these parts are themselves usually complex and have an interior structure you must see. Hence the third rule involves more than just an enumeration of the parts. It means outlining them, that is, treating the parts as if they were subordinate wholes, each with a unity and complexity of its own.\nA formula can be stated for operating according to this third rule. It will guide you in a general way. According to the second rule, we had to say: The whole book is about so and so and such and such. That done, we might obey the third rule by proceeding as follows: (1) The author accomplished this plan in five major parts, of which the first part is about so and so, the second part is about such and such, the third part is about this, the fourth part about that, and the fifth part about still another thing. (2) The first of these major parts is divided into three sections, of which the first considers X, the second considers Y, and the third considers Z. (3) In the first section of the first part, the author makes four points, of which the first is A, the second B, the third C, and the fourth D. And so on and so forth.\nYou may object to this much outlining. It would take a lifetime to read a book that way. But of course this is only a formula. The rule looks as if it required an impossible amount of work from you. In fact, the good reader does this sort of thing habitually, and hence easily and naturally. He may not write it all out He may not even at the time of reading have made it all verbally explicit But if he were called upon to give an account of the structure of the book, he would do something that approximated the formula we have described.\nThe word “approximation\u0026quot; should relieve your anxiety. A good rule always describes the ideal performance. But a person can be skilled in an art without being the ideal artist. He can be a good practitioner if he merely approximates the rule. We have stated the rule here for the ideal case. You should be satisfied if you make a very rough approximation to what is required.\nEven when you become more skilled, you will not want to read every book with the same degree of effort. You will not find it profitable to expend all your skill on some books. Even the best readers try to make a fairly close approximation to the requirements of this rule for only a relatively few books. For the most part, they are satisfied with a rough notion of the book’s structure. The degree of approximation varies with the character of the book and your purpose in reading it. Regardless of this variability, the rule remains the same. You must know how to follow it, whether you follow it closely or only in a rough fashion.\nYou should understand that the limitations on the degree to which you can approximate the rule are not only ones of time and effort. You are a finite, mortal creature; but a book is also finite and, if not mortal, at least defective in the way all things made by man are. No book deserves a perfect outline because no book is perfect. It goes only so far, and so must you. This rule, after all, does not call for your putting things into the book that the author did not put there. Your outline is of the book itself, not the subject matter that the book is about. Perhaps the outline of a subject matter could be extended indefinitely, but not your outline of the book, which gives the subject matter only more or less definitive treatment. Hence you should not feel that we are urging you merely to be lazy about following this rule. You could not follow it out to the bitter end even if you wanted to.\nThe forbidding aspect of the formula for setting forth the order and relation of the parts may be somewhat lessened by a few illustrations of the rule in operation. Unfortunately, it is more difficult to illustrate this rule than the other one about stating the unity. A unity, after all, can be stated in a sentence or two, at most a short paragraph. But in the case of a large and complex book, a careful and adequate outline of the parts, and their parts, and their parts down to the least structural unit that is comprehensible and worthwhile identifying, would take a great many pages to write out.\nTheoretically, the outline could be longer than the original. Some of the great medieval commentaries on the works of Aristotle are longer than the works they comment on. They include, of course, more than an outline, for they undertake to interpret the author sentence by sentence. The same is true of certain modem commentaries, such as the great ones on Kant’s Critique of Pure Reason. And a variorum edition of a Shakespeare play, which includes an exhaustive outline as well as other things, is many times as long—perhaps ten times as long—as the original. You might look into a commentary of this sort if ypu want to see the rule followed as close to perfection as man can do. Aquinas, for instance, begins each section of his commentary with a beautiful outline of the points that Aristotle has made in a particular part of his work; and he always says explicitly how that part fits the structure of the whole, especially in relation to the parts that come before and after.\nLet us take something easier than a treatise of Aristotle. Aristotle is probably the most compact of prose writers; you would expect that an outline of one of his works would be extensive and difficult. Let us also agree that, for the sake of the example, we will not carry the process out to the relative perfection that would be possible if we had a great number of pages available.\nThe United States Constitution is an interesting, practical document, and a very well-organized piece of writing. If you examine it, you should have no difficulty in finding its major parts. They are pretty clearly indicated, though you have to do some thinking to make the main divisions. Here is a suggested outline of the document:\nFIRST: The Preamble, setting forth the purpose(s) of the Constitution;\nSECOND: The first Article, dealing with the legislative department of the government;\nTHIRD: The second Article, dealing with the executive department of the government;\nFOURTH: The third Article, dealing with the judicial department of the government;\nFIFTH: The fourth Article, dealing with the relationship between the state governments and the federal government;\nSIXTH: The fifth, sixth, and seventh Articles, dealing with the amendment of the Constitution, its status as the supreme law of the land, and provisions for its ratifications;\nSEVENTH: The first ten amendments, constituting the Bill of Rights;\nEIGHTH: The remaining amendments up to the present day.\nThose are the major divisions. Now let us outline one of them, the Second, comprising the Constitution’s first Article. Like most of the other Articles, it is divided into Sections. Here is a suggested outline.\nII, 1: Section 1, establishing legislative powers in a Congress of the United States, divided into two bodies, a Senate and a House of Representatives;\nII, 2: Sections 2 and 3, respectively describing the composition of the House and Senate and stating the qualifications of members. In addition, it is stated that the House has the sole power of impeachment, while the Senate has the sole power of trying impeachments;\nII, 3: Sections 4 and 5, having to do with the election of members of both branches of Congress and with the internal organization and affairs of each;\nII, 4: Section 6, stating the perquisites and emoluments of members of both branches, and stating one limitation on civil employment of members;\nII, 5: Section 7, defining the relationship between the legislative and executive departments of the government and describing the President’s veto power;\nII, 6: Section 8, stating the powers of Congress;\nII, 7: Section 9, stating some limitations on the powers outlined in Section 8;\nII, 8: Section 10, stating limitations on the powers of the states and the extent to which they must give over certain powers to the Congress.\nWe could then proceed to make a similar outline of all the other major divisions, and, after completing that, return to outline the Sections in turn. Some of these, for example Section 8 in Article I, would require the identification of many different topics and subtopics.\nOf course, this is only one way of doing the job. There are many others. The first three Articles could be grouped together in one major division, for instance; or instead of two divisions with respect to the amendments, more major divisions could be introduced, grouping the amendments according to the problems they dealt with. We suggest that, you try your hand at making your own division of the Constitution into its main parts. Go even further than we did, and try to state the parts of the parts as well. You may have read the Constitution many times, but if you have not applied this rule before, you will find that it reveals much in the document that you never saw.\nHere is one more example, again very brief. We have already stated the unity of Aristotle’s Ethics. Now let us attempt a first approximation of its structure. The whole is divided into the following main parts: A first, treating of happiness as the end of life, and discussing it in relation to all other practicable goods; a second, treating of the nature of voluntary action, and its relation to the formation of good and bad habits; a third, discussing the various virtues and vices, both moral and intellectual; a fourth, dealing with moral states that are neither virtuous nor vicious; a fifth, treating of friendship; and a sixth and last, discussing pleasure, and completing the account of human happiness begun in the first.\nThese divisions obviously do not correspond to the ten books of the Ethics. Thus, the first part is accomplished in the first book; the second part runs through Book II and the first half of Book III; the third part extends from the rest of Book III through the end of Book VI; the discussion of pleasure occurs at the end of Book VII and again at the beginning of Book X.\nWe mention this to show you that you need not follow the apparent structure of a book as indicated by its chapter divisions. That structure may, of course, be better than the outline you develop, but it may also be worse; in any event, the point is to make your own outline. The author made his in order to write a good book. You must make yours in order to read it well. If he were a perfect writer and you a perfect reader, it would follow that the two would be the same. In proportion as either of you falls away from perfection, all sorts of discrepancies will inevitably result.\nThis does not mean that you should ignore chapter headings and sectional divisions made by the author; we did not ignore them in our analysis of the Constitution, although we did not slavishly follow them, either. They are intended to help you, just as titles and prefaces are. But you must use them as guides for your own activity, and not rely on them passively. There are few authors who execute their plan perfectly, but there is often more plan in a good book than meets the eye at first. The surface can be deceiving. You must look beneath it to discover the real structure.\nHow important is it to discover that real structure? We think very important. Another way of saying this is to say that Rule 2—the requirement that you state the unity of a book—cannot be effectively followed without obeying Rule 3—the requirement that you state the parts that make up that unity. You might, from a cursory glance at a book, be able to come up with an adequate statement of its unity in two or three sentences. But you would not really know that it was adequate. Someone else, who had read the book better, might know this, and award you high marks for your efforts. But for you, from your point of view, it would have been merely a good guess, a lucky hit. This is why the third rule is absolutely necessary as a complement to the second one.\nA very simple example will show what we mean. A two-year-old child, just having begun to talk, might say that “two plus two is four.” Objectively, this is a true statement; but we would be wrong to conclude from it that the child knew much mathematics. In fact, the child probably would not know what the statement meant, and so, although the statement by itself was adequate, we would have to say that the child still needed training in the subject. Similarly, you might be right in your guess about a book’s main theme or point, but you still need to go through the exercise of showing how and why you stated it as you did. The requirement that you outline the parts of a book, and show how they exemplify and develop the main theme, is thus supportive of your statement of the book’s unity.\n◇The Reciprocal Arts of Reading and Writing # In general, the two rules of reading that we have been discussing look as if they were rules of writing also. Of course they are. Writing and reading are reciprocal, as are teaching and being taught. If authors and teachers did not organize their communications, if they failed to unify them and order their parts, there would be no point in directing readers or listeners to search for the unity and uncover the structure of the whole.\nNevertheless, although the rules are reciprocal, they are not followed in the same way. The reader tries to uncover the skeleton that the book conceals. The author starts with the skeleton and tries to cover it up. His aim is to conceal the skeleton artistically or, in other words, to put flesh on the bare bones. If he is a good writer, he does not bury a puny skeleton under a mass of fat; on the other hand, neither should the flesh be too thin, so that the bones show through. If the flesh is thick enough, and if flabbiness is avoided, the joints will be detectible and the motion of the parts will reveal the articulation.\nWhy is this so? Why should not an expository book, one that attempts to present a body of knowledge in an ordered way, be merely an outline of the subject? The reason is not only that most readers cannot read outlines, and that such a book would be repellent to a self-respecting reader who thought that if he could do his job, the author ought to do his. There is more to it than that. The flesh of a book is as much a part of it as the skeleton. This is as true of books as it is of animals and human beings. The flesh—the outline spelled out, “read out,” as we sometimes say—adds an essential dimension. It adds life, in the case of the animal. Just so, actually writing the book from an outline, no matter how detailed, gives the work a kind of life that it would not otherwise have had.\nWe can summarize all of this by recalling the old-fashioned maxim that a piece of writing should have unity, clarity, and coherence. That is, indeed, a basic maxim of good writing. The two rules we have been discussing in this chapter relate to writing that follows that maxim. If the writing has unity, we must find it. If the writing has clarity and coherence, we must appreciate it by finding the distinction and the order of the parts. What is clear is so by the distinctness of its outlines. What is coherent hangs together in an orderly disposition of parts.\nThese two rules, therefore, can be used to distinguish well made books from badly made ones. If, after you have attained sufficient skill, no amount of effort on your part results in your apprehension of the unity of a book, and if you are also not able to discern its parts and their relation to one another, then very likely the book is a bad one, whatever its reputation. You should not be too quick to make this judgment; perhaps the fault is in you instead of the book. However, neither should you fail ever to make it and always assume that the fault is in you. In fact, whatever your own failings as a reader, the fault is usually in the book, for most books—the very great majority—are badly made books in the sense that their authors did not write them according to these rules.\nThese two rules can also, we might add, be used in reading any substantial part of an expository book, as well as the whole. If the part chosen is itself a relatively independent, complex unity, its unity and complexity must be discerned for it to be well read. Here there is a significant difference between books conveying knowledge and poetical works, plays, and novels. The parts of the former can be much more autonomous than the parts of the latter. The person who says of a novel that he has “read enough to get the idea” does not know what he is talking about. He cannot be correct, for if the novel is any good at all, the idea is in the whole and cannot be found short of reading the whole. But you can get the idea of Aristotle’s Ethics or Darwin’s Origin of Species by reading some parts carefully, although you would not, in that case, be able to observe Rule 3.\n◇Discovering the Author\u0026rsquo;s Intentions # There is one more rule of reading that we want to discuss in this chapter. It can be stated briefly. It needs little explanation and no illustration. It really repeats in another form what you have already done if you have applied the second and third rules. But it is a useful repetition because it throws the whole and its parts into another light.\nThis fourth rule can be stated thus: RULE 4. FIND OUT WHAT THE AUTHOR’S PROBLEMS WERE. The author of a book starts with a question or a set of questions. The book ostensibly contains the answer or answers.\nThe writer may or may not tell you what the questions were as well as give you the answers that are the fruits of his work. Whether he does or does not, and especially if he does not, it is your task as a reader to formulate the questions as precisely as you can. You should be able to state the main question that the book tries to answer, and you should be able to state the subordinate questions if the main question is complex and has many parts. You should not only have a fairly adequate grasp of all the questions involved but should also be able to put the questions in an intelligible order. Which are primary and which secondary? Which questions must be answered first, if others are to be answered later?\nYou can see how this rule duplicates, in a sense, work you have already done in stating the unity and finding its parts. It may, however, actually help you to do that work. In other words, following the fourth rule is a useful procedure in conjunction with obeying the other two.\nAnd since the rule is a little more unfamiliar than the other two, it may be even more helpful to you in tackling a difficult book. We want to emphasize, however, that we do not mean for you to fall into what is called by critics the intentional fallacy. That is the fallacy of thinking you can discover what was in an author’s mind from the book he has written. This applies particularly to literary works; it is a grave error, for example, to try to psychoanalyze Shakespeare from the evidence of Hamlet. Nevertheless, even with a poetical work, it is often extremely helpful to try to say what the author was trying to do. In the case of expository works, the rule has obvious merit. And yet most readers, no matter how skilled in other respects, very often fail to observe it. As a result, their conception of a book’s main point or theme may be extremely deficient, and of course their outline of its structure will be chaotic. They will fail to see the unity of a book because they do not see why it has the unity it has; and their apprehension of the book’s skeletal structure will lack comprehension of the end that it serves.\nIf you know the kinds of questions anyone can ask about anything, you will become adept in detecting an author’s problems. They can be formulated briefly: Does something exist? What kind of thing is it? What caused it to exist, or under what conditions can it exist, or why does it exist? What purpose does it serve? What are the consequences of its existence? What are its characteristic properties, its typical traits? What are its relations to other things of a similar sort, or of a different sort? How does it behave? These are all theoretical questions. What ends should be sought? What means should be chosen to a given end? What things must one do to gain a certain objective, and in what order? Under these conditions, what is the right thing to do, or the better rather than the worse? Under what conditions would it be better to do this rather than that? These are all practical questions.\nThis list of questions is far from being exhaustive, but it does represent the types of most frequently asked questions in the pursuit of theoretical or practical knowledge. It may help you discover the problems a book has tried to solve. The questions have to be adapted when applied to works of imaginative literature, and there too they will be useful.\n◇The First Stage of Analytical Reading # We have now stated and explained the first four rules of reading. They are rules of analytical reading, although if you inspect a book well before reading it, that will help you to apply them.\nIt is important at this point to recognize that these first four rules are connected and form a group of rules having a single aim. Together, they provide the reader who applies them with a knowledge of a book’s structure. When you have applied them to a book, or indeed to anything fairly lengthy and difficult that you may be reading, you will have accomplished the first stage of reading it analytically.\nYou should not take the term “stage” in a chronological sense, unless perhaps at the very beginning of your exercise as an analytical reader. That is, it is not necessary to read a book through in order to apply the first four rules, then to read it again and again in order to apply the other rules. The practiced reader accomplishes all of these stages at once. Nevertheless, you must realize that knowing a book’s structure does constitute a stage toward reading it analytically.\nAnother way to say this is that applying these first four rules helps you to answer the first basic question about a book. You will recall that that first question is: What is the book about as a whole? You will also recall that we said that this means discovering the leading theme of the book, and how the author develops this theme in an orderly way by subdividing it into its essential subordinate themes or topics. Clearly, applying the first four rules of reading will provide most of what you need to know in order to answer this question—although it should be pointed out that your answer will improve in accuracy as you proceed to apply the other rules and to answer the other questions.\nSince we have now described the first stage of analytical reading, let us pause a moment to write out the first four rules in order, under the appropriate heading, for review.\nThe First Stage of Analytical Reading, or Rules for Finding What a Book Is About Classify the book according to kind and subject matter.\nState what the whole book is about with the utmost brevity.\nEnumerate its major parts in their order and relation, and outline these parts as you have outlined the whole.\nDefine the problem or problems the author is trying to solve.\n★8 COMING TO TERMS WITH AN AUTHOR # The first stage of analytical reading has been accomplished when you have applied the four rules listed at the end of the last chapter, which together allow you to tell what a book is about and to outline its structure. You are now ready to go on to the next stage, which also comprises four rules of reading. The first of these we call, for short, coming to terms.\nComing to terms is usually the last step in any successful business negotiation. All that remains is to sign on the dotted line. But in the analytical reading of a book, coming to terms is the first step beyond the outline. Unless the reader comes to terms with the author, the communication of knowledge from one to the other does not take place. For a term is the basic element of communicable knowledge.\n◇Words vs. Terms # A term is not a word—at least, not just a word without further qualifications. If a term and a word were exactly the same, you would only have to find the important words in a book in order to come to terms with it. But a word can have many meanings, especially an important word. If the author uses a word in one meaning, and the reader reads it in another, words have passed between them, but they have not come to terms. Where there is unresolved ambiguity in communication, there is no communication, or at best communication must be incomplete.\nJust look at the word “communication” for a moment. Its root is related to the word “common.” We speak of a community as a group of people who have something in common. Communication is an effort on the part of one person to share something with another person (or with an animal or a machine): his knowledge, his decisions, his sentiments. It succeeds only when it results in a common something, such as an item of information or knowledge that two parties share.\nWhen there is ambiguity in the communication of knowledge, all that is in common are the words that one person speaks or writes and another hears or reads. So long as ambiguity persists, there is no meaning in common between writer and reader. For the communication to be successfully completed, therefore, it is necessary for the two parties to use the same words with the same meanings—ia short, to come to terms. When that happens, communication happens, the miracle of two minds with but a single thought.\nA term can be defined as an unambiguous word. That is not quite accurate, for strictly there are no unambiguous words. What we should have said is that a term is a word used unambiguously. The dictionary is full of words. They are almost all ambiguous in the sense that they have many meanings. But a word that has several meanings can be used in one sense at a time. When writer and reader somehow manage for a time to use a given word with one and only one meaning, then, during that time of unambiguous usage, they have come to terms.\nYou cannot find terms in dictionaries, though the materials for making them are there. Terms occur only in the process of communication. They occur when a writer tries to avoid ambiguity and a reader helps him by trying to follow his use of words. There are, of course, many degrees of success in this. Coming to terms is the ideal toward which writer and reader should strive. Since this is one of the primary achievements of the art of writing and reading, we can think of terms as a skilled use of words for the sake of communicating knowledge.\nAt this point it is probably clear that we are speaking exclusively of expository writers and expository books. Poetry and fiction are not nearly so concerned with the unambiguous use of words as expository works—works that convey knowledge in the broad sense of the word that we have been employing. It can even be argued that the best poetry is that which is the most richly ambiguous, and it has been said with justice that any good poet is sometimes intentionally ambiguous in his writing. This is an important insight about poetry to which we will return later. It is obviously one of the primary differences between the poetical and the expository or scientific realms of literary art.\nWe are now ready to state the fifth rule of reading (an expository work). Stated roughly, it is this: You must spot the important words in a book and figure out how the author is using them. But we can make that a little more precise and elegant: RULE 5. FIND THE IMPORTANT WORDS AND THROUGH THEM COME TO TERMS WITH THE AUTHOR. Note that the rule has two parts. The first part is to locate the important words, the words that make a difference. The second part is to determine the meaning of these words, as used, with precision.\nThis is the first rule for the second stage of analytical reading, the aim of which is not the outlining of a book’s structure but the interpretation of its contents or message. The other rules for this stage, to be discussed in the next chapter, are like this one in an important respect. They also require you to take two steps: a step dealing with the language as such, and a step beyond the language to the thought that lies behind it.\nIf language were a pure and perfect medium for thought, these steps would not be separate. If every word had only one meaning, if words could not be used ambiguously, if, in short, each word was an ideal term, language would be a diaphanous medium. The reader would see straight through the writer’s words to the content of his mind. If that were the case, there would be no need at all for this second stage of analytical reading. Interpretation would be unnecessary.\nBut of course that is far from the case. There is no use crying about it, no use making up impossible schemes for an ideal language, as the philosopher Leibniz and some of his followers have tried to do. Indeed, if they succeeded, there would be no more poetry. The only thing to do, therefore, in expository works, is to make the best of language as it is, and the only way to do that is to use language as skillfully as possible when you want to convey, or to receive, knowledge.\nBecause language is imperfect as a medium for conveying knowledge, it also functions as an obstacle to communication. The rules of interpretive reading are directed to overcoming that obstacle. We can expect a good writer to do his best to reach us through the barrier language inevitably sets up, but we cannot expect him to do the job all by himself. We must meet him halfway. We, as readers, must try to tunnel through from our side of the barrier. The likelihood of a meeting of minds through language depends on the willingness of both reader and writer to work together. Just as teaching will not avail unless there is a reciprocal activity of being taught, so no author, regardless of his skill in writing, can achieve communication without a reciprocal skill on the part of readers. If that were not so, the diverse skills of writing and reading would not bring minds together, however much effort was expended, any more than the men who tunnel through from opposite sides of a mountain would ever meet unless they made their calculations according to the same principles of engineering.\nAs we have pointed out, each of the rules of interpretive reading involves two steps. To get technical for a moment, we may say that these rules have a grammatical and a logical aspect. The grammatical aspect is the one that deals with words. The logical step deals with their meanings or, more precisely, with terms. So far as communication is concerned, both steps are indispensable. If language is used without thought, nothing is being communicated. And thought or knowledge cannot be communicated without language. As arts, grammar and logic are concerned with language in relation to thought and thought in relation to language. That is why skill in both reading and writing is gained through these arts.\nThis business of language and thought—especially the distinction between words and terms—is so important that we are going to risk being repetitious to be sure the main point is understood. The main point is that one word can be the vehicle for many terms, and one term can be expressed by many words. Let us illustrate this schematically in the following manner. The word “reading” has been used in many senses in the course of our discussion. Let us take three of these senses: By the word “reading” we may mean (1) reading to be entertained, (2) reading to get information, and (3) reading to achieve understanding.\nNow let us symbolize the word “reading” by the letter X, and the three meanings by the letters a, b, and c. What is symbolized in this scheme by Xa, Xb, and Xc, are not three words, for X remains the same throughout. But they are three terms, on the condition, of course, that you, as reader, and we, as writers know when X is being used in one sense and not another. If we write Xa in a given place, and you read Xb, we are writing and you are reading the same word, but not in the same way. The ambiguity prevents or at least impedes communication. Only when you think the word as we think it, do we have one thought between us. Our minds cannot meet in X, but only in Xa or Xb or Xc. Thus we come to terms.\n◇Finding the Key Words # We are now prepared to put flesh on the rule that requires the reader to come to terms. How does he go about doing it? How does he find the important or key words in a book?\n","date":"2 June 2025","externalUrl":null,"permalink":"/posts/reading-1-how_to_read_a_book/","section":"Blog","summary":"First published in 1940 and immediately a bestseller, this book was revised and expanded in 1972. Its enduring relevance makes it well worth recommending even today.","title":"How to Read a Book 1972 Edition","type":"posts"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/categories/popular-science/","section":"Categories","summary":"","title":"Popular Science","type":"categories"},{"content":" For ease of reading, the directory of this series of posts is organized as follows:\nHow to Read a Book 1972 Edition ☍ BY MORTIMER J. ADLER AND CHARLES VAN DOREN Tao Te Ching ☍ BY Laozi (/ˈlaʊdzə/) ","date":"1 June 2025","externalUrl":null,"permalink":"/posts/reading-0-overview/","section":"Blog","summary":"","title":"Book Log Overview","type":"posts"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/series/master-python/","section":"Series","summary":"","title":"Master Python","type":"series"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":" 1. variables ❎ # A container for a value (string, integer, float, boolean)\nA variable behaves as if it was the value it contains\n# Strings first_name = \u0026#34;Bro\u0026#34; food = \u0026#34;pizza\u0026#34; email = \u0026#34;Bro123@gmail.com\u0026#34; print(f\u0026#34;Hello {first_name}\u0026#34;) print(f\u0026#34;You like {food}\u0026#34;) print(f\u0026#34;Your email is: {email}\u0026#34;) # Integers age = 25 quantity = 3 num_of_students =30 print(f\u0026#34;You are {age} years old\u0026#34;) print(f\u0026#34;You are buying {quantity} items\u0026#34;) print(f\u0026#34;You class has {num_of_students} students\u0026#34;) # Float price = 10.99 gpa = 3.2 distance = 5.5 print(f\u0026#34;The price is ${price}\u0026#34;) print(f\u0026#34;Your gpa is: {gpa}\u0026#34;) print(f\u0026#34;You ran {distance}km\u0026#34;) # Boolean is_student = False for_sale = False is_online = True if is_online: print(\u0026#34;You are online\u0026#34;) else: print(\u0026#34;You are offline\u0026#34;) Variable assignments\nuser_name = \u0026#34;Yuuniji\u0026#34; year = 2025 pi = 3.14 is_admin = True print(f\u0026#34;User Name: {user_name}\u0026#34;) print(f\u0026#34;Current Year: {year}\u0026#34;) # Round to two decimal places print(f\u0026#34;Pi: {pi:.2f}\u0026#34;) # Convert boolean to \u0026#39;Yes\u0026#39; or \u0026#39;No\u0026#39; print(f\u0026#34;Admin Status: {\u0026#39;Yes\u0026#39; if is_admin else \u0026#39;No\u0026#39;}\u0026#34;) 2. type casting 💱 # Typecasting = the process of converting a variable from one data type to another\nstr(), int(), float(), bool()\nname = \u0026#34;Yuuniji\u0026#34; age = 25 gpa = 3.2 is_student = True # print(type(name)) gpa = int(gpa) # 3 age = float(age) # 25.0 age = str(age) age += \u0026#34;1\u0026#34; # \u0026#34;251\u0026#34; name = bool(name) # True 3. user input ⌨️ # A function that prompts the user to enter data\nReturns the entered data as a string\nname = input(\u0026#34;What is your name?: \u0026#34;) age = int(input(\u0026#34;How old are you?: \u0026#34;)) # age = int(age) age = age + 1 print(f\u0026#34;Hello {name}!\u0026#34;) print(\u0026#34;HAPPY BIRTHDAY\u0026#34;) print(f\u0026#34;You are {age} years old\u0026#34;) Exercise 1 Rectangle Area Calc\nlength = float(intput(\u0026#34;Enter the length: \u0026#34;)) width = float(intput(\u0026#34;Enter the width: \u0026#34;)) area = length * width print(f\u0026#34;The area is: {area}cm²\u0026#34;) #Mac superscript 2: Command + Control + Space, In the search bar, type “superscript” or “2”.Or Option + v Exercise 2 Shopping Cart Program\nitem = input(\u0026#34;What item would you like to buy?: \u0026#34;) price = float(input(\u0026#34;What is the price?: \u0026#34;)) quantity = int(input(\u0026#34;How many would you like?: \u0026#34;)) total = price * quantity print(f\u0026#34;You have bought {quantity} x {item}/s\u0026#34;) print(f\u0026#34;Your total is: ${total}\u0026#34;) 4. ⭐ madlibs game # word game where you create a story\nby filling in blanks with random words\nadjective1 = input(\u0026#34;Enter an adjective (description): \u0026#34;) noun1 = input(\u0026#34;Enter a noun (person, place, thing): \u0026#34;) adjective2 = input(\u0026#34;Enter an adjective (description): \u0026#34;) verb1 = input(\u0026#34;Enter a verb ending with \u0026#39;ing\u0026#39;\u0026#34;) adjective3 = input(\u0026#34;Enter an adjective (description): \u0026#34;) print(f\u0026#34;Today I went to a {adjective1} zoo.\u0026#34;) print(f\u0026#34;In an exhibit, I saw a {noun1}\u0026#34;) print(f\u0026#34;{noun1} was {adjective2} and {verb1}\u0026#34;) print(f\u0026#34;I was {adjective3}!\u0026#34;) 5. arithmetic operators \u0026amp; math functions 📐 # friends = 10 friends = friends + 1 friends += 1 friends = friends - 2 friends -= 2 friends = friends * 3 friends *= 3 friends = friends / 2 friends /= 2 friends = friends ** 2 friends **= 2 remainder = friends % 3 x = 3.14 y = 4 z = 5 result = round(x) # 3 result = abs(y) # 4 result = pow(4, 3) # 4*4*4=64 result = max(x, y, z) # 5 result = min(x, y, z) # 3.14 import math x = 9 y = 9.1 z = 9.9 print(math.pi) # 3.141592653589793 print(math.e) # 2.718281828459045 result = math.sqrt(x) # 3.0 result = math.ceil(y) # 10 result = math.floor(z) # 9 # C = 2πr import math radius = float(input(\u0026#39;Enter the radius of a circle: \u0026#39;)) # 10.5 circumference = 2 * math.pi *radius print(f\u0026#34;The circumference is: {round(circumference, 2)}cm\u0026#34;) # 65.97 # A = πr² import math radius = float(input(\u0026#39;Enter the radius of a circle: \u0026#39;)) # 10.5 area = math.pi * pow(radius, 2) print(f\u0026#34;The area of the circle is: {round(area, 2)}cm²\u0026#34;) # 346.36 # c = √(a²+b²) import math a = float(input(\u0026#34;Enter side A: \u0026#34;)) # 3 b = float(input(\u0026#34;Enter side B: \u0026#34;)) # 4 c = math.sqrt(pow(a, 2) + pow(b, 2)) print(f\u0026#34;Side C = {c}\u0026#34;) # 5.0 6. if statements 🤔 # Do some code only IF some condition is True\nElse do something else\nage = int(input(\u0026#34;Enter your age: \u0026#34;)) if age \u0026gt;= 100: print(\u0026#34;You are too old to sign up\u0026#34;) elif age \u0026gt;= 18: print(\u0026#34;You are now signed up!\u0026#34;) elif age \u0026lt; 0: print(\u0026#34;You haven\u0026#39;t been born yet!\u0026#34;) else: print(\u0026#34;You must be 18+ to sign up\u0026#34;) resopnse = input(\u0026#34;Would you like food? (Y/N): \u0026#34;) if resopnse == \u0026#34;Y\u0026#34;: print(\u0026#34;Have some food!\u0026#34;) else: print(\u0026#34;No food for you!\u0026#34;) name = inptut(\u0026#34;Enter your name: \u0026#34;) if name === \u0026#34;\u0026#34;: print(\u0026#34;You did not type in your name!\u0026#34;) else: print(f\u0026#34;Hello {name}\u0026#34;) for_sale = True if for_sale: print(\u0026#34;This item is for sale\u0026#34;) else: print(\u0026#34;This item is NOT for sale\u0026#34;) 7. ⭐ calculator program 🧮 # # + = addition # - = subtraction # * = multiplication # / = division operator = input(\u0026#34;Enter an operator (+ - * /)\u0026#34;) num1 = float(input(\u0026#34;Enter the 1st number: \u0026#34;)) num2 = float(input(\u0026#34;Enter the 2nd number: \u0026#34;)) if operator == \u0026#34;+\u0026#34;: result =num1 + num2 print(round(result, 3)) elif operator == \u0026#34;-\u0026#34;: result =num1 - num2 print(round(result, 3)) elif operator == \u0026#34;*\u0026#34;: result =num1 * num2 print(round(result, 3)) elif operator == \u0026#34;/\u0026#34;: result =num1 / num2 print(round(result, 3)) else: print(f\u0026#34;{operator} is not a valid operator\u0026#34;) 8. ⭐ weight conversion program 🏋️ # weight = float(input(\u0026#34;Enter your weight\u0026#34;)) unit = input(\u0026#34;Kilograms or Pounds? (K or L): \u0026#34;) if unit == \u0026#34;K\u0026#34;: weight = weight * 2.205 unit = \u0026#34;Lbs.\u0026#34; print(f\u0026#34;Your weight is: {round(weight, 1)} {unit}\u0026#34;) elif unit == \u0026#34;L\u0026#34;: weight = weight / 2.205 unit = \u0026#34;Kgs.\u0026#34; print(f\u0026#34;Your weight is: {round(weight, 1)} {unit}\u0026#34;) else: print(f\u0026#34;{unit} was not valid\u0026#34;) 9. ⭐ temperature conversion program 🌡️ # # (°C x 9/5) + 32 = °F # (°F - 32) x 5/9 = °C # °(Option + Shift + 8) unit = input(\u0026#34;Is this temperature in Celsius or Fahrenheit (C/F): \u0026#34;) temp = float(input(\u0026#34;Enter the temperature: \u0026#34;)) if unit == \u0026#34;C\u0026#34;: temp = round((9 * temp) / 5 + 32, 1) print(f\u0026#34;The temperature in Fahrenheit is: {temp}°F\u0026#34;) elif unit == \u0026#34;F\u0026#34;: temp = round((temp - 32) * 5 / 9, 1) print(f\u0026#34;The temperature in Celsius is: {temp}°C\u0026#34;) else: print(f\u0026#34;{unit} is an invalid unit of measurement\u0026#34;) 10. logical operators 🌦️ # evaluate multiple conditions (or, and, not)\nor = at least one condition must be True\nand = both conditions must be True\nnot = inverts the condition (not False, not True)\ntemp = 25 is_raining = True if temp \u0026gt; 35 or temp \u0026lt; 0 or is_raining: print(\u0026#34;The outdoor event is cancelled\u0026#34;) else: print(\u0026#34;The outdoor event is still scheduled\u0026#34;) temp = 25 is_sunny = True if temp \u0026gt;= 28 and is_sunny: print(\u0026#34;It is HOT outside 🥵\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif temp \u0026lt;= 0 and is_sunny: print(\u0026#34;It is COLD outside 🥶\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif 28 \u0026gt; temp \u0026gt; 0 and is_sunny: print(\u0026#34;It is WARM outside 🙂\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif temp \u0026gt;= 28 and not is_sunny: print(\u0026#34;It is HOT outside 🥵\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) elif temp \u0026lt;= 0 and not is_sunny: print(\u0026#34;It is COLD outside 🥶\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) elif 28 \u0026gt; temp \u0026gt; 0 and not is_sunny: print(\u0026#34;It is WARM outside 🙂\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) 11. conditional expressions ❓ # A one-line shortcut for the if-else statement (ternary operator)\nPrint or assign one of two values based on a condition\nX if condition else Y\nnum = 5 a = 6 b = 7 age = 13 temperature = 20 user_role = \u0026#34;guest\u0026#34; print(\u0026#34;Positive\u0026#34; if num \u0026gt; 0 else \u0026#34;Negative\u0026#34;) result = \u0026#34;EVEN\u0026#34; if num % 2 == 0 else \u0026#34;ODD\u0026#34; max_num = a if a \u0026gt; b else b min_num = a if a \u0026lt; b else b status = \u0026#34;Adult\u0026#34; if age \u0026gt;= 18 else \u0026#34;Child\u0026#34; weather = \u0026#34;HOT\u0026#34; if temperature \u0026gt; 20 else \u0026#34;COLD\u0026#34; access_level = \u0026#34;Full Access\u0026#34; if user_role == \u0026#34;admin\u0026#34; else \u0026#34;Limited Access\u0026#34; print(access_level) 12. string methods 〰️ # name = input(\u0026#34;Enter your full name: \u0026#34;) result = len(name) # yuunijiy -\u0026gt; 8 result = name.find(\u0026#34;n\u0026#34;) # yuunijiy -\u0026gt; 3 result = name.rfind(\u0026#34;n\u0026#34;) # yuunijiy -\u0026gt; 4 name = name.capitalize() # yuunijiy -\u0026gt; Yuunijiy name = name.upper() # yuunijiy -\u0026gt; YUUNIJIY name = name.lower() # YUUNIJIY -\u0026gt; yuunijiy result = name.isdigit() # yuunijiy,yuu123 -\u0026gt; False; 123 -\u0026gt; True result = name.isalpha() # yuunijiy -\u0026gt; True; yuu niji,yuu123,123 -\u0026gt; False phone_number = input(\u0026#34;Enter your phone #: \u0026#34;) result = phone_number.count(\u0026#34;-\u0026#34;) # 1-234-567-8901 -\u0026gt; 3 phone_number = phone_number.replace(\u0026#34;-\u0026#34;, \u0026#34; \u0026#34;) # 1-234-567-8901 -\u0026gt; 1 234 567 8901 If you want a complete list of all available string methods, use the help function:print(help(str))\nExercise:\n# validate user input exercise # 1. username is no more than 12 characters # 2. username must not contain spaces # 3. username must not contain digits username = input(\u0026#34;Enter a username: \u0026#34;) if len(username) \u0026gt; 12: print(\u0026#34;Your username can\u0026#39;t be more than 12 characters\u0026#34;) elif not username.find(\u0026#34; \u0026#34;) == -1: print(\u0026#34;Your username can\u0026#39;t contain spaces\u0026#34;) elif not username.isalpha(): print(\u0026#34;Your username can\u0026#39;t contain digits\u0026#34;) else: print(f\u0026#34;Welcome {username}\u0026#34;) 13. string indexing ✂️ # accessing elements of a sequence using [] (indexing operator)\n[start : end : step]\ncredit_number = \u0026#34;1234-5678-9012-3456\u0026#34; print(credit_number[0]) # 1 print(credit_number[:4]) # 1234 print(credit_number[5:9]) # 5678 print(credit_number[5:]) # 5678-9012-3456 print(credit_number[-1]) # 6 print(credit_number[-2]) # 5 print(credit_number[::2]) # 13-6891-46 print(credit_number[::3]) # 146-136 credit_number = \u0026#34;1234-5678-9012-3456\u0026#34; last_digits = credit_number[-4:] # 3456 print(f\u0026#34;XXXX-XXXX-XXXX-{last_digits}\u0026#34;) credit_number = \u0026#34;1234-5678-9012-3456\u0026#34; credit_number = credit_number[::-1] print(credit_number) # 6543-2109-8765-4321 14. format specifiers 💬 # {value:flags} format a value based on what\nflags are inserted\n.(number)f = round to that many decimal places (fixed point) :(number) = allocate that many spaces :03 = allocate and zero pad that many spaces :\u0026lt; = left justify :\u0026gt; = right justify :^ = center justify :+ = use a plus sign to indicate positive value := = place sign to leftmost position : = insert a space before positive numbers :, = comma separator price1 = 3.14159 price2 = -987.65 price3 = 12.34 print(f\u0026#34;Price 1 is ${price1:.3f}\u0026#34;) # 3.142 print(f\u0026#34;Price 2 is ${price2:.3f}\u0026#34;) # -987.650 print(f\u0026#34;Price 3 is ${price3:.3f}\u0026#34;) # 12.340 print(f\u0026#34;Price 1 is ${price1:10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:10}\u0026#34;) # Price 1 is $ 3.14159 # Price 2 is $ -987.65 # Price 3 is $ 12.34 print(f\u0026#34;Price 1 is ${price1:010}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:010}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:010}\u0026#34;) # Price 1 is $0003.14159 # Price 2 is $-000987.65 # Price 3 is $0000012.34 print(f\u0026#34;Price 1 is ${price1:\u0026lt;10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:\u0026lt;10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:\u0026lt;10}\u0026#34;) # Price 1 is $3.14159 | # Price 2 is $-987.65 | # Price 3 is $12.34 | print(f\u0026#34;Price 1 is ${price1:+}\u0026#34;) # +3.14159 print(f\u0026#34;Price 2 is ${price2:+}\u0026#34;) # -987.65 print(f\u0026#34;Price 3 is ${price3:+}\u0026#34;) # +12.34 print(f\u0026#34;Price 1 is ${price1:10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:10}\u0026#34;) # Price 1 is $ 3.14159 # Price 2 is $-987.65 # Price 3 is $ 12.34 price1 = 3000.14159 price2 = -9870.65 price3 = 1200.34 print(f\u0026#34;Price 1 is ${price1:,}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:,}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:,}\u0026#34;) # Price 1 is $3,000.14159 # Price 2 is $-9,870.65 # Price 3 is $1,200.34 print(f\u0026#34;Price 1 is ${price1:+,.2f}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:+,.2f}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:+,.2f}\u0026#34;) # Price 1 is $+3,000.14 # Price 2 is $-9,870.65 # Price 3 is $+1,200.34 15. while loops ♾️ # execute some code WHILE some condition remains true\nage = int(input(\u0026#34;Enter your age: \u0026#34;)) while age \u0026lt; 0: print(\u0026#34;Age can\u0026#39;t be negative\u0026#34;) age = int(input(\u0026#34;Enter your age: \u0026#34;)) print(f\u0026#34;You are {age} years old\u0026#34;) food = input(\u0026#34;Enter a food you like (q to quit): \u0026#34;) while not food == \u0026#34;q\u0026#34;: print(f\u0026#34;You like {food}\u0026#34;) food = input(\u0026#34;Enter another food you like (q to quit): \u0026#34;) print(\u0026#34;bye\u0026#34;) num = int(input(\u0026#34;Enter a # between 1 - 10: \u0026#34;)) while num \u0026lt; 1 or num \u0026gt; 10: print(f\u0026#34;{num} is not valid\u0026#34;) num = int(input(\u0026#34;Enter a # between 1 - 10: \u0026#34;)) print(f\u0026#34;Your number is {num}\u0026#34;) 16. ⭐ compound interest calculator 💵 # # A = P (1 + r/n)ᵗ # A = final amount # P = initial principal balance # r = interest rate # t = number of time periods elapsed principle = 0 rate = 0 time = 0 while principle \u0026lt;= 0: principle = float(input(\u0026#34;Enter the principle aount: \u0026#34;)) if principle \u0026lt;= 0: print(\u0026#34;Principle can\u0026#39;t be less than or equal to zero\u0026#34;) while rate \u0026lt;= 0: rate = float(input(\u0026#34;Enter the interest rate: \u0026#34;)) if rate \u0026lt;= 0: print(\u0026#34;Interest rate can\u0026#39;t be less than or equal to zero\u0026#34;) while time \u0026lt;= 0: time = int(input(\u0026#34;Enter the time in years: \u0026#34;)) if time \u0026lt;= 0: print(\u0026#34;Time can\u0026#39;t be less than or equal to zero\u0026#34;) print(principle) print(rate) print(time) total = principle * pow((1 + rate / 100), time) print(f\u0026#34;Balance after {time} year/s: ${total:.2f}\u0026#34;) principle = 0 rate = 0 time = 0 while True: principle = float(input(\u0026#34;Enter the principle aount: \u0026#34;)) if principle \u0026lt; 0: print(\u0026#34;Principle can\u0026#39;t be less than zero\u0026#34;) else: break while True: rate = float(input(\u0026#34;Enter the interest rate: \u0026#34;)) if rate \u0026lt; 0: print(\u0026#34;Interest rate can\u0026#39;t be less than zero\u0026#34;) else: break while True: time = int(input(\u0026#34;Enter the time in years: \u0026#34;)) if time \u0026lt; 0: print(\u0026#34;Time can\u0026#39;t be less than zero\u0026#34;) else: break total = principle * pow((1 + rate / 100), time) print(f\u0026#34;Balance after {time} year/s: ${total:.2f}\u0026#34;) 17. for loops 🔁 # execute a block of code a fixed number of times.\nYou can iterate over a range, string, sequence, etc.\nfor x in range(1, 6): print(x) # 1 # 2 # 3 # 4 # 5 for x in reversed(range(1, 6)): print(x) print(\u0026#34;HAPPY NEW YEAR!\u0026#34;) # 1 # 2 # 3 # 4 # 5 # HAPPY NEW YEAR! for x in range(1, 6, 3): print(x) # 1 # 4 credit_card = \u0026#34;12-34\u0026#34; for x in credit_card: print(x) # 1 # 2 # - # 3 # 4 for x in range(1, 6): if x == 3: continue else: print(x) # 1 # 2 # 4 # 5 for x in range(1, 6): if x == 3: break else: print(x) # 1 # 2 18. ⭐ countdown timer program ⌛ # import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3 for x in range(0, my_time): print(x) time.sleep(1) # 0 # 1 # 2 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3 for x in range(my_time, 0, -1): print(x) time.sleep(1) # 3 # 2 # 1 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3605 for x in range(my_time, 0, -1): seconds = x % 60 minutes = int(x / 60) % 60 hours = int(x / 3600) print(f\u0026#34;{hours:02}:{minutes:02}:{seconds:02}\u0026#34;) time.sleep(1) # 01:00:05 # 01:00:04 # 01:00:03 # 01:00:02 # 01:00:01 # 01:00:00 # 00:59:59 # 00:59:58 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) 19. nested loops ➿ # A loop within another loop (outer, inner)\nouter loop: inner loop: for x in range(1, 10): print(x, end=\u0026#34;\u0026#34;) # 123456789 for x in range(3): for y in range(1, 10): print(y, end=\u0026#34;\u0026#34;) # 123456789123456789123456789 for x in range(3): for y in range(1, 10): print(y, end=\u0026#34;\u0026#34;) print() # 123456789 # 123456789 # 123456789 rows = int(input(\u0026#34;Enter the # of rows: \u0026#34;)) # 3 columns = int(input(\u0026#34;Enter the # of rows: \u0026#34;)) # 5 symbol = input(\u0026#34;Enter a symbol to use: \u0026#34;) # * for x in range(rows): for y in range(columns): print(symbol, end=\u0026#34;\u0026#34;) print() # ***** # ***** # ***** 20. lists, sets, and tuples 🍎 # collection = single \u0026ldquo;variable\u0026rdquo; used to store multiple values List = [] ordered and changeable. Duplicates OK Set = {} unordered and immutable, but Add/Remove OK. NO duplicates Tuple = () ordered and unchangeable. Duplicates OK. FASTER fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] # print(help(fruits)) print(dir(fruits)) # [\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__iadd__\u0026#39;, \u0026#39;__imul__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__reversed__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;append\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;extend\u0026#39;, \u0026#39;index\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;reverse\u0026#39;, \u0026#39;sort\u0026#39;] print(\u0026#34;apple\u0026#34; in fruits) # True print(fruits[0]) # apple print(fruits[0:3]) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;] print(fruits[::2]) # [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;] print(fruits[::-1]) # [\u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.append(\u0026#34;pineapple\u0026#34;) # fruits.remove(\u0026#34;pineapple\u0026#34;) print(fruits) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.insert(0, \u0026#34;pineapple\u0026#34;) print(fruits) # [\u0026#34;pineapple\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.sort() print(fruits) # [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;orange\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.reverse() print(fruits) # [\u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.sort() fruits.reverse() print(fruits) # [\u0026#34;orange\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.clear() print(fruits) # [] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] print(fruits.index(\u0026#34;apple\u0026#34;)) # 0 fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;} print(len(fruits)) # 4 print(dir(fruits)) # [\u0026#39;__and__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__iand__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__ixor__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__or__\u0026#39;, \u0026#39;__rand__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__ror__\u0026#39;, \u0026#39;__rxor__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__xor__\u0026#39;, \u0026#39;add\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;difference\u0026#39;, \u0026#39;difference_update\u0026#39;, \u0026#39;discard\u0026#39;, \u0026#39;intersection\u0026#39;, \u0026#39;intersection_update\u0026#39;, \u0026#39;isdisjoint\u0026#39;, \u0026#39;issubset\u0026#39;, \u0026#39;issuperset\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;symmetric_difference\u0026#39;, \u0026#39;symmetric_difference_update\u0026#39;, \u0026#39;union\u0026#39;, \u0026#39;update\u0026#39;] print(fruits[0]) # TypeError: \u0026#39;set\u0026#39; object is not subscriptable print(fruits) # {\u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} fruits.pop() # {\u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;} # OR {\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} # OR {\u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} # OR ... fruits.clear() # set() fruits = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;) print(dir(fruits)) # [\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__getnewargs__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;index\u0026#39;] print(fruits) # (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;) 21. ⭐ shopping cart program 🛒 # foods = [] prices = [] total = 0 while True: food = input(\u0026#34;Enter a food to buy (q to quit): \u0026#34;) if food.lower() == \u0026#34;q: break else: price = float(input(f\u0026#34;Enter the price of a {food}: $\u0026#34;)) foods.append(food) prices.append(price) print(\u0026#34;----- YOUR CART -----\u0026#34;) for food in foods: print(food, end=\u0026#34; \u0026#34;) for price in prices: total += price print() print(f\u0026#34;Your total is: ${total}\u0026#34;) 22. 2D collections ⬜ # fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] vegetables = [\u0026#34;celery\u0026#34;, \u0026#34;carrots\u0026#34;, \u0026#34;potatoes\u0026#34;] meats = [\u0026#34;chicken\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;turkey\u0026#34;] groceries = [fruits, vegetables, meats] print(groceries[0]) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] print(groceries[0][3]) # coconut print(groceries[2][3]) # IndexError: list index out of range groceries = [[\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;], [\u0026#34;celery\u0026#34;, \u0026#34;carrots\u0026#34;, \u0026#34;potatoes\u0026#34;], [\u0026#34;chicken\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;turkey\u0026#34;]] for collection in groceries: for food in collection: print(food, end=\u0026#34; \u0026#34;) print() # apple orange banana coconut # celery carrots potatoes # chicken fish turkey num_pad = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\u0026#34;*\u0026#34;, 0, \u0026#34;#\u0026#34;)) for row in num_pad: for num in row: print(num, end=\u0026#34; \u0026#34;) print() # 1 2 3 # 4 5 6 # 7 8 9 # * 0 # 23. ⭐ quiz game 💯 # question = (\u0026#34;How many elements are in the periodic table?: \u0026#34;, \u0026#34;Which animal lays the largest eggs?: \u0026#34;, \u0026#34;What is the most abundant gas in Earth\u0026#39;s atmosphere?: \u0026#34;, \u0026#34;How many bones are in the human body?: \u0026#34;, \u0026#34;Which planet in the solar system is the hottest?: \u0026#34;) options = ((\u0026#34;A. 116\u0026#34;, \u0026#34;B. 117\u0026#34;, \u0026#34;C. 118\u0026#34;, \u0026#34;D. 119\u0026#34;), (\u0026#34;A. Whale\u0026#34;, \u0026#34;B. Crocodile\u0026#34;, \u0026#34;C. Elephant\u0026#34;, \u0026#34;D. Ostrich\u0026#34;), (\u0026#34;A. Nitrogen\u0026#34;, \u0026#34;B. Oxygen\u0026#34;, \u0026#34;C. Carbon-Dioxide\u0026#34;, \u0026#34;D. Hydrogen\u0026#34;), (\u0026#34;A. 206\u0026#34;, \u0026#34;B. 207\u0026#34;, \u0026#34;C. 208\u0026#34;, \u0026#34;D. 209\u0026#34;), (\u0026#34;A. Mercury\u0026#34;, \u0026#34;B. Venus\u0026#34;, \u0026#34;C. Earth\u0026#34;, \u0026#34;D. Mars\u0026#34;)) answers = (\u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34; ) guesses = [] score = 0 question_num = 0 for question in questions: print(\u0026#34;-----------------------\u0026#34;) print(question) for option in options[question_num]: print(option) guess = input(\u0026#34;Enter (A, B, C, D): \u0026#34;).upper() guesses.append(guess) if guess == answers[question_num]: score += 1 print(\u0026#34;CORRECT!\u0026#34;) else: print(\u0026#34;INCORRECT!\u0026#34;) print(f\u0026#34;{answers[question_num]} is the correct answer\u0026#34;) question_num += 1 print(\u0026#34;-----------------------\u0026#34;) print(\u0026#34; RESULTS \u0026#34;) print(\u0026#34;-----------------------\u0026#34;) print(\u0026#34;answers: \u0026#34;, end=\u0026#34;\u0026#34;) for answer in answers: print(answer, end=\u0026#34; \u0026#34;) print() print(\u0026#34;guesses: \u0026#34;, end=\u0026#34;\u0026#34;) for guesse in guesses: print(guesse, end=\u0026#34; \u0026#34;) print() score = int(score / len(questions) * 100) print(f\u0026#34;Your score is: {score}%\u0026#34;) 24. dictionaries 📙 # a collection of {key:value} pairs ordered and changeable. No duplicates\ncapitals = {\u0026#34;USA\u0026#34;: \u0026#34;Washington D.C.\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;China\u0026#34;: \u0026#34;Beijing\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;} print(dir(capitals)) # print(help(capitals)) # [\u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;fromkeys\u0026#39;, \u0026#39;get\u0026#39;, \u0026#39;items\u0026#39;, \u0026#39;keys\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;popitem\u0026#39;, \u0026#39;setdefault\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;values\u0026#39;] print(capitals.get(\u0026#34;USA\u0026#34;)) # Washington D.C. print(capitals.get(\u0026#34;Japan\u0026#34;)) # None capitals.update({\u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;}) capitals.update({\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;}) # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;China\u0026#34;: \u0026#34;Beijing\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;, \u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;} capitals.pop(\u0026#34;China\u0026#34;) # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;, \u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;} capitals.popitem() # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;} # capitals.clear() # {} keys = capitals.keys() # dict_keys([\u0026#39;USA\u0026#39;, \u0026#39;India\u0026#39;, \u0026#39;Russia\u0026#39;]) for keys in capitals.keys(): print(key) # USA # India # Russia values = capitals.values() # dict_values([\u0026#39;Detroit\u0026#39;, \u0026#39;New Delhi\u0026#39;, \u0026#39;Moscow\u0026#39;]) for value in capitals.values(): print(value) # Detroit # New Delhi # Moscow items = capitals.items() print(items) # dict_items([(\u0026#39;USA\u0026#39;, \u0026#39;Detroit\u0026#39;), (\u0026#39;India\u0026#39;, \u0026#39;New Delhi\u0026#39;), (\u0026#39;Russia\u0026#39;, \u0026#39;Moscow\u0026#39;)]) for key, value in capitals.items(): print(f\u0026#34;{key}: {value}\u0026#34;) # USA: Detroit # India: New Delhi # Russia: Moscow 25. ⭐ concession stand program 🍿 # menu = {\u0026#34;pizza\u0026#34;: 3.00, \u0026#34;nachos\u0026#34;: 4.50, \u0026#34;popcorn\u0026#34;: 6.00, \u0026#34;fries\u0026#34;: 2.50, \u0026#34;chips\u0026#34;: 1.00, \u0026#34;pretzel\u0026#34;: 3.50, \u0026#34;soda\u0026#34;: 3.00, \u0026#34;lemonade\u0026#34;: 4.25} cart = [] total = 0 print(\u0026#34;----- MENU -----\u0026#34;) for key, value in menu.items(): print(f\u0026#34;{key:10}: ${value:.2f}\u0026#34;) print(\u0026#34;----------------\u0026#34;) while True: food = input(\u0026#34;Select an item (q to quit): \u0026#34;).lower() if food == \u0026#34;q\u0026#34;: break elif menu.get(food) is not None: cart.append(food) print(\u0026#34;-- YOUR ORDER --\u0026#34;) for food in cart: total += menu.get(food) print(food, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;Total is: ${total:.2f}\u0026#34;) 26. random numbers 🎲 # import random # print(help random) low = 1 high = 100 options = (\u0026#34;rock\u0026#34;, \u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;) cards = [\u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;10\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;A\u0026#34;] # number = random.randint(1, 6) # number = random.randint(low, high) # number = random.random() # option = random.choice(options) # random.shuffle(cards) 27. ⭐ number guessing game 🔢 # import random lowest_num = 1 highest_num = 100 answer = random.randint(lowest_num, highest_num) guesses = 0 is_running = True print(\u0026#34;Python Number Guessing Game\u0026#34;) print(f\u0026#34;Select a number between {lowest_num} and {highest_num}\u0026#34;) while is_running: guess = input(\u0026#34;Enter your guess: \u0026#34;) if guess.isdigit(): guess = int(guess) guesses += 1 if guess \u0026lt; lowest_num or guess \u0026gt; highest_num: print(\u0026#34;That number is out of range\u0026#34;) print(f\u0026#34;Please select a number between {lowest_num} and {highest_num}\u0026#34;) elif guess \u0026lt; answer: print(\u0026#34;Too low! Try again!\u0026#34;) elif guess \u0026gt; answer: print(\u0026#34;Too high! Try again!\u0026#34;) else: print(f\u0026#34;CORRECT! The answer was {answer}\u0026#34;) print(f\u0026#34;Number of guesses: {guesses}\u0026#34;) is_running = False else: print(\u0026#34;Invalid guess\u0026#34;) print(f\u0026#34;Please select a number between {lowest_num} and {highest_num}\u0026#34;) 28. ⭐ rock, paper, scissors game 🗿 # import random options = (\u0026#34;rock\u0026#34;, \u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;) playing = True while playing: player = None computer = random.choice(options) while player not in options: player = input(\u0026#34;Enter a choice (rock, paper, scissors):\u0026#34;) print(f\u0026#34;Player: {player}\u0026#34;) print(f\u0026#34;Computer: {computer}\u0026#34;) if player == computer: print(\u0026#34;It\u0026#39;s a tie!\u0026#34;) elif player == \u0026#34;rock\u0026#34; and computer == \u0026#34;scissors\u0026#34;: print(\u0026#34;You win!\u0026#34;) elif player == \u0026#34;paper\u0026#34; and computer == \u0026#34;rock\u0026#34;: print(\u0026#34;You win!\u0026#34;) elif player == \u0026#34;scissors\u0026#34; and computer == \u0026#34;paper\u0026#34;: print(\u0026#34;You win!\u0026#34;) else: print(\u0026#34;You lose!\u0026#34;) play_again = input(\u0026#34;Play again? (y/n): \u0026#34;).lower() if not play_again == \u0026#34;y\u0026#34;: playing = False print(\u0026#34;Thanks for playing!\u0026#34;) 29. ⭐ dice roller program ⚂ # import random print(\u0026#34;\\u25CF \\u250C \\u2500 \\u2510 \\u2502 \\u2514 \\u2518\u0026#34;) # ● ┌ ─ ┐ │ └ ┘ \u0026#34;┌─────────┐\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;└─────────┘\u0026#34; dice_art = { 1: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 2: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 3: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 4: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 5: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 6: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), } dice = [] total = 0 num_of_dice = int(input(\u0026#34;How many dice?: \u0026#34;)) for die in range(num_of_dice): dice.append(random.randint(1, 6)) print(dice) # for die in range(num_of_dice): # for line in dice_art.get(dice[die]): # print(line) for line in range(5): # 外部循环，按行打印 for die in dice: # 内部循环，遍历每个骰子的点数 print(dice_art.get(die)[line], end=\u0026#34;\u0026#34;) # 打印当前骰子图案的当前行 print() # 每打印完一行后换行 for die in dice: total += die print(f\u0026#34;total: {total}\u0026#34;) 30. functions 📞 # # function = A block of reusable code # place () after the function name to invoke it def happy_birthday(name, age): print(f\u0026#34;Happy birthday to {name}!\u0026#34;) print(\u0026#34;You are {age}!\u0026#34;) print(\u0026#34;Happy birthday to you!\u0026#34;) print() happy_birthday(\u0026#34;Bro\u0026#34;, 20) happy_birthday(\u0026#34;Steve\u0026#34;, 30) happy_birthday(\u0026#34;Joe\u0026#34;, 40) -------- def display_invoice(username, amount, due_date): print(f\u0026#34;Hello {username}\u0026#34;) print(f\u0026#34;Your bill of ${amount:.2f} is due: {due_date}\u0026#34;) display_invoice(\u0026#34;YuuNiji\u0026#34;, 100.01, \u0026#34;01/02\u0026#34;) -------- # return = statement used to end a function # and send a result back to the caller def add(x, y): z = x + y return z def subtract(x, y): z = x - y return z def multiply(x, y): z = x * y return z def divide(x, y): z = x / y return z print(add(1, 2)) # 3 print(subtract(1, 2)) # -1 print(multiply(1, 2)) # 2 print(divide(1, 2)) # 0.5 -------- def create_name(first, last): first = first.capitalize() last = last.capitalize() return first + \u0026#34; \u0026#34; + last full_name = create_name(\u0026#34;yuuniji\u0026#34;, \u0026#34;code\u0026#34;) print(full_name) # Yuuniji Code 31. default arguments 👍 # # default arguments = A default value for certain parameters # default is used when that argument is omitted # make your functions more flexible, reduces # of arguments # 1. positional, 2. DEFAULT, 3. keyword, 4. arbitrary def net_price(list_price, discount=1, tax=0.05): return list_price * (1 - discount) * (1 + tax) print(net_price(500)) # 525.0 print(net_price(500, 0.1)) # 472.5 print(net_price(500, 0.1, 0)) # 450 -------- import time def count(start, end): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(0, 10) # 0 # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10 # DONE! -------- import time def count(start=0, end): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(10) # SyntaxError: non-default argument follows default argument -------- import time def count(end, start=0): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(10) # 0 # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10 # DONE! -------- import time def count(end, start=0): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(30, 15) # 15 # 16 # 17 # 18 # 19 # 20 # 21 # 22 # 23 # 24 # 25 # 26 # 27 # 28 # 29 # 30 # DONE! 32. keyword arguments 🗝️ # # keyword arguments = an argument preceded by an identifier # helps with readability # order of arguments doesn\u0026#39;t matter # 1. positional 2. default 3. KEYWORD 4. arbitrary def hello(greeting, title, first, last): print(f\u0026#34;{greeting} {title}{first} {last}\u0026#34;) hello(\u0026#34;Hello\u0026#34;, \u0026#34;Mr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;) # Hello Mr.Spongebob Squarepants hello(\u0026#34;Hello\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;Mr.\u0026#34;) # Hello SpongebobSquarepants Mr. hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, first=\u0026#34;Spongebob\u0026#34;, last=\u0026#34;Squarepants\u0026#34;) # Hello Mr.Spongebob Squarepants hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;Squarepants\u0026#34;, first=\u0026#34;Spongebob\u0026#34;) # Hello Mr.Spongebob Squarepants hello(title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;Squarepants\u0026#34;, first=\u0026#34;Spongebob\u0026#34;, \u0026#34;Hello\u0026#34;) # SyntaxError: positional argument follows keyword argument hello(\u0026#34;Hello\u0026#34;, \u0026#34;Mr.\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;James\u0026#34;) # Hello Mr.John James hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;John\u0026#34;, first=\u0026#34;James\u0026#34;) # Hello Mr.James John -------- for x in range(1, 11): print(x, end=\u0026#34; \u0026#34;) # 1 2 3 4 5 6 7 8 9 10 -------- print(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, sep=\u0026#34;-\u0026#34;) # 1-2-3-4-5 -------- def get_phone(country, area, first, last): return f\u0026#34;{country}-{area}-{first}-{last}\u0026#34; phone_num = get_phone(country=1, area=123, first=456, last=7890) print(phone_num) # 1-123-456-7890 33. *args \u0026amp; **kwargs 📦 # # *args = allows you to pass multiple non-key arguments # **kwargs = allows you to pass multiple keyword-arguments # * unpacking operator # 1. positional 2. default 3. keyword 4. ARBITRARY def add(a, b): return a + b print(add(1, 2)) # 3 print(add(1, 2, 3)) # TypeError: add() takes 2 positional arguments but 3 were given -------- def add(*args): print(type(args)) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; total = 0 for arg in args: total += arg return total print(add(1, 2, 3, 4, 5)) # 15 -------- def display_name(*args): for arg in args: print(arg, end=\u0026#34; \u0026#34;) display_name(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Harold\u0026#34;, \u0026#34;Squarepants\u0026#34;) # Dr. Spongebob Harold Squarepants -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for value in kwargs.values(): print(value) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # 123 Fake St. # Detroit # MI # 54321 -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for key in kwargs.keys(): print(key) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # street # city # state # zip -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for key, value in kwargs.items(): print(f\u0026#34;{key}: {value}\u0026#34;) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # street: 123 Fake St. # city: Detroit # state: MI # zip: 54321 -------- # def shipping_label(**kwargs, *args): # SyntaxError: invalid syntax def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;III\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants III -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() for value in kwargs.values(): print(value, end=\u0026#34; \u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;III\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants III # 123 Fake St. 100 Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;#100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. #100 # Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. None # Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() if \u0026#34;apt\u0026#34; in kwargs: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) elif \u0026#34;pobox\u0026#34; in kwargs: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;pobox\u0026#39;)}\u0026#34;) else: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, pobox=\u0026#34;PO box #1001\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. # PO box #1001 # Detroit MI 54321 34. iterables 🔂 # # Iterables = An object/collection that can return its elements one at a time, # allowing it to be iterated over in a loop numbers = [1, 2, 3, 4, 5] for number in numbers: print(number) # 1 # 2 # 3 # 4 # 5 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number) # 5 # 4 # 3 # 2 # 1 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34; \u0026#34;) # 5 4 3 2 1 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34;-\u0026#34;) # 5-4-3-2-1- numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34; - \u0026#34;) # 5 - 4 - 3 - 2 - 1 - numbers = (1, 2, 3, 4, 5) for number in numbers: print(number) # 1 # 2 # 3 # 4 # 5 fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} for fruit in fruits: print(fruit) # apple # orange # banana # coconut fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} for fruit in reversed(fruits): print(fruit) # TypeError: \u0026#39;set\u0026#39; object is not reversible name =\u0026#34;Yuu Niji\u0026#34; for character in name: print(character) # Y # u # u # N # i # j # i name =\u0026#34;Yuu Niji\u0026#34; for character in name: print(character, end=\u0026#34; \u0026#34;) # Y u u N i j i my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key in my_dictionary: print(key) # A # B # C my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for value in my_dictionary.value(): print(value) # 1 # 2 # 3 my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key, value in my_dictionary.items(): print(key, value) # A 1 # B 2 # C 3 my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key, value in my_dictionary.items(): print(f\u0026#34;{key} = {value}\u0026#34;) # A = 1 # B = 2 # C = 3 35. membership operators 🔎 # # Membership operators = used to test whether a value or variable is found in a sequence # (string, list, tuple, set, or dictionary) # 1. in # 1. not in word = \u0026#34;APPLE\u0026#34; letter = input(\u0026#34;Guess a letter in the secret word: \u0026#34;) if letter in word: print(f\u0026#34;There is a {letter}\u0026#34;) else: print(f\u0026#34;{letter} was not found\u0026#34;) # Guess a letter in the secret word: A # There is a A # Guess a letter in the secret word: Z # Z was not found word = \u0026#34;APPLE\u0026#34; letter = input(\u0026#34;Guess a letter in the secret word: \u0026#34;) if letter not in word: print(f\u0026#34;{letter} was not found\u0026#34;) else: print(f\u0026#34;There is a {letter}\u0026#34;) # Guess a letter in the secret word: E # There is a E # Guess a letter in the secret word: Q # Q was not found students = {\u0026#34;Spongbob\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;Sandy\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student in students: print(f\u0026#34;{student} is a student\u0026#34;) else: print(f\u0026#34;{student} was not found\u0026#34;) # Enter the name of a student: Spongbob # Spongbob is a student # Enter the name of a student: Yuuniji # Yuuniji was not found students = {\u0026#34;Spongbob\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;Sandy\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student not in students: print(f\u0026#34;{student} was not found\u0026#34;) else: print(f\u0026#34;{student} is a student\u0026#34;) # Enter the name of a student: Sandy # Sandy is a student # Enter the name of a student: Github # Github was not found grades = {\u0026#34;Sandy\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;Squidward\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;Spongbob\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;Patrick\u0026#34;: \u0026#34;D\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student in grades: print(f\u0026#34;{student}\u0026#39;s grade is {grades[student]}\u0026#34;) else: print(f\u0026#34;{student} was not found\u0026#34;) # Enter the name of a student: Spongbob # Spongbobs grade is C # Enter the name of a student: Sandy # Sandy grade is A # Enter the name of a student: Squidward # Squidward grade is B # Enter the name of a student: Patrick # Patrick grade is D # Enter the name of a student: Yuuniji # Yuuniji was not found email = \u0026#34;yuuniji81@gmail.com\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Valid email email = \u0026#34;yuuniji81gmail.com\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Invalid email email = \u0026#34;yuuniji81@gmailcom\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Invalid email 36. list comprehensions 📃 # # List comprehension = A concise way to create lists in Python # Compact and easier to read than traditional loops # [expression for value in iterable if condition] doubles = [] for x in range(1, 11): doubles.append(x * 2) print(doubles) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] doubles = [x * 2 for x in range(1, 11)] print(doubles) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] triples = [y * 3 for y in range(1, 11)] print(triples) # [3, 6, 9, 12, 15, 18, 21, 24, 27, 30] squares = [z * z for z in range(1, 11)] print(squares) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits = [fruit.upper() for fruit in fruits] print(fruits) # [\u0026#39;APPLE\u0026#39;, \u0026#39;ORANGE\u0026#39;, \u0026#39;BANANA\u0026#39;, \u0026#39;COCONUT\u0026#39;] fruits = [fruit.upper() for fruit in [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;]] print(fruits) # [\u0026#39;APPLE\u0026#39;, \u0026#39;ORANGE\u0026#39;, \u0026#39;BANANA\u0026#39;, \u0026#39;COCONUT\u0026#39;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruit_chars = [fruit[0] for fruit in fruits] print(fruit_chars) # [\u0026#39;a\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] numbers = [1, -2, 3, -4, 5, -6, 8, -7] positive_nums = [num for num in numbers if num \u0026gt;= 0] negative_nums = [num for num in numbers if num \u0026lt; 0] even_nums = [num for num in numbers if num % 2 == 0] odd_nums = [num for num in numbers if num % 2 == 1] print(positive_nums) # [1, 3, 5, 8] print(negative_nums) # [-2, -4, -6, -7] print(even_nums) # [-2, -4, -6, 8] print(odd_nums) # [1, 3, 5, -7] grades = [85, 42, 79, 90, 56, 61, 30] passing_grades = [grade for grade in grades if grade \u0026gt;= 60] print(passing_grades) # [85, 79, 90, 61] 37. match-case statements 📆 # # Match-case statement (switch): An alternative to using many \u0026#39;elif\u0026#39; statements # Execute some code if a value matches a \u0026#39;case\u0026#39; # Benefits: cleaner and syntax is more readable def day_of_week(day): if day == 1: return \u0026#34;It is Sunday\u0026#34; elif day == 2: return \u0026#34;It is Monday\u0026#34; elif day == 3: return \u0026#34;It is Tuesday\u0026#34; elif day == 4: return \u0026#34;It is Wednesday\u0026#34; elif day == 5: return \u0026#34;It is Thursday\u0026#34; elif day == 6: return \u0026#34;It is Friday\u0026#34; elif day == 7: return \u0026#34;It is Saturday\u0026#34; else: return \u0026#34;Not a valid day\u0026#34; print(day_of_week(1)) # It is Sunday def day_of_week(day): match day: case 1: return \u0026#34;It is Sunday\u0026#34; case 2: return \u0026#34;It is Monday\u0026#34; case 3: return \u0026#34;It is Tuesday\u0026#34; case 4: return \u0026#34;It is Wednesday\u0026#34; case 5: return \u0026#34;It is Thursday\u0026#34; case 6: return \u0026#34;It is Friday\u0026#34; case 7: return \u0026#34;It is Saturday\u0026#34; case _: # _ = wild card return \u0026#34;Not a valid day\u0026#34; print(day_of_week(1)) # It is Sunday def is_weekend(day): match day: case \u0026#34;Sunday\u0026#34;: return True case \u0026#34;Monday\u0026#34;: return False case \u0026#34;Tuesday\u0026#34;: return False case \u0026#34;Wednesday\u0026#34;: return False case \u0026#34;Thursday\u0026#34;: return False case \u0026#34;Friday\u0026#34;: return False case \u0026#34;Saturday\u0026#34;: return True case _: # _ = wild card return False print(is_weekend(\u0026#34;Sunday\u0026#34;)) # True def is_weekend(day): match day: case \u0026#34;Saturday\u0026#34; | \u0026#34;Sunday\u0026#34;: # | = or return True case \u0026#34;Monday\u0026#34; | \u0026#34;Tuesday\u0026#34; | \u0026#34;Wednesday\u0026#34; | \u0026#34;Thursday\u0026#34; | \u0026#34;Friday\u0026#34;: return False case _: # _ = wild card return False print(is_weekend(\u0026#34;Sunday\u0026#34;)) # True 38. modules 📨 # # Module = a file containing code you want to include in your program # use \u0026#39;import\u0026#39; to include a module (built-in or your own) # useful to break up a large program reusable separate files # print(help(\u0026#34;modules\u0026#34;)) # print(help(\u0026#34;math\u0026#34;)) import math print(math.pi) # 3.141592653589794 import math as m print(math.pi) # NameError: name \u0026#39;math\u0026#39; is not defined import math as m print(m.pi) # 3.141592653589794 from math import pi print(pi) # 3.141592653589794 from math import e print(e) # 2.718281828459045 from math import e a, b, c, d = 1, 2, 3, 4 print(e ** a) print(e ** b) print(e ** c) print(e ** d) # 2.718281828459045 # 7.3890560989306495 # 20.085536923187664 # 54.5915003314423 from math import e a, b, c, d, e = 1, 2, 3, 4, 5 print(e ** a) print(e ** b) print(e ** c) print(e ** d) print(e ** e) # 5 # 25 # 125 # 625 # 3125 import math a, b, c, d, e = 1, 2, 3, 4, 5 print(math.e ** a) print(math.e ** b) print(math.e ** c) print(math.e ** d) print(math.e ** e) # 2.718281828459045 # 7.3890560989306495 # 20.085536923187664 # 54.5915003314423 # 148.41315910257657 # example.py pi = 3.14159 def square(x): return x ** 2 def cube(x): return x ** 3 def circumference(radius): return 2 * pi * radius def area(radius): return pi * radius ** 2 # main.py import example result = example.pi print(result) # 3.14159 import example result = example.square(3) print(result) # 9 import example result = example.cube(3) print(result) # 27 import example result = example.circumference(3) print(result) # 18.849539999999998 import example result = example.area(3) print(result) # 28.27431 39. scope resolution 🔬 # # variable scope = where a variable is visible and accessible # scope resolution = (LEGB) Local -\u0026gt; Enclosed -\u0026gt; Global -\u0026gt; Built-in def func1(): a = 1 print(a) def func2(): b = 2 print(b) func1() # 1 func2() # 2 def func1(): a = 1 print(b) def func2(): b = 2 print(a) func1() func2() # NameError: name \u0026#39;b\u0026#39; is not defined def happy_birthday(name, age): print(f\u0026#34;Happy birthday dear {name}\u0026#34;) print(f\u0026#34;You are {age} years old\u0026#34;) def main(): name = \u0026#34;Yuuniji\u0026#34; age = 21 happy_birthday(name, age) main() def func1(): x = 1 print(x) def func2(): x = 2 print(x) func1() # 1 func2() # 2 def func1(): x = 1 def func2(): x = 2 print(x) func2() func1() # 2 def func1(): x = 1 def func2(): print(x) func2() func1() # 1 def func1(): print(x) def func2(): print(x) x = 3 func1() # 3 func2() # 3 def func1(): x = 1 print(x) def func2(): x = 2 print(x) x = 3 func1() # 1 func2() # 2 from math import e print(e) # 2.718281828459045 from math import e def func1(): print(e) func1() # 2.718281828459045 from math import e def func1(): print(e) e = 3 func1() # 3 40. if name == \u0026lsquo;main\u0026rsquo;: 📥 # # if __name__ == __main__: (this script can be imported OR run standalone) # Functions and classes in this module can be reused without the main block of code executing # Good practice (code is modular, # helps readability, # leaves no global variables, # avoid unintended execution) # Ex. library = Import library for functionality # When running library directly, display a help page def main(): # Your program goes here if __name__ == \u0026#39;__main__\u0026#39;: main() # script1.py # print(dir()) print(__name__) # __main__ # script1.py from script2 import * # When script2.py is imported by script1.py, it is treated as a module, not the main script. Therefore, Python sets its __name__ to the name of the module, which is \u0026#34;script2\u0026#34; (the name of the file without the .py extension). # The print(__name__) statement in script2.py executes during the import process, printing \u0026#34;script2\u0026#34;. print(__name__) # script2 # __main__ -------- # script2.py print(__name__) # script1.py print(__name__) # script2 # __main__ -------- # script2.py from script1 import * print(__name__) # script1 # __main__ # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # This is script1 # Your favorite food is pizza # Goodbye! -------- # script2.py from script1 import * # # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) -------- # script2.py from script1 import * # This is script1 # Your favorite food is pizza # Goodbye! # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() -------- # script2.py from script1 import * def favorite_drink(drink): print(f\u0026#34;Your favorite drink is {drink}\u0026#34;) print(\u0026#34;This is script2\u0026#34;) favorite_food(\u0026#34;sushi\u0026#34;) favorite_drink(\u0026#34;coffee\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) # This is script2 # Your favorite food is sushi # Your favorite drink is coffee # Goodbye! # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() -------- # script2.py from script1 import * def favorite_drink(drink): print(f\u0026#34;Your favorite drink is {drink}\u0026#34;) def main(): print(\u0026#34;This is script2\u0026#34;) favorite_food(\u0026#34;sushi\u0026#34;) favorite_drink(\u0026#34;coffee\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # This is script2 # Your favorite food is sushi # Your favorite drink is coffee # Goodbye! 41. ⭐ banking program 💰 # # Python Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw def show_balance(): pass def deposit(): pass def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 4 # Thank you! Have a nice day! def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) else: return amount def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $0.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 100 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $100.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: -420.69 # That\u0026#39;s not a valid amount # TypeError: unsupported operand type(s) for +=: \u0026#39;float\u0026#39; and \u0026#39;NoneType\u0026#39; def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) return 0 else: return amount def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: -420.69 # That\u0026#39;s not a valid amount # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 50.01 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $50.01 def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) return 0 else: return amount def withdraw(): amount = input(\u0026#34;Enter amount to be withdrawn: \u0026#34;) if amount \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) return 0 elif amount \u0026lt; 0: print(\u0026#34;Amount must be greater than 0\u0026#34;) return 0 else: return amount balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: balance -= withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $0.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 100 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $100.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 1000000000000000000000 # Insufficient funds # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: -420.69 # Amount must be greater than 0 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: -49.99 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $50.01 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 4 # Thank you! Have a nice day! def show_balance(balance): print(\u0026#34;*********************\u0026#34;) print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) print(\u0026#34;*********************\u0026#34;) def deposit(): print(\u0026#34;*********************\u0026#34;) amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) print(\u0026#34;*********************\u0026#34;) if amount \u0026lt; 0: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 else: return amount def withdraw(balance): print(\u0026#34;*********************\u0026#34;) amount = input(\u0026#34;Enter amount to be withdrawn: \u0026#34;) print(\u0026#34;*********************\u0026#34;) if amount \u0026gt; balance: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Insufficient funds\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 elif amount \u0026lt; 0: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Amount must be greater than 0\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 else: return amount def main(): balance = 0 is_running = True while is_running: print(\u0026#34;*********************\u0026#34;) print(\u0026#34; Banking Program \u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) print(\u0026#34;*********************\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance(balance) elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: balance -= withdraw(balance) elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) print(\u0026#34;*********************\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $0.00 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 2 # ********************* # Enter an amount to be deposited: 100.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $100.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 1000 # ********************* # Insufficient funds # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 50 # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $50.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 4 # ********************* # Thank you! Have a nice day! # ********************* 42. ⭐ slot machine 🎰 # # Python Slot Machine def spin_row(): pass def print_row(): pass def get_payout(): pass def main(): pass if __name__ == \u0026#39;__main__\u0026#39;: main() def spin_row(): pass def print_row(): pass def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: pizza # Please enter a valid number # Current balance: $100 # Place your bet amount: 10000000000000000 # Insufficient funds # Current balance: $100 # Place your bet amount: 0 # Bet must be greater than 0 # Current balance: $100 # Place your bet amount: 1 # Current balance: $99 # Place your bet amount: 10 # Current balance: $89 # Place your bet amount: 90 # Insufficient funds # Current balance: $89 # Place your bet amount: 89 import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(): pass def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # [\u0026#39;⭐️\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🍋\u0026#39;] # Current balance: $99 # Place your bet amount: 1 # [\u0026#39;🍉\u0026#39;, \u0026#39;🍒\u0026#39;, \u0026#39;⭐️\u0026#39;] # Current balance: $98 # Place your bet amount: 1 # [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍒\u0026#39;] # Current balance: $97 # Place your bet amount: 1 # [\u0026#39;⭐️\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;⭐️\u0026#39;] # Current balance: $96 # Place your bet amount: 1 # [\u0026#39;🍋\u0026#39;, \u0026#39;🍒\u0026#39;, \u0026#39;🍋\u0026#39;] # Current balance: $95 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34; \u0026#34;.join(row)) def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # 🍋 ⭐️ 🔔 # Current balance: $99 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Current balance: $99 # Place your bet amount: 2 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Current balance: $97 # Place your bet amount: 3 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Current balance: $94 # Place your bet amount: 4 # Spinning... # # ************* # 🍉 | 🍉 | 🍉 # ************* # Current balance: $90 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(row, bet): if row[0] == row[1] == row[2]: if row[0] == \u0026#39;🍒\u0026#39;: return bet * 3 elif row[0] == \u0026#39;🍉\u0026#39;: return bet * 4 elif row[0] == \u0026#39;🍋\u0026#39;: return bet * 5 elif row[0] == \u0026#39;🔔\u0026#39;: return bet * 10 elif row[0] == \u0026#39;⭐️\u0026#39;: return bet * 20 return 0 def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) payout = get_payout(row, bet) if payout \u0026gt; 0: print(f\u0026#34;You won ${payout}\u0026#34;) else: print(\u0026#34;Sorry you lost this round\u0026#34;) balance += payout if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Sorry you lost this round # Current balance: $99 # Place your bet amount: 2 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Sorry you lost this round # Current balance: $97 # Place your bet amount: 3 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Sorry you lost this round # Current balance: $94 # Place your bet amount: 1 # Spinning... # # ************* # 🍉 | 🍉 | 🍉 # ************* # You won $4 # Current balance: $93 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(row, bet): if row[0] == row[1] == row[2]: if row[0] == \u0026#39;🍒\u0026#39;: return bet * 3 elif row[0] == \u0026#39;🍉\u0026#39;: return bet * 4 elif row[0] == \u0026#39;🍋\u0026#39;: return bet * 5 elif row[0] == \u0026#39;🔔\u0026#39;: return bet * 10 elif row[0] == \u0026#39;⭐️\u0026#39;: return bet * 20 return 0 def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) payout = get_payout(row, bet) if payout \u0026gt; 0: print(f\u0026#34;You won ${payout}\u0026#34;) else: print(\u0026#34;Sorry you lost this round\u0026#34;) balance += payout play_again = input(\u0026#34;Do you want to spin again? (Y/N): \u0026#34;).upper() if play_again != \u0026#39;Y\u0026#39;: break print(\u0026#34;*******************************************\u0026#34;) print(f\u0026#34;Game over! Your final balance is ${balance}\u0026#34;) print(\u0026#34;*******************************************\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $99 # Place your bet amount: 5 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $94 # Place your bet amount: 90 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $4 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🔔 | 🔔 # ************* # You won $10 # Do you want to spin again? (Y/N): n # ****************************************** # Game over! Your final balance is $14 # ****************************************** 43. ⭐ encryption program 🔐 # import string # chars = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34; chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters print(chars) # !\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^_`{|}~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) print(chars) # [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39;k\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;T\u0026#39;] import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # ENCRYPT plain_text = input(\u0026#34;Enter a message to encrypt: \u0026#34;) cipher_text = \u0026#34;\u0026#34; for letter in plain_text: index = chars.index(letter) cipher_text += key[index] print(f\u0026#34;original message : {plain_text}\u0026#34;) print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) # Enter a message to encrypt: I like pizza! # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39;k\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # Enter a message to encrypt: I like pizza! # original message : I like pizza! # encrypted message: D Liye piJJa9 import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) # print(f\u0026#34;chars: {chars}\u0026#34;) # print(f\u0026#34;key : {key}\u0026#34;) # ENCRYPT plain_text = input(\u0026#34;Enter a message to encrypt: \u0026#34;) cipher_text = \u0026#34;\u0026#34; for letter in plain_text: index = chars.index(letter) cipher_text += key[index] print(f\u0026#34;original message : {plain_text}\u0026#34;) print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) # DECRYPT cipher_text = input(\u0026#34;Enter a message to decrypt: \u0026#34;) plain_text = \u0026#34;\u0026#34; for letter in cipher_text: index = key.index(letter) plain_text += chars[index] print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) print(f\u0026#34;original message : {plain_text}\u0026#34;) # Enter a message to encrypt: I like pizza! # original message : I like pizza! # encrypted message: NkLiyekpiJJa9 # Enter a message to decrypt: NkLiyekpiJJa9 # encrypted message: NkLiyekpiJJa9 # original message : I like pizza! 44. ⭐ hangman game 🕺 # # Hangman in Python import random words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} # print(hangman_art[3]) # (\u0026#39; o \u0026#39;, \u0026#39;/| \u0026#39;, \u0026#39; \u0026#39;) for line in hangman_art[3]: print(line) # o # /| # import random words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} def display_man(wrong_guesses): print(\u0026#34;**********\u0026#34;) for line in hangman_art[wrong_guesses]: print(line) print(\u0026#34;**********\u0026#34;) def display_hint(hint): pass def display_answer(answer): pass def main(): answer = random.choice(words) # print(answer) # apple hint = [\u0026#34;_\u0026#34;] * len(answer) # print(hint) # [\u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;] wrong_guesses = 6 guessed_letters = set() is_running = True while is_running: display_man(wrong_guesses) display_hint(hint) guess = input(\u0026#34;Enter a letter: \u0026#34;).lower() if __name__ == \u0026#39;__main__\u0026#39;: main() # ********** # o # /|\\ # / \\ # ********** # Enter a letter: # wordslist.py words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # main.py from wordslist import words import random # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} def display_man(wrong_guesses): print(\u0026#34;**********\u0026#34;) for line in hangman_art[wrong_guesses]: print(line) print(\u0026#34;**********\u0026#34;) def display_hint(hint): print(\u0026#34; \u0026#34;.join(hint)) def display_answer(answer): print(\u0026#34; \u0026#34;.join(answer)) def main(): answer = random.choice(words) hint = [\u0026#34;_\u0026#34;] * len(answer) wrong_guesses = 0 guessed_letters = set() is_running = True while is_running: display_man(wrong_guesses) display_hint(hint) guess = input(\u0026#34;Enter a letter: \u0026#34;).lower() if len(guess) != 1 or not guess.isalpha(): print(\u0026#34;Invalid input\u0026#34;) continue if guess in guessed_letters: print(f\u0026#34;{guess} is already guessed\u0026#34;) continue guessed_letters.add(guess) if guess in answer: for i in range(len(answer)): if answer[i] == guess: hint[i] = guess else: wrong_guesses += 1 if \u0026#34;_\u0026#34; not in hint: display_man(wrong_guesses) display_answer(answer) print(\u0026#34;YOU WIN!\u0026#34;) is_running = False elif wrong_guesses \u0026gt;= len(hangman_art) - 1: display_man(wrong_guesses) display_answer(answer) print(\u0026#34;YOU LOSE!\u0026#34;) is_running = False if __name__ == \u0026#39;__main__\u0026#39;: main() # ********** # # # # ********** # _ _ _ _ _ _ _ _ _ # Enter a letter: p # ********** # # # # ********** # p _ _ _ _ p p _ _ # Enter a letter: \u0026amp; # Invalid input # ********** # # # # ********** # p _ _ _ _ p p _ _ # Enter a letter: i # ********** # # # # ********** # p i _ _ _ p p _ _ # Enter a letter: n # ********** # # # # ********** # p i n _ _ p p _ _ # Enter a letter: p # p is already guessed # ********** # # # # ********** # p i n _ _ p p _ _ # Enter a letter: x # ********** # o # # # # ********** # p i n _ _ p p _ _ # Enter a letter: z # ********** # o # | # # ********** # p i n _ _ p p _ _ # Enter a letter: e # ********** # o # | # # ********** # p i n e _ p p _ e # Enter a letter: a # ********** # o # | # # ********** # p i n e a p p _ e # Enter a letter: l # ********** # o # | # # ********** # p i n e a p p l e # YOU WIN! 45. python object oriented programming 🚗 # object = A \u0026ldquo;bundle\u0026rdquo; of related attributes (variables) and methods (functions) Ex. phone, cup, book You need a \u0026ldquo;class\u0026rdquo; to create many objects\nclass = (blueprint) used to design the structure and layout of an object\nclass Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) print(car1) # \u0026lt;__main__.Car object at 0x000001AE490AE610\u0026gt; print(car1.model) # Mustang print(car1.year) # 2024 print(car1.color) # red print(car1.for_sale) # False # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) print(car1.model) # Mustang print(car1.year) # 2024 print(car1.color) # red print(car1.for_sale) # False # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale def drive(self): print(\u0026#34;You drive the car\u0026#34;) def stop(self): print(\u0026#34;You stop the car\u0026#34;) # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) car1.drive() # You drive the car car2.drive() # You drive the car car1.stop() # You stop the car car2.stop() # You stop the car # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale def drive(self): print(f\u0026#34;You drive the {self.color} {self.model}\u0026#34;) def stop(self): print(f\u0026#34;You stop the {self.color} {self.model}\u0026#34;) def describe(self): print(f\u0026#34;{self.year} {self.color} {self.model}\u0026#34;) # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) car1.drive() # You drive the red Mustang car1.stop() # You stop the red Mustang car1.describe() # 2024 red Mustang 46. class variables 🎓 # class variables = Shared among all instances of a class Defined outside the constructor Allow you to share data among all objects created from that class\nclass Car: wheels = 4 # class variables def __init__(self, model, year): self.model = model # instance variable self.year = year # instance variables class Student: class_year = 2024 def __init__(self, name, age): self.name = name self.age = age student1 = Student(\u0026#34;Spongebob\u0026#34;, 30) student2 = Student(\u0026#34;Patrick\u0026#34;, 35) print(student1.name) print(student1.age) # Spongebob # 30 print(student1.class_year) print(student2.class_year) print(Student.class_year) # 2024 # 2024 # 2024 class Student: class_year = 2024 num_students = 0 def __init__(self, name, age): self.name = name self.age = age Student.num_students += 1 student1 = Student(\u0026#34;Spongebob\u0026#34;, 30) student2 = Student(\u0026#34;Patrick\u0026#34;, 35) student3 = Student(\u0026#34;Squidward\u0026#34;, 35) student4 = Student(\u0026#34;Sandy\u0026#34;, 35) print(Student.num_students) # 4 print(f\u0026#34;My graduating class of {Student.class_year} has {Student.num_students} students\u0026#34;) print(student1.name) print(student2.name) print(student3.name) print(student4.name) # My graduating class of 2024 has 4 students # Spongebob # Patrick # Squidward # Sandy 47. inheritance 👨‍👦‍👦 # Inheritance = Allows a class to inherit attributes and methods from another class\nHelps with code reusability and extensibility\nclass Child(Parent)\nclass Sub(Super)\nclass Father: height = 182 color = \u0026#34;pink\u0026#34; class Son(Father): pass class Animal: def __init__(self, name): self.name = name self.is_alive = True def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is asleep\u0026#34;) class Dog(Animal): pass class Cat(Animal): pass class Mouse(Animal): pass dog = Dog(\u0026#34;Scooby\u0026#34;) cat = Cat(\u0026#34;Garfield\u0026#34;) mouse = Mouse(\u0026#34;Mickey\u0026#34;) print(dog.name) print(dog.is_alive) dog.eat() dog.sleep() # Scooby # True # Scooby is eating # Scooby is asleep class Animal: def __init__(self, name): self.name = name self.is_alive = True def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is sleeping\u0026#34;) class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Mouse(Animal): def speak(self): print(\u0026#34;SQUEEK!\u0026#34;) dog = Dog(\u0026#34;Scooby\u0026#34;) cat = Cat(\u0026#34;Garfield\u0026#34;) mouse = Mouse(\u0026#34;Mickey\u0026#34;) dog.speak() # WOOF! 48. multiple inheritance 🐟 # multiple inheritance = inherit from more than one parent class\nC(A, B)\nmultiple inheritance = inherit from a parent which inherits from another parent\nC(B) \u0026lt;- B(A) \u0026lt;- A\nclass Prey: pass class Predator: pass class Rabbit: pass class Hawk: pass class Fish: pass class Prey: def flee(self): print(\u0026#34;This animal is fleeing\u0026#34;) class Predator: def hunt(self): print(\u0026#34;This animal is hunting\u0026#34;) class Rabbit(Prey): pass class Hawk(Predator): pass class Fish(Prey, Predator): pass rabbit = Rabbit() hawk = Hawk() fish = Fish() rabbit.flee() # This animal is fleeing rabbit.hunt() # AttributeError: \u0026#39;Rabbit\u0026#39; object has no attribute \u0026#39;hunt\u0026#39; hawk.hunt() # This animal is hunting hawk.flee() # AttributeError: \u0026#39;Hawk\u0026#39; object has no attribute \u0026#39;flee\u0026#39; fish.flee() # This animal is fleeing fish.hunt() # This animal is hunting class Animal: def __init__(self, name): self.name = name def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is sleeping\u0026#34;) class Prey(Animal): def flee(self): print(f\u0026#34;{self.name} is fleeing\u0026#34;) class Predator(Animal): def hunt(self): print(f\u0026#34;{self.name} is hunting\u0026#34;) class Rabbit(Prey): pass class Hawk(Predator): pass class Fish(Prey, Predator): pass rabbit = Rabbit(\u0026#34;Bugs\u0026#34;) hawk = Hawk(\u0026#34;Tony\u0026#34;) fish = Fish(\u0026#34;Nemo\u0026#34;) rabbit.eat() # Bugs is eating rabbit.sleep() # Bugs is sleeping rabbit.flee() # Bugs is fleeing hawk.flee() # AttributeError: \u0026#39;Hawk\u0026#39; object has no attribute \u0026#39;flee\u0026#39; hawk.eat() # Tony is eating hawk.hunt() # Tony is hunting fish.eat() fish.sleep() fish.flee() fish.hunt() # Nemo is eating # Nemo is sleeping # Nemo is fleeing # Nemo is hunting 49. super() 🔴 # super() = Function used in a child class to call methods from a parent class (superclass).\nAllows you to extend the functionality of the inherited methods\nclass Super: # 👨🏻 pass class Sub(Super): # 👶🏻 pass class super\nclass super(type, object_or_type=None)\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class.\nThe object_or_type determines the method resolution order to be searched. The search starts from the class right after the type.\nclass Circle: def __init__(self, color, is_filled, radius): self.color = color self.is_filled = is_filled self.radius = radius class Square: def __init__(self, color, is_filled, width): self.color = color self.is_filled = is_filled self.width = width class Triangle: def __init__(self, color, is_filled, width, height): self.color = color self.is_filled = is_filled self.width = width self.height = height class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) print(circle.color) print(circle.is_filled) print(f\u0026#34;{circle.radius}cm\u0026#34;) # red # True # 5cm print(square.color) print(square.is_filled) print(f\u0026#34;{square.width}cm\u0026#34;) # blue # False # 6cm print(triangle.color) print(triangle.is_filled) print(f\u0026#34;{triangle.width}cm\u0026#34;) print(f\u0026#34;{triangle.height}cm\u0026#34;) # yellow # True # 7cm # 8cm class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled def describe(self): print(f\u0026#34;It is {self.color} and {\u0026#39;filled\u0026#39; if self.is_filled else \u0026#39;not filled\u0026#39;}\u0026#34;) class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) circle.describe() # It is red and filled square.describe() # It is blue and not filled triangle.describe() # It is yellow and filled class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled def describe(self): print(f\u0026#34;It is {self.color} and {\u0026#39;filled\u0026#39; if self.is_filled else \u0026#39;not filled\u0026#39;}\u0026#34;) class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius def describe(self): super().describe() print(f\u0026#34;It is a circle with an area of {3.14 * self.radius * self.radius}cm^2\u0026#34;) class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width def describe(self): super().describe() print(f\u0026#34;It is a square with an area of {self.width * self.width}cm^2\u0026#34;) class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height def describe(self): super().describe() print(f\u0026#34;It is a triangle with an area of {self.width * self.height / 2}cm^2\u0026#34;) circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) circle.describe() # It is red and filled # It is a circle with an area of 78.5cm^2 square.describe() # It is blue and not filled # It is a square with an area of 36cm^2 triangle.describe() # It is yellow and filled # It is a triangle with an area of 28.0cm^2 50. polymorphism 🎭 # Polymorphism = Greek word that means to \u0026ldquo;have many forms or faces\u0026rdquo;\nPoly = Many\nMorphe = Form\nTWO WAYS TO ACHIEVE POLYMORPHISM\nInheritance = An object could be treated of the same type as a parent class \u0026ldquo;Duck typing\u0026rdquo; = Object must have necessary attributes/methods class Shape: pass class Circle(Shape): pass class Square(Shape): pass class Triangle(Shape): pass circle = Circle() square = Square() triangle = Triangle() shapes = [Circle(), Square(), Triangle()] from abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 shapes = [Circle(4), Square(5), Triangle(6, 7)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # 50.24cm² # 25cm² # 21.0cm² (How to add superscript ²):\nWindows: Alt + 0178\nMac: Control + Command + Space\nfrom abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 class Pizza: def __init__(self, topping, radius): self.topping = topping self.radius = radius shapes = [Circle(4), Square(5), Triangle(6, 7), Pizza(\u0026#34;pepperoni\u0026#34;, 15)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # AttributeError: \u0026#39;Pizza\u0026#39; object has no attribute \u0026#39;area\u0026#39; # 50.24cm² # 25cm² # 21.0cm² from abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 class Pizza(Circle): def __init__(self, topping, radius): super().__init__(radius) self.topping = topping shapes = [Circle(4), Square(5), Triangle(6, 7), Pizza(\u0026#34;pepperoni\u0026#34;, 15)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # 50.24cm² # 25cm² # 21.0cm² # 706.5cm² 51. duck typing 🦆 # \u0026ldquo;Duck typing\u0026rdquo; = Another way to achieve polymorphism besides Inheritance\nObject must have the minimum necessary attributes/methods\n\u0026ldquo;If it looks like a duck and quacks like a duck, it must be a duck.\u0026rdquo;\nclass Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): def horn(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() # AttributeError: \u0026#39;Car\u0026#39; object has no attribute \u0026#39;speak\u0026#39; # WOOF! # MEOW! class Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): def speak(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() print(animal.alive) # AttributeError: \u0026#39;Car\u0026#39; object has no attribute \u0026#39;alive\u0026#39; # WOOF! # True # MEOW! # True # HONK! class Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): alive = False def speak(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() print(animal.alive) # WOOF! # True # MEOW! # True # HONK! # False 52. static methods ⚡ # Static methods = A method that belong to a class rather than any object from that class (instance)\nUsually used for general utility functions\nInstance methods = Best for operations on instances of the class (objects)\n# INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; Static methods = Best for utility functions that do not need access to class data\n@staticmethod def km_to_miles(kilometers): return kilometers * 0.621371 class Employee: def __init__(self, name, position): self.name = name self.position = position def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; @staticmethod def is_valid_position(): valid_positions = [\u0026#34;Manager\u0026#34;, \u0026#34;Cashier\u0026#34;, \u0026#34;Cook\u0026#34;, \u0026#34;Janitor\u0026#34;] return position in valid_positions print(Employee.is_valid_position(\u0026#34;Cook\u0026#34;)) # True print(Employee.is_valid_position(\u0026#34;Rocket Scientist\u0026#34;)) # False class Employee: def __init__(self, name, position): self.name = name self.position = position def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; @staticmethod def is_valid_position(): valid_positions = [\u0026#34;Manager\u0026#34;, \u0026#34;Cashier\u0026#34;, \u0026#34;Cook\u0026#34;, \u0026#34;Janitor\u0026#34;] return position in valid_positions employee1 = Employee(\u0026#34;Eugune\u0026#34;, \u0026#34;Manager\u0026#34;) employee2 = Employee(\u0026#34;Squidward\u0026#34;, \u0026#34;Cashier\u0026#34;) employee3 = Employee(\u0026#34;Spongebob\u0026#34;, \u0026#34;Cook\u0026#34;) print(Employee.is_valid_position(\u0026#34;Rocket Scientist\u0026#34;)) # False print(employee1.get_info()) print(employee2.get_info()) print(employee3.get_info()) # Eugune = Manager # Squidward = Cashier # Spongebob = Cook 53. class methods 🏫 # Class methods = Allow operations related to the class itself\nTake (cls) as the first parameter, which represents the class itself.\nInstance methods = Best for operations on instances of the class (objects)\nStatic methods = Best for utility functions that do not need access to class data\nClass methods = Best for class-level data or require access to the class itself\nclass Student: count = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; print(Student.get_count()) # Total # of students: 0 class Student: count = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) student3 = Student(\u0026#34;Sandy\u0026#34;, 4.0) print(Student.get_count()) # Total # of students: 3 class Student: count = 0 total_gpa = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 Student.total_gpa = gpa # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; @classmethod def get_average_gpa(cls): if cls.count == 0: return 0 else: return f\u0026#34;Average gpa: {cls.total_gpa / cls.count.2f}\u0026#34; student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) student3 = Student(\u0026#34;Sandy\u0026#34;, 4.0) print(Student.get_count()) # Total # of students: 3 print(Student.get_average_gpa()) # Average gpa: 3.07 54. magic methods 🌟 # Magic methos = Dunder methods (double underscore) init, str, eq\nThey are automatically called by many of Python\u0026rsquo;s built-in operations.\nThey allow developers to define or customize the behavior of objects\nclass Student: def __init__(self, name, gpa): self.name = name self.gpa = gpa def __str__(self): return f\u0026#34;name: {self.name} gpa: {self.gpa}\u0026#34; def __eq__(self, other): return self.name == other.name def __gt__(self, other): return self.gpa \u0026gt; other.gpa student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) print(student1) print(student1 == student2) print(student1 \u0026gt; student2) # name: Spongebob gpa: 3.2 # False # True class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1) # \u0026lt;__main__.Book object at 0x000001E78F76EE50\u0026gt; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1) # \u0026#39;The Hobbit\u0026#39; by J.R.R. Tolkien print(book3 == book4) # False class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book1) # \u0026#39;The Hobbit\u0026#39; by J.R.R. Tolkien print(book3 == book4) # True print(book2 \u0026lt; book3) # TypeError: \u0026#39;\u0026lt;\u0026#39; not supported between instances of \u0026#39;Book\u0026#39; and \u0026#39;Book\u0026#39; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book2 \u0026lt; book3) # False print(book2 \u0026gt; book3) # True print(book2 + book3) # TypeError: unsupported operand type(s) for +: \u0026#39;Book\u0026#39; and \u0026#39;Book\u0026#39; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book2 + book3) # 395 pages print(\u0026#34;Lion\u0026#34; in book3) # TypeError: argument of type \u0026#39;Book\u0026#39; is not iterable class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(\u0026#34;Lion\u0026#34; in book3) # True print(\u0026#34;Lion\u0026#34; in book1) # False print(\u0026#34;Rowling\u0026#34; in book2) # True print(\u0026#34;Rowling\u0026#34; in book3) # False print(book1[\u0026#39;title\u0026#39;]) # TypeError: \u0026#39;Book\u0026#39; object is not subscriptable class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1[\u0026#39;title\u0026#39;]) # The Hobbit print(book2[\u0026#39;title\u0026#39;]) # Harry Potter and The Philosopher\u0026#39;s Stone print(book3[\u0026#39;title\u0026#39;]) # The Lion, the Witch and the Wardrobe print(book3[\u0026#39;author\u0026#39;]) # None class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title elif key == \u0026#34;author\u0026#34;: return self.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book3[\u0026#39;author\u0026#39;]) # C.S. Lewis print(book2[\u0026#39;author\u0026#39;]) # J.K. Rowling print(book1[\u0026#39;author\u0026#39;]) # J.R.R. Tolkien print(book1[\u0026#39;num_pages\u0026#39;]) # None class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title elif key == \u0026#34;author\u0026#34;: return self.author elif key == \u0026#34;num_pages\u0026#34;: return self.num_pages else: return f\u0026#34;Key \u0026#39;{key}\u0026#39; was not found\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1[\u0026#39;num_pages\u0026#39;]) # 310 print(book2[\u0026#39;num_pages\u0026#39;]) # 223 print(book3[\u0026#39;num_pages\u0026#39;]) # 172 print(book3[\u0026#39;audio\u0026#39;]) # Key \u0026#39;audio\u0026#39; was not found 55. @property ⚙️ # property = Decorator used to define a method as a property (it can be accessed like an attribute)\nBenefit: Add additional logic when read, write, or delete attributes\nGives you getter, setter, and deleter method\nclass Rectangle: def __init__(self, width, height): self.width = width self.height = height rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): pass @property def height(self): pass rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3.0cm # 4.0cm print(rectangle._width) print(rectangle._height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 0 rectangle.height = -1 print(rectangle.width) print(rectangle.height) # Width must be greater than zero # Height must be greater than zero # 3.0cm # 4.0cm class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 5 rectangle.height = 6 print(rectangle.width) print(rectangle.height) # 5.0cm # 6.0cm class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) @width.deleter def width(self): del self._width print(\u0026#34;Width has been deleted\u0026#34;) @height.deleter def height(self): del self._height print(\u0026#34;Height has been deleted\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 5 rectangle.height = 6 del rectangle.width def rectangle.height # Width has been deleted # Height has been deleted 56. decorators 🎊 # Decorator = A function that extends the behavior of another function\nw/o modifying the base function\nPass the base function as an argument to the decorator\n@add_sprinkles\nget_ice_cream(\u0026ldquo;vanilla\u0026rdquo;)\ndef get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): func() # print(\u0026#34;Here is your ice cream 🍨\u0026#34;) return wrapper @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # *You add sprinkles 🎊* # Here is your ice cream 🍨 def add_sprinkles(func): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) # *You add sprinkles 🎊* # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper def add_fudge(func): def wrapper(): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func() return wrapper @add_sprinkles @add_fudge def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # *You add sprinkles 🎊* # *You add fudge 🍫* # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper def add_fudge(func): def wrapper(): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func() return wrapper @add_sprinkles @add_fudge def get_ice_cream(flavo): print(f\u0026#34;Here is your {flavo}ice cream 🍨\u0026#34;) get_ice_cream(\u0026#34;vanilla\u0026#34;) # TypeError: add_sprinkles.\u0026lt;locals\u0026gt;.wrapper() takes 0 positional arguments bet 1 was given def add_sprinkles(func): def wrapper(*args, **kwargs): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func(*args, **kwargs) return wrapper def add_fudge(func): def wrapper(*args, **kwargs): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func(*args, **kwargs) return wrapper @add_sprinkles @add_fudge def get_ice_cream(flavo): print(f\u0026#34;Here is your {flavo}ice cream 🍨\u0026#34;) get_ice_cream(\u0026#34;vanilla\u0026#34;) # *You add sprinkles 🎊* # *You add fudge 🍫* # Here is your vanilla ice cream 🍨 57. exception handling 🚦 # exception = An event that interrupts the flow of a program\n(ZeroDivisionError, TypeError, ValueError)\n1.try, 2.except, 3.finally\n1 / 0 # ZeroDivisionError: division by zero 1 + \u0026#34;1\u0026#34; # TypeError: unsupported operand type(s) for +: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; int(\u0026#34;pizza\u0026#34;) # ValueError: invalid literal for int() with base 10: \u0026#39;pizza\u0026#39; try: # Try some code except Exception: # Handle an Exception finally: # Do some clean up number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) # Enter a number: 0 # ZeroDivisionError: division by zero # Enter a number: pizza # ValueError: invalid literal for int() with base 10: \u0026#39;pizza\u0026#39; try: number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) except ZeroDivisionError: print(\u0026#34;You can\u0026#39;t divide by zero IDIOT!\u0026#34;) except ValueError: print(\u0026#34;Enter only numbers please!\u0026#34;) # Enter a number: 0 # You can\u0026#39;t divide by zero IDIOT! # Enter a number: pizza # Enter only numbers please! try: number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) except ZeroDivisionError: print(\u0026#34;You can\u0026#39;t divide by zero IDIOT!\u0026#34;) except ValueError: print(\u0026#34;Enter only numbers please!\u0026#34;) except Exception: # Too broad exception clause print(\u0026#34;Something went wrong!\u0026#34;) finally: print(\u0026#34;Do some cleanup here\u0026#34;) # Enter a number: 0 # You can\u0026#39;t divide by zero IDIOT! # Do some cleanup here # Enter a number: 1 # 1.0 # Do some cleanup here There are many different types of exceptions, you can always look under the official python documentation for an extensive list and well everybody that\u0026rsquo;s exception handling in Python.\n58. file detection 🕵️‍♂️ # \u0026lt;!-- test.txt --\u0026gt; like pizza # main.py import os file_path = \u0026#34;test.txt\u0026#34; if os.path.exists(file_path): print(f\u0026#34;The location \u0026#39;{file_path}\u0026#39; exists\u0026#34;) else: print(\u0026#34;That location doesn\u0026#39;t exist\u0026#34;) # The location \u0026#39;test.txt\u0026#39; exists # main.py import os file_path = \u0026#34;test.txt\u0026#34; if os.path.exists(file_path): print(f\u0026#34;The location \u0026#39;{file_path}\u0026#39; exists\u0026#34;) if os.path.isfile(file_path): print(\u0026#34;That is a file\u0026#34;) elif os.path.isdir(file_path): print(\u0026#34;That is a directory\u0026#34;) else: print(\u0026#34;That location doesn\u0026#39;t exist\u0026#34;) # The location \u0026#39;test.txt\u0026#39; exists # That is a file 59. writing files ✍ # Python writing files (.txt, .json, .csv)\ntxt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; with open(file_path, \u0026#34;w\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;x\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # That file already exists! \u0026lt;!-- output.txt --\u0026gt; I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza!I like pizza! \u0026lt;!-- output.txt --\u0026gt; I like pizza!I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! \u0026lt;!-- output.txt --\u0026gt; I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(\u0026#34;\\n\u0026#34; + txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! # I like pizza! employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: file.write(employees) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # TypeError: write() argument must be str, not list employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: for employee in employees: file.write(employee) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # EugeneSquidwardSpongebobPatrick employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: for employee in employees: file.write(employee + \u0026#34;\\n\u0026#34;) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # Eugene # Squidward # Spongebob # Patrick import json employee = { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } file_path = \u0026#34;output.json\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: json.dump(employee, file) print(f\u0026#34;json file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # json file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.json --\u0026gt; # {\u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34;} import json employee = { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } file_path = \u0026#34;output.json\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: json.dump(employee, file, indent=4) print(f\u0026#34;json file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # json file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.json --\u0026gt; # { # \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, # \u0026#34;age\u0026#34;: 30, # \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; # } import json import csv employees = [[\u0026#34;Name\u0026#34;, \u0026#34;Age\u0026#34;, \u0026#34;Job\u0026#34;], [\u0026#34;Spongebob\u0026#34;, 30, \u0026#34;Cook\u0026#34;], [\u0026#34;Patrick\u0026#34;, 37, \u0026#34;Unemployed\u0026#34;], [\u0026#34;Sandy\u0026#34;, 27, \u0026#34;Scientist\u0026#34;]] file_path = \u0026#34;output.csv\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: writer = csv.writer(file) for row in employees: writer.writerow(row) print(f\u0026#34;csv file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # csv file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.csv --\u0026gt; # Name,Age,Job # # Spongebob,30,Cook # # Patrick,37,Unemployed # # Sandy,27,Scientist import json import csv employees = [[\u0026#34;Name\u0026#34;, \u0026#34;Age\u0026#34;, \u0026#34;Job\u0026#34;], [\u0026#34;Spongebob\u0026#34;, 30, \u0026#34;Cook\u0026#34;], [\u0026#34;Patrick\u0026#34;, 37, \u0026#34;Unemployed\u0026#34;], [\u0026#34;Sandy\u0026#34;, 27, \u0026#34;Scientist\u0026#34;]] file_path = \u0026#34;output.csv\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;, newline=\u0026#34;\u0026#34;) as file: writer = csv.writer(file) for row in employees: writer.writerow(row) print(f\u0026#34;csv file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # csv file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.csv --\u0026gt; # Name,Age,Job # Spongebob,30,Cook # Patrick,37,Unemployed # Sandy,27,Scientist 60. reading files 🔍 # Python reading files (.txt, .json, csv)\n\u0026lt;!-- input.txt --\u0026gt; I like pizza! It\u0026#39;s really good! // input.json { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } \u0026lt;!-- input.csv --\u0026gt; Name,Age,Job Spongebob,30,Cook Patrick,37,Unemployed Sandy,27,Scientist file_path = \u0026#34;input.txt\u0026#34; with open(file_path, \u0026#34;r\u0026#34;) as file: content = file.read() print(content) # I like pizza! # It\u0026#39;s really good! The with statement is used to wrap the execution of a block with methods defined by a context manager (see section With Statement Context Managers). This allows common try\u0026hellip;except..finally usage patterns to be encapsulated for convenient reuse.\nimport json file_path = \u0026#34;input.json\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = json.load(file) print(content) print(content[\u0026#34;name\u0026#34;]) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # {\u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34;} # Spongebob import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) print(content) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # \u0026lt;_csv.reader object at 0x0000017D81C4EAA0\u0026gt; import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) for line in content: print(line) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # [\u0026#39;Name\u0026#39;, \u0026#39;Age\u0026#39;, \u0026#39;Job\u0026#39;] # [\u0026#39;Spongebob\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;Cook\u0026#39;] # [\u0026#39;Patrick\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;Unemployed\u0026#39;] # [\u0026#39;Sandy\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;Scientist\u0026#39;] import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) for line in content: print(line[0]) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # Name # Spongebob # Patrick # Sandy 61. dates \u0026amp; times 📅 # import datetime date = datetime.date(2025, 1, 2) print(date) # 2025-01-02 today = datetime.date.today() print(today) # 2025-05-02 time = datetime.time(12, 30, 0) print(time) # 12:30:00 now = datetime.datetime.now() print(now) # 2025-05-02 09:41:55.409676 now = now.strftime(\u0026#34;%H %M %S\u0026#34;) print(now) # 09 41 55 now = now.strftime(\u0026#34;%H:%M:%S\u0026#34;) print(now) # 09:41:55 now = now.strftime(\u0026#34;%H:%M:%S %m-%d-%Y\u0026#34;) print(now) # 09:41:55 05-02-2025 Directive Meaning Example Notes %a Weekday as locale\u0026rsquo;s abbreviated name. Sun, Mon, \u0026hellip;, Sat (en_US); So, Mo, \u0026hellip;, Sa (de_DE) (1) %A Weekday as locale\u0026rsquo;s full name. Sunday, Monday, \u0026hellip;, Saturday (en_US); Sonntag, Montag, \u0026hellip;, Samstag (de_DE) (1) %w Weekday as a decimal number, where 0 is Sunday and 6 is Saturday. 0, 1, \u0026hellip;, 6 %d Day of the month as a zero-padded decimal number. 01, 02, \u0026hellip;, 31 (9) %b Month as locale\u0026rsquo;s abbreviated name. Jan, Feb, \u0026hellip;, Dec (en_US); Jan, Feb, \u0026hellip;, Dez (de_DE) (1) %B Month as locale\u0026rsquo;s full name. January, February, \u0026hellip;, December (en_US); Januar, Februar, \u0026hellip;, Dezember (de_DE) (1) %m Month as a zero-padded decimal number. 01, 02, \u0026hellip;, 12 (9) %y Year without century as a zero-padded decimal number. 00, 01, \u0026hellip;, 99 (9) %Y Year with century as a decimal number. 0001, 0002, \u0026hellip;, 2013, 2014, \u0026hellip;, 9998, 9999 (2) There are many different format codes you can use with strftime. You can always look under the Python strftime Documentation for a comprehensive list and explanations.\nimport datetime date = datetime.date(2025, 1, 2) today = datetime.date.today() time = datetime.time(12, 30, 0) now = datetime.datetime.now() now = now.strftime(\u0026#34;%H:%M:%S %m-%d-%Y\u0026#34;) target_datetime = datetime.datetime(2030, 1, 2, 12, 12, 30, 1) curren_datetime = datetime.datetime.now() if target_datetime \u0026lt; curren_datetime: print(\u0026#34;Target date has passed\u0026#34;) else: print(\u0026#34;Target date has NOT passed\u0026#34;) # Target date has NOT passed 62. ⭐ alarm clock ⏰ # # Python Alarm Clock import time import datetime import pygame # pip install pygame def set_alarm(alarm_time): # ex. \u0026#34;23:00:00\u0026#34; pass if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # pygame 2.6.0 (SDL 2.28.4, Python 3.12.5) # Hello from the pygame community. https://www.pygame.org/contribute.html 👆\u0026#34;This functionality implementation can be found in the pygame library\u0026#39;s initialization file (/.venv/Lib/site-packages/pygame/init.py lines 338-342).\u0026#34; # Enter the alarm time (HH:MM:SS): 09:00:00 # Alarm set for 09:00:00 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) is_running = False if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 10:00:00 # Alarm set for 10:00:00 # 09:42:16 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 10:00:00 # Alarm set for 10:00:00 # 09:42:16 # 09:42:17 # 09:42:18 # ... # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 # Process finished with exit code 0 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) pygame.mixer.init() pygame.mixer.music.load(sound_file) pygame.mixer.music.play() is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 # Process finished with exit code 0 Module pygame.mixer: pygame module for loading and playing sounds\n# pygame.mixer def init(frequency: int = 44100, size: int = -16, channels: int = 2, buffer: int = 512, devicename: str | None = None, allowedchanges: int = 5) -\u0026gt; None # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) pygame.mixer.init() pygame.mixer.music.load(sound_file) pygame.mixer.music.play() while pygame.mixer.music.get_busy(): time.sleep(1) is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 👆That\u0026rsquo;s how to create an alarm clock in Python.\n63. multithreading 🧵 # multithreading = Used to perform multiple tasks concurrently (multithreading)\nGood for I/O bound tasks like reading files or fetching data from APIs\nthreading.Thread(target=my_function)\nimport threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) walk_dog() take_out_trash() get_mail() # You finish walking the dog # You take out the trash # You get the mail import threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) chore1 = threading.Thread(target=walk_dog) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) # All chores are complete! # You take out the trash # You get the mail # You finish walking the dog import threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) chore1 = threading.Thread(target=walk_dog) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking the dog # All chores are complete! import threading import time def walk_dog(first): time.sleep(8) print(f\u0026#34;You finish walking {first}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;,)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking Scooby # All chores are complete! import threading import time def walk_dog(first): time.sleep(8) print(f\u0026#34;You finish walking {first}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # TypeError: walk_dog() takes 1 positional argument but 6 were given # You take out the trash # You get the mail # You finish walking Scooby # All chores are complete! import threading import time def walk_dog(first, last): time.sleep(8) print(f\u0026#34;You finish walking {first} {last}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;, \u0026#34;Doo\u0026#34;)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking Scooby Doo # All chores are complete! 64. request API data ↩️ # PokéAPI\nex. https://pokeapi.co/api/v2/pokemon/pikachu\n# How to connect to an API using Python import requests # pip install requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): pass pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) print(response) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # \u0026lt;Response [200]\u0026gt; HTTP response status codes\nimport requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: print(\u0026#34;Data retrieved!\u0026#34;) else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # Data retrieved! import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: pokemon_data = response.json() print(pokemon_data) else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # { # \u0026#34;abilities\u0026#34;: [ # { # \u0026#34;ability\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;static\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/ability/9/\u0026#34; # }, # \u0026#34;is_hidden\u0026#34;: false, # \u0026#34;slot\u0026#34;: 1 # }, # { # \u0026#34;ability\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;lightning-rod\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/ability/31/\u0026#34; # }, # \u0026#34;is_hidden\u0026#34;: true, # \u0026#34;slot\u0026#34;: 3 # } # ], # \u0026#34;base_experience\u0026#34;: 112, # \u0026#34;height\u0026#34;: 4, # \u0026#34;id\u0026#34;: 25, # \u0026#34;name\u0026#34;: \u0026#34;pikachu\u0026#34;, # \u0026#34;types\u0026#34;: [ # { # \u0026#34;slot\u0026#34;: 1, # \u0026#34;type\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;electric\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/type/13/\u0026#34; # } # } # ], # \u0026#34;weight\u0026#34;: 60 # } import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: pokemon_data = response.json() return pokemon_data else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; pokemon_info = get_pokemon_info(pokemon_name) if pokemon_info: print(f\u0026#34;Name: {pokemon_info[\u0026#39;name\u0026#39;].capitalize()}\u0026#34;) print(f\u0026#34;Id: {pokemon_info[\u0026#39;id\u0026#39;]}\u0026#34;) print(f\u0026#34;Height: {pokemon_info[\u0026#39;height\u0026#39;]}\u0026#34;) print(f\u0026#34;Weight: {pokemon_info[\u0026#39;weight\u0026#39;]}\u0026#34;) # Name: Pikachu # Id: 25 # Height: 4 # Weight: 60 65. PyQt5 GUI intro 🖥️ # Graphical User Interface\n# PyQt5 introduction import sys # pip install PyQt5 from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() def main(): pass if __name__ == \u0026#39;__main__\u0026#39;: main() sys — System-specific parameters and functions\nThis module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available.\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() def main(): app = QApplication(sys.argv) window = MainWindow() window.show() if __name__ == \u0026#39;__main__\u0026#39;: main() # # Process finished with exit code 0 sys.argv\nThe list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter, argv[0] is the empty string.\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow from PyQt5.QtGui import QIcon class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setWindowTitle(\u0026#34;My cool first GUI\u0026#34;) self.setGeometry(700, 300, 500, 500) # self.setGeometry(x, y, width, height) self.setWindowIcon(QIcon(\u0026#34;profile_pic.jpg\u0026#34;)) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 66. PyQt5 labels 🏷️ # # PyQt5 QLabels import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) # (window will be a parent widget) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QFont class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) label.setFont(QFont(\u0026#34;Arial\u0026#34;, 40)) label.setGeometry(0, 0, 500, 100) label.setStyleSheet(\u0026#34;color: #1fff5a;\u0026#34; \u0026#34;background-color: #6fdcf7;\u0026#34; \u0026#34;font-weight: bold;\u0026#34; \u0026#34;font-style: italic;\u0026#34; \u0026#34;text-decoration: underline;\u0026#34;) # Google search for \u0026#34;color picker\u0026#34; def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QFont from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) label.setFont(QFont(\u0026#34;Arial\u0026#34;, 40)) label.setGeometry(0, 0, 500, 100) label.setStyleSheet(\u0026#34;color: #1fff5a;\u0026#34; \u0026#34;background-color: #6fdcf7;\u0026#34; \u0026#34;font-weight: bold;\u0026#34; \u0026#34;font-style: italic;\u0026#34; \u0026#34;text-decoration: underline;\u0026#34;) # label.setAlignment(Qt.AlignTop) # VERTICALLY TOP # label.setAlignment(Qt.AlignBottom) # VERTICALLY BOTTOM # label.setAlignment(Qt.AlignVCenter) # VERTICALLY CENTER # label.setAlignment(Qt.AlignRight) # HORIZONTALLY RIGHT # label.setAlignment(Qt.AlignHCenter) # HORIZONTALLY CENTER # label.setAlignment(Qt.AlignLeft) # HORIZONTALLY LEFT # label.setAlignment(Qt.AlignHCenter | Qt.AlignTop) # CENTER \u0026amp; TOP # label.setAlignment(Qt.AlignHCenter | Qt.AlignBottom) # CENTER \u0026amp; BOTTOM # label.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter) # CENTER \u0026amp; CENTER label.setAlignment(Qt.AlignCenter) # CENTER \u0026amp; CENTER def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 67. PyQt5 images 📷 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QPixmap class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(self) label.setGeometry(0, 0, 250, 250) # label.setGeometry(x, y, width, height) pixmap = QPixmap(\u0026#34;profile_pic.jpg\u0026#34;) label.setPixmap(pixmap) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QPixmap class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(self) label.setGeometry(0, 0, 250, 250) # label.setGeometry(x, y, width, height) pixmap = QPixmap(\u0026#34;profile_pic.jpg\u0026#34;) label.setPixmap(pixmap) label.setScaledContents(True) label.setGeometry((self.width() - label.width()) // 2, (self.height() - label.height()) // 2, label.width(), label.height()) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 68. PyQt5 layout managers 🧲 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout) class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) label1 = QLabel(\u0026#34;#1\u0026#34;, self) label2 = QLabel(\u0026#34;#2\u0026#34;, self) label3 = QLabel(\u0026#34;#3\u0026#34;, self) label4 = QLabel(\u0026#34;#4\u0026#34;, self) label5 = QLabel(\u0026#34;#5\u0026#34;, self) label1.setStyleSheet(\u0026#34;background-color: red;\u0026#34;) label2.setStyleSheet(\u0026#34;background-color: yellow;\u0026#34;) label3.setStyleSheet(\u0026#34;background-color: green;\u0026#34;) label4.setStyleSheet(\u0026#34;background-color: blue;\u0026#34;) label5.setStyleSheet(\u0026#34;background-color: purple;\u0026#34;) # vbox = QVBoxLayout() # vbox.addWidget(label1) # vbox.addWidget(label2) # vbox.addWidget(label3) # vbox.addWidget(label4) # vbox.addWidget(label5) # central_widget.setLayout(vbox) # hbox = QHBoxLayout() # hbox.addWidget(label1) # hbox.addWidget(label2) # hbox.addWidget(label3) # hbox.addWidget(label4) # hbox.addWidget(label5) # central_widget.setLayout(hbox) grid = QGridLayout() grid.addWidget(label1, 0, 0) grid.addWidget(label2, 0, 1) grid.addWidget(label3, 1, 0) grid.addWidget(label4, 1, 1) grid.addWidget(label5, 2, 2) central_widget.setLayout(grid) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 69. PyQt5 buttons 🛎️ # import sys from PyQt5.QtWidgets import QMainWindow, QApplication class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.button = QPushButton(\u0026#34;Click me!\u0026#34;, self) self.initUI() def initUI(self): self.button.setGeometry(150, 200, 200, 100) self.button.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.button.clicked.connect(self.on_click) def on_click(self): print(\u0026#34;Button clicked!\u0026#34;) self.button.setText(\u0026#34;Clicked!\u0026#34;) self.button.setDisabled(True) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.button = QPushButton(\u0026#34;Click me!\u0026#34;, self) self.label = QLabel(\u0026#34;Hello\u0026#34;, self) self.initUI() def initUI(self): self.button.setGeometry(150, 200, 200, 100) self.button.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.button.clicked.connect(self.on_click) self.label.setGeometry(150, 300, 200, 100) self.label.setStyleSheet(\u0026#34;font-size: 50px;\u0026#34;) def on_click(self): self.label.setText(\u0026#34;Goodbye\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 70. PyQt5 checkboxes ✅ # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.checkbox = QCheckBox(\u0026#34;Do you like food?\u0026#34;, self) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.checkbox = QCheckBox(\u0026#34;Do you like food?\u0026#34;, self) self.initUI() def initUI(self): self.checkbox.setGeometry(10, 0, 500, 100) self.checkbox.setStyleSheet(\u0026#34;font-size; 30px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34;) self.checkbox.setChecked(False) # checkbox.*signal*.connect(*slot*) self.checkbox.stateChanged.connect(self.checkbox_changed) def checkbox_changed(self, state): # print(state) # 2 # if state == 2: if state == Qt.Checked: print(\u0026#34;You like food\u0026#34;) else: print(\u0026#34;You DO NOT like food\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 71. PyQt5 radio buttons 🔘 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() self.radio4 = QRadioButton(\u0026#34;In-Store\u0026#34;, self) self.radio5 = QRadioButton(\u0026#34;Online\u0026#34;, self) self.button_group1 = QButtonGroup(self) self.button_group2 = QButtonGroup(self) self.initUI() def initUI(self): self.radio1.setGeometry(0, 0, 300, 50) self.radio2.setGeometry(0, 50, 300, 50) self.radio3.setGeometry(0, 100, 300, 50) self.radio4.setGeometry(0, 150, 300, 50) self.radio5.setGeometry(0, 200, 300, 50) self.setStyleSheet(\u0026#34;QRadioButton{\u0026#34; \u0026#34;font-size: 40px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;padding: 10px;\u0026#34; \u0026#34;}\u0026#34;) self.button_group1.addButton(self.radio1) self.button_group1.addButton(self.radio2) self.button_group1.addButton(self.radio3) self.button_group2.addButton(self.radio4) self.button_group2.addButton(self.radio5) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() self.radio4 = QRadioButton(\u0026#34;In-Store\u0026#34;, self) self.radio5 = QRadioButton(\u0026#34;Online\u0026#34;, self) self.button_group1 = QButtonGroup(self) self.button_group2 = QButtonGroup(self) self.initUI() def initUI(self): self.radio1.setGeometry(0, 0, 300, 50) self.radio2.setGeometry(0, 50, 300, 50) self.radio3.setGeometry(0, 100, 300, 50) self.radio4.setGeometry(0, 150, 300, 50) self.radio5.setGeometry(0, 200, 300, 50) self.setStyleSheet(\u0026#34;QRadioButton{\u0026#34; \u0026#34;font-size: 40px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;padding: 10px;\u0026#34; \u0026#34;}\u0026#34;) self.button_group1.addButton(self.radio1) self.button_group1.addButton(self.radio2) self.button_group1.addButton(self.radio3) self.button_group2.addButton(self.radio4) self.button_group2.addButton(self.radio5) self.radio1.toggled.connect(self.radio_button_changed) self.radio2.toggled.connect(self.radio_button_changed) self.radio3.toggled.connect(self.radio_button_changed) self.radio4.toggled.connect(self.radio_button_changed) self.radio5.toggled.connect(self.radio_button_changed) def radio_button_changed(self): radio_button = self.sender() if radio_button.isChecked(): print(f\u0026#34;{radio_button.text()} is selected\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 72. PyQt5 line edits 💬 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLineEdit class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.line_edit = QLineEdit(self) self.initUI() def initUI(self): self.line_edit.setGeometry(10, 10, 200, 40) self.line_edit.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLineEdit, QPushButton class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.line_edit = QLineEdit(self) self.button = QPushButton(\u0026#34;Submit\u0026#34;, self) self.initUI() def initUI(self): self.line_edit.setGeometry(10, 10, 200, 40) self.button.setGeometry(210, 10, 100, 40) self.line_edit.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) self.button.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) self.line_edit.setPlaceholderText(\u0026#34;Enter your name\u0026#34;) self.button.clicked.connect(self.submit) def submit(self): text = self.line_edit.text() print(f\u0026#34;Hello {text}\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 73. PyQt5 CSS styles 🎨 # CSS: Cascading Style Sheets\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) # PyQt5 setStyleSheet() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QWidget, QHBoxLayout class MainWindow(QMainWindow): def __init__(self): super().__init__() self.button1 = QPushButton(\u0026#34;#1\u0026#34;) self.button2 = QPushButton(\u0026#34;#2\u0026#34;) self.button3 = QPushButton(\u0026#34;#3\u0026#34;) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) hbox = QHBoxLayout() hbox.addWidget(self.button1) hbox.addWidget(self.button2) hbox.addWidget(self.button3) central_widget.setLayout(hbox) self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton{ font-size: 40px; font-family: Arial; padding: 15px 75px; margin: 25px; border: 3px solid; border-radius: 15px; } \u0026#34;\u0026#34;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) # PyQt5 setStyleSheet() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QWidget, QHBoxLayout class MainWindow(QMainWindow): def __init__(self): super().__init__() self.button1 = QPushButton(\u0026#34;#1\u0026#34;) self.button2 = QPushButton(\u0026#34;#2\u0026#34;) self.button3 = QPushButton(\u0026#34;#3\u0026#34;) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) hbox = QHBoxLayout() hbox.addWidget(self.button1) hbox.addWidget(self.button2) hbox.addWidget(self.button3) central_widget.setLayout(hbox) self.button1.setObjectName(\u0026#34;button1\u0026#34;) self.button2.setObjectName(\u0026#34;button2\u0026#34;) self.button3.setObjectName(\u0026#34;button3\u0026#34;) # Google search for \u0026#34;color picker\u0026#34; self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton{ font-size: 40px; font-family: Arial; padding: 15px 75px; margin: 25px; border: 3px solid; border-radius: 15px; } QPushButton#button1{ background-color: hsl(0, 100%, 64%); } QPushButton#button2{ background-color: hsl(122, 100%, 64%); } QPushButton#button3{ background-color: hsl(204, 100%, 64%); } QPushButton#button1:hover{ background-color: hsl(0, 100%, 84%); } QPushButton#button2:hover{ background-color: hsl(122, 100%, 84%); } QPushButton#button3:hover{ background-color: hsl(204, 100%, 84%); } \u0026#34;\u0026#34;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 74. ⭐ digital clock program 🕒 # # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(\u0026#34;12:00:00\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(\u0026#34;12:00:00\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) self.timer.timeout.connect(self.update_time) self.timer.start(1000) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) Google search for \u0026ldquo;ds digital\u0026rdquo;: Download DS-DIGIT.TTF(TrueType Font(.TTF)), move \u0026ldquo;DS-DIGIT.TTF\u0026rdquo; to your project folder\n# Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt from PyQt5.QtGui import QFont, QFontDatabase class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) font_id = QFontDatabase.addApplicationFont(\u0026#34;DS-DIGIT.TTF\u0026#34;) font_family = QFontDatabase.applicationFontFamilies(font_id)[0] my_font = QFont(font_family, 150) self.time_label.setFont(my_font) self.timer.timeout.connect(self.update_time) self.timer.start(1000) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) 75. ⭐ stopwatch program ⏱ # # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() self.time = QTime(0, 0, 0, 0) self.time_label = QLabel(\u0026#34;00:00:00.00\u0026#34;, self) self.start_button = QPushButton(\u0026#34;Start\u0026#34;, self) self.stop_button = QPushButton(\u0026#34;Stop\u0026#34;, self) self.reset_button = QPushButton(\u0026#34;Reset\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): pass def start(self): pass def stop(self): pass def reset(self): pass def format_time(self, time): pass def update_display(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() self.time = QTime(0, 0, 0, 0) self.time_label = QLabel(\u0026#34;00:00:00.00\u0026#34;, self) self.start_button = QPushButton(\u0026#34;Start\u0026#34;, self) self.stop_button = QPushButton(\u0026#34;Stop\u0026#34;, self) self.reset_button = QPushButton(\u0026#34;Reset\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Stopwatch\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) hbox = QHBoxLayout() hbox.addWidget(self.start_button) hbox.addWidget(self.stop_button) hbox.addWidget(self.reset_button) vbox.addLayout(hbox) # Google search for \u0026#34;color picker\u0026#34; self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton, QLabel{ padding: 20px; font-weight: bold; font-family: calibri; } QPushButton{ font-size: 50px; } QLabel{ font-size: 120px; background-color: hsl(200, 100%, 85%); border-radius: 20px; } \u0026#34;\u0026#34;\u0026#34;) self.start_button.clicked.connect(self.start) self.stop_button.clicked.connect(self.stop) self.reset_button.clicked.connect(self.reset) self.timer.timeout.connect(self.update_display) def start(self): self.timer.start(10) def stop(self): self.timer.stop() def reset(self): self.timer.stop() self.time = QTime(0, 0, 0, 0) self.time_label.setText(self.format_time(self.time)) def format_time(self, time): hours = time.hour() minutes = time.minute() seconds = time.second() milliseconds = time.msec() // 10 # // = integer division return f\u0026#34;{hours:02}:{minutes:02}:{seconds:02}.{milliseconds:02}\u0026#34; def update_display(self): self.time = self.time.addMSecs(10) # We are updating the time with +10 milliseconds self.time_label.setText(self.format_time(self.time)) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method 76. ⭐ weather API app ☀️ # This is a fairly useful API to get real-time weather data.\nThe website is openweathermap.org.\nYou will need your own API key, but signing up for an account is free.\nimport sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(\u0026#34;70°F\u0026#34;, self) self.emoji_label = QLabel(\u0026#34;☀️\u0026#34;, self) self.description_label = QLabel(\u0026#34;Sunny\u0026#34;, self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): print(\u0026#34;You get the weather\u0026#34;) def display_error(self, message): pass def display_weather(self, data): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; response = requests.get(url) data = response.json() print(data) def display_error(self, message): pass def display_weather(self, data): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) Current Weather Data API doc: Built-in API request by city name\nSuccessful responses\n200 OK\nThe request succeeded. The result meaning of \u0026ldquo;success\u0026rdquo; depends on the HTTP method:\nGET: The resource has been fetched and transmitted in the message body. HEAD: The representation headers are included in the response without any message body. PUT or POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server. import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; try: response = requests.get(url) response.raise_for_status() data = response.json() if data[\u0026#34;cod\u0026#34;] == 200: self.display_weather(data) except requests.exceptions.HTTPError as http_error: match response.status_code: case 400: print(\u0026#34;Bad request\\nPlease check your input\u0026#34;) case 401: print(\u0026#34;Unauthorized\\nIncorrect API key\u0026#34;) case 403: print(\u0026#34;Forbidden\\nAccess is denied\u0026#34;) case 404: print(\u0026#34;Not found\\nCity not found\u0026#34;) case 500: print(\u0026#34;Internal Server Error\\nPlease try again later\u0026#34;) case 502: print(\u0026#34;Bad Gateway\\nInvalid response from the server\u0026#34;) case 503: print(\u0026#34;Service Unavailable\\nServer is down\u0026#34;) case 504: print(\u0026#34;Gateway Timeout\\nNo response from the server\u0026#34;) case _: print(f\u0026#34;HTTP error occurred\\n{http_error}\u0026#34;) except requests.exceptions.ConnectionError: pass except requests.exceptions.Timeout: pass except requests.exceptions.TooManyRedirects: pass except requests.exceptions.RequestException: pass def display_error(self, message): pass def display_weather(self, data): print(data) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) HTTP response status codes\nHTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:\nInformational responses (100 – 199) Successful responses (200 – 299) Redirection messages (300 – 399) Client error responses (400 – 499) Server error responses (500 – 599) 400 Bad Request\nThe server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n401 Unauthorized\nAlthough the HTTP standard specifies \u0026ldquo;unauthorized\u0026rdquo;, semantically this response means \u0026ldquo;unauthenticated\u0026rdquo;. That is, the client must authenticate itself to get the requested response.\n403 Forbidden\nThe client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client\u0026rsquo;s identity is known to the server.\n404 Not Found\nThe server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Server may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.\nServer error responses\n500 Internal Server Error\nThe server has encountered a situation it doesn\u0026rsquo;t know how to handle.\n502 Bad Gateway\nThis error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.\n503 Service Unavailable\nThe server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This response should be used for temporary conditions and the Retry-After HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.\n504 Gateway Timeout\nThis error response is given when the server is acting as a gateway and cannot get a response in time.\nexception requests.ConnectionError(*args, **kwargs)\nA Connection error occurred.\nexception requests.Timeout(*args, **kwargs)\nThe request timed out.\nCatching this error will catch both ConnectTimeout and ReadTimeout errors.\nexception requests.TooManyRedirects(*args, **kwargs)\nToo many redirects.\nexception requests.RequestException(*args, **kwargs)\nThere was an ambiguous exception that occurred while handling your request.\nimport sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; try: response = requests.get(url) response.raise_for_status() data = response.json() if data[\u0026#34;cod\u0026#34;] == 200: self.display_weather(data) except requests.exceptions.HTTPError as http_error: match response.status_code: case 400: self.display_error(\u0026#34;Bad request:\\nPlease check your input\u0026#34;) case 401: self.display_error(\u0026#34;Unauthorized:\\nIncorrect API key\u0026#34;) case 403: self.display_error(\u0026#34;Forbidden:\\nAccess is denied\u0026#34;) case 404: self.display_error(\u0026#34;Not found:\\nCity not found\u0026#34;) case 500: self.display_error(\u0026#34;Internal Server Error:\\nPlease try again later\u0026#34;) case 502: self.display_error(\u0026#34;Bad Gateway:\\nInvalid response from the server\u0026#34;) case 503: self.display_error(\u0026#34;Service Unavailable:\\nServer is down\u0026#34;) case 504: self.display_error(\u0026#34;Gateway Timeout:\\nNo response from the server\u0026#34;) case _: self.display_error(f\u0026#34;HTTP error occurred:\\n{http_error}\u0026#34;) except requests.exceptions.ConnectionError: self.display_error(\u0026#34;Connection Error:\\nCheck your internet connection\u0026#34;) except requests.exceptions.Timeout: self.display_error(\u0026#34;Timeout Error:\\nThe request timed out\u0026#34;) except requests.exceptions.TooManyRedirects: self.display_error(\u0026#34;Too many Redirects:\\nCheck the URL\u0026#34;) except requests.exceptions.RequestException as req_errror: self.display_error(f\u0026#34;Request Error:\\n{req_errror}\u0026#34;) def display_error(self, message): self.temperature_label.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.temperature_label.setText(message) self.emoji_label.clear() self.description_label.clear() def display_weather(self, data): self.temperature_label.setStyleSheet(\u0026#34;font-size: 75px;\u0026#34;) temperature_k = data[\u0026#34;main\u0026#34;][\u0026#34;temp\u0026#34;] # *main is a dictionary* temperature_c = temperature_k - 273.15 temperature_f = (temperature_k * 9/5) - 459.67 weather_id = data[\u0026#34;weather\u0026#34;][0][\u0026#34;id\u0026#34;] # *weather is a dictionary* weather_description = data[\u0026#34;weather\u0026#34;][0][\u0026#34;description\u0026#34;] self.temperature_label.setText(f\u0026#34;{temperature_f:.0f}°F\u0026#34;) self.emoji_label.setText(self.get_weather_emoji(weather_id)) self.description_label.setText(weather_description) @staticmethod def get_weather_emoji(weather_id): if 200 \u0026lt;= weather_id \u0026lt;= 232: return \u0026#34;🌩️\u0026#34; elif 300 \u0026lt;= weather_id \u0026lt;= 321: return \u0026#34;🌦️\u0026#34; elif 500 \u0026lt;= weather_id \u0026lt;= 531: return \u0026#34;🌧️\u0026#34; elif 600 \u0026lt;= weather_id \u0026lt;= 622: return \u0026#34;❄️\u0026#34; elif 701 \u0026lt;= weather_id \u0026lt;= 741: return \u0026#34;🌫️\u0026#34; elif weather_id == 762: return \u0026#34;🌋\u0026#34; elif weather_id == 771: return \u0026#34;💨“ elif weather_id == 781: return \u0026#34;🌪️\u0026#34; elif weather_id == 800: return \u0026#34;☀️\u0026#34; elif 801 \u0026lt;= weather_id \u0026lt;= 804: return \u0026#34;☁️\u0026#34; else: return \u0026#34;\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) Weather condition codes\n","date":"5 April 2025","externalUrl":null,"permalink":"/posts/programming-python-2-learn/","section":"Blog","summary":"A complete Python tutorial for beginners","title":"Python Learning","type":"posts"},{"content":" This post breaks down the Python Roadmap (2025 edition) from roadmap.sh into a practical, step-by-step guide.\n1. Learn the Basics # Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.\nofficial Python Website article Python - Wiki article Tutorial Series: How to Code in Python article Google’s Python Class article W3Schools - Python Tutorial video Learn Python - Full Course feed Explore top posts about Python ◇Basics Syntax # Setup the environment for python and get started with the basics.\narticle W3Schools - Python article Python Basics article Learn X in Y Minutes / Python video Python for Beginners - Learn Python in 1 Hour ◇Variables and Data Types # Variables are used to store information to be referenced and manipulated in a computer program. They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory. This data can then be used throughout your program.\narticle Variables in Python article W3Schools — Python Variables article Python Data Types article Python for Beginners: Data Types video Python Variables and Data Types ◇Conditionals # Conditional Statements in Python perform different actions depending on whether a specific condition evaluates to true or false. Conditional Statements are handled by if-elif-else statements and MATCH-CASE statements in Python.\narticle Conditional Statements in Python article Python Conditional Statements article How to Use a Match Statement in Python ◇Loops # Loops are used to execute a block of code repeatedly.\narticle Loops in Python article Python “while” Loops (Indefinite Iteration) article Python “for” Loops (Definite Iteration) video Python For Loops ◇Type Casting # The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion: Implicit and Explicit.\narticle Type Conversion and Casting ◇Exceptions # Python exceptions are events that occur during the execution of a program and disrupt the normal flow of the program’s instructions. When an exception is raised, it indicates that an error has occurred. Python provides a way to handle these exceptions using try-except blocks, allowing developers to manage errors gracefully and ensure the program can continue or exit smoothly.\nofficial Exceptions Documentation article Python Exceptions: An Introduction article Errors and Exceptions article Python Exception Handling video Exception Handling in Python ◇Functions, Builtin Functions # Functions In programming, a function is a reusable block of code that executes a certain functionality when it is called. Functions are integral parts of every programming language because they help make your code more modular and reusable. In Python, we define a function with the def keyword, then write the function identifier (name) followed by parentheses and a colon.\nExample\ndef greet(name): print(f\u0026#34;Hello, {name}!\u0026#34;) greet(\u0026#34;World\u0026#34;) official Built-in Functions in Python\narticle Python Functions - W3Schools\narticle Defining Python Functions\n◇Lists, Tuples, Sets, and Dictionaries # Lists: A list is just like dynamic sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python.\nTuple: A Tuple is a collection of Python objects separated by commas. In some ways, a tuple is similar to a list in terms of indexing, nested objects, and repetition but a tuple is immutable, unlike lists that are mutable.\nSet: A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python’s set class represents the mathematical notion of a set.\nDictionary: In python, Dictionary is an ordered (since Py 3.7) [unordered (Py 3.6 \u0026amp; prior)] collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.\narticle Tuples vs. Lists vs. Sets in Python\narticle Python for Beginners: Lists\narticle Python for Beginners: When and How to Use Tuples\nvideo Difference Between List, Tuple, Set and Dictionary in Python\n◇Tuples # Tuples are immutable sequences, meaning that once a tuple is created, its elements cannot be changed. Tuples are often used to store related pieces of information. They are defined by placing the elements inside parentheses () separated by commas.\nofficial Tuples Documentation article When and How to Use Tuples article Python’s tuple Data Type: A Deep Dive With Examples video why are Tuples even a thing? ◇Sets # Python Set is an unordered collection of data types that is iterable, mutable, and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.\narticle An In-Depth Guide to Working with Python Sets article An W3Schools - Python Sets video Python Sets tutorial for Beginners ◇Dictionaries # In Python, a dictionary is a built-in data type that allows you to store key-value pairs. Each key in the dictionary is unique, and each key is associated with a value. Starting from Python 3.7, dictionaries maintain the order of items as they were added.\nofficial Dictionaries in Python article W3 Schools - Dictionaries article Dictionaries in Python 2. Data Structures \u0026amp; Algorithms # A data structure is a named location that can be used to store and organize data. And, an algorithm is a collection of steps to solve a particular problem. Learning data structures and algorithms allow us to write efficient and optimized computer programs.\nroadmap Visit Dedicated DSA Roadmap article Learn DS \u0026amp; Algorithms video Data Structures Illustrated feed Explore top posts about Algorithms ◇Arrays and Linked Lists # Arrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.\narticle Arrays in Python article Linked List Python video Array Data Structure | Illustrated Data Structures video Linked List Data Structure | Illustrated Data Structures ◇Hash Tables # Hash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.\narticle Build a Hash Table in Python article Hash Tables and Hashmaps in Python video Hash Table Data Structure | Illustrated Data Structures ◇Heaps, Stacks and Queues # Stacks: Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it’s called a stack overflow.\nQueue: Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.\nHeap: A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).\narticle Heaps, Stacks, Queues\narticle How to Implement Python Stack?\narticle Python Stacks, Queues, and Priority Queues in Practice\narticle Heap Implementation in Python\nvideo Stack Data Structure | Illustrated Data Structures\nvideo Queue Data Structure | Illustrated Data Structures\n◇Binary Search Tree # A binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node’s left subtree and less than the ones in its right subtree.\narticle How to Implement Binary Search Tree in Python article Binary Search Tree in Python video Tree Data Structure | Illustrated Data Structures ◇Recursion # Recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.\narticle Recursion in Python: An Introduction feed Explore top posts about Recursion ◇Sorting Algorithms # Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order. The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner.\narticle Sorting Algorithms in Python article Python - Sorting Algorithms feed Explore top posts about Algorithms 3. Modules # Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: example.py, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.\nofficial Python Modules article Modules in Python ◇Builtin Modules # Python has a rich standard library of built-in modules that provide a wide range of functionality. Some of the most commonly used built-in modules include: sys, os, math, datetime, random, re, itertools, etc.\nofficial Python Module Index article Python Modules article Python - Built-In Modules ◇Custom Modules # Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: example.py, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.\nofficial Python Modules article Modules in Python article Python Modules and Packages 4. Lambdas # Python Lambda Functions are anonymous function means that the function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python.\narticle Lambdas in Python article How to use Lambda functions video Python Lambda Functions 5. Decorators # Decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate.\narticle Learn Decorators in Python article Python Decorators video Decorators in Python video Python Decorators in 1 Minute 6. Iterators # An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods iter() and next() .\narticle Iterators in Python article Python Iterators article Iterators and Iterables in Python 7. Regular Expressions # A regular expression is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-searching algorithms for “find” or “find and replace” operations on strings, or for input validation.\nofficial Regular Expressions in Python article Python Regular Expressions article Python - Regular Expressions 8. Object Oriented Programming # In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphism, encapsulation, etc., in programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.\narticle Object Oriented Programming in Python ivideo Object Oriented Programming (OOP) In Python - Beginner Crash Course video OOP in Python One Shot video Python OOP Tutorial ◇Classes # A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.\nofficial Classes in Python article Python Classes and Objects video Python OOP Tutorial ◇Inheritance # Inheritance is a fundamental concept in object-oriented programming (OOP) that allows one class to inherit the properties and behavior of another class.\narticle Python Inheritance article Inheritance in Python ◇Methods, Dunder # A method in python is somewhat similar to a function, except it is associated with object/classes. Methods in python are very similar to functions except for two major differences.\nThe method is implicitly used for an object for which it is called. The method is accessible to data that is contained within the class. Dunder or magic methods in Python are the methods that have two prefix and suffix underscores in the method name. Dunder here means “Double Under (Underscores)”. These are commonly used for operator overloading. Few examples for magic methods are: __init__, __add__, __len__, __repr__ etc.\narticle Method vs Function in Python article Python - Magic or Dunder Methods 9. Paceage Managers # Package managers allow you to manage the dependencies (external code written by you or someone else) that your project needs to work correctly.\nPyPI and Pip are the most common contenders but there are some other options available as well.\nOpenSource pypa/pipx feed Explore top posts about Python ◇Poetry # Poetry is a dependency management and packaging tool for Python that runs on Windows, macOS, and Linux. Poetry efficiently installs, manages, and updates packages and their dependencies. Poetry seamlessly creates, saves, loads, and switches between project environments on your local computer. It is designed specifically for Python projects, providing a streamlined workflow for managing dependencies, virtual environments, and building packages.\nPoetry as a package manager helps you find and install packages. If you need a specific version of a package or a different version of Python, Poetry handles both dependency management and virtual environments effortlessly. With just a few commands, you can set up a completely isolated environment to run a different version of Python or package configuration, while maintaining your usual development environment. Poetry’s lock file ensures consistent installs across different environments, enhancing reproducibility and stability of your projects.\nofficial Poetry Docs ◇Conda # Conda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.\nofficial Conda Documentation ◇uv # uv is an “extremely fast” python package installer and resolver.\nOpenSource astral-sh/uv ◇PyPI # PyPI, typically pronounced pie-pee-eye, is a repository containing several hundred thousand packages. These range from trivial Hello, World implementations to advanced deep learning libraries.\nofficial PyPI Website article How to Publish an Open-Source Python Package to PyPI video Getting Started with Pip and PyPI in Python feed Explore top posts about Python ◇Pip # The standard package manager for Python is pip. It allows you to install and manage packages that aren’t part of the Python standard library.\nofficial pip Documentation article Using Pythons pip to Manage Your Projects Dependencies article Python PIP Introduction feed Explore top posts about PIP 10. Common Packages # Python has a rich ecosystem of packages and modules that can be used to get the most out of the language. A package is essentially a directory that contains multiple modules and subpackages. A module is a single file that contains a collection of related functions, classes, and variables. Modules are the basic building blocks of Python code organization. A module can be thought of as a container that holds a set of related code.\nofficial requests official pathlib official asyncio official dataclasses official python-dotenv official numpy iofficial pandas ◇Configuration: pyproject.toml # This file is used to define the project configuration and dependencies. It is a configuration file that contains metadata about the project, such as its name, version, dependencies, and build settings. The pyproject.toml file is used by tools like poetry and flit to manage Python projects and their dependencies.\nofficial Writing pyproject.toml files\n11. List Comprehensions # List comprehensions are a concise way to create a list using a single line of code in Python. They are a powerful tool for creating and manipulating lists, and they can be used to simplify and shorten code.\nofficial Python List Comprehensions article Python - List Comprehension article What Exactly are List Comprehensions in Python? - CodeGuage article Python List Comprehensions Quiz - CodeGuage 12. Generator Expressions # Generator expressions are a concise way to create a generator using a single line of code in Python. They are similar to list comprehensions, but instead of creating a list, they create a generator object that produces the values on-demand, as they are needed. Generator expressions are a useful tool for efficiently producing large sequence of values, as they allow you to create the generator without creating the entire sequence in memory at once. This tends to use less memory, especially for large sequences.\narticle Python Generator Expressions article List Comprehensions in Python and Generator Expressions 13. Paradigms # Python is a multi-paradigm programming language, which means that it supports several programming paradigms. Some of the main paradigms supported by Python are:\nImperative programming: This paradigm focuses on telling the computer what to do, step by step. Python supports imperative programming with features such as variables, loops, and control structures.\nObject-oriented programming (OOP): This paradigm is based on the idea of objects and their interactions. Python supports OOP with features such as classes, inheritance, and polymorphism.\nFunctional programming: This paradigm is based on the idea of functions as first-class citizens, and it emphasizes the use of pure functions and immutable data. Python supports functional programming with features such as higher-order functions, lambda expressions, and generators.\nAspect-oriented programming: This paradigm is based on the idea of separating cross-cutting concerns from the main functionality of a program. Python does not have built-in support for aspect-oriented programming, but it can be achieved using libraries or language extensions.\narticle Python Paradigms\nvideo Learn Functional Programming - Python Course\n14. Context Manager # Context Managers are a construct in Python that allows you to set up context for a block of code, and then automatically clean up or release resources when the block is exited. It is most commonly used with the with statement.\nofficial Context Libraries article Context Managers in Python article Context Managers 15. Python Frameworks # Frameworks automate the common implementation of common solutions which gives the flexibility to the users to focus on the application logic instead of the basic routine processes. Frameworks make the life of web developers easier by giving them a structure for app development. They provide common patterns in a web application that are fast, reliable and easily maintainable.\narticle Pyscript: A Browser-Based Python Framework feed Explore top posts about Python ◇Plotly Dash(Synchronous) # Plotly Dash is a Python framework that allows you to build analytical web applications. It’s a high-level library that enables you to create interactive, web-based data visualization dashboards without requiring extensive knowledge of web development.\nofficial Plotly Dash Documentation official 20 Minutes Tutorial ◇Pyramid(Synchronous) # Pyramid is a general, open source, web application development framework built in python. It allows python developer to create web applications with ease. Pyramid is backed by the enterprise knowledge Management System KARL (a George Soros project).\nofficial Pyramid Website official Pyramid Documentation article Pyramid Framework Introduction ◇gevent(Asynchronous) # gevent is a Python library that provides a high-level interface to the event loop. It is based on non-blocking IO (libevent/libev) and lightweight greenlets. Non-blocking IO means requests waiting for network IO won’t block other requests; greenlets mean we can continue to write code in synchronous style.\nofficial gevent Website OpenSource gevent/gevent article gevent For the Working Python Developer ◇aiohttp(Asynchronous) # aiohttp is a Python 3.5+ library that provides a simple and powerful asynchronous HTTP client and server implementation.\nofficial aiohttp docs article Creating a RESTful API with Python and aiohttp video Python Asyncio, Requests, Aiohttp | Make faster API Calls ◇Tornado(Asynchronous) # Tornado is a scalable, non-blocking web server and web application framework written in Python. It was developed for use by FriendFeed; the company was acquired by Facebook in 2009 and Tornado was open-sourced soon after.\nofficial Tornado Website article A Step-by-Step Tutorial on Python Tornado video Tornado Python Framework ◇Sanic(Asynchronous) # Sanic is a Python 3.7+ web server and web framework that’s written to go fast. It allows the usage of the async/await syntax added in Python 3.5, which makes your code non-blocking and speedy.\nofficial Sanic Website\n◇Fast API(Synchronous + Asynchronous) # FastAPI is a Web framework for developing RESTful APIs in Python. FastAPI is based on Pydantic and type hints to validate, serialize, and deserialize data and automatically auto-generate OpenAPI documents.\nofficial FastAPI Documentation video Create an API with Fast-API (Full 19 Hour Course) feed Explore top posts about FastAPI ◇Django(Synchronous + Asynchronous) # Django is a free and open-source, Python-based web framework that follows the model–template–views architectural pattern. It is maintained by the Django Software Foundation, an independent organization established in the US as a 501 non-profit.\nofficial Django Website official Getting Started article Is Django Synchronous or Asynchronous? video Python Django Tutorial for Beginners feed Explore top posts about Django ◇Flask(Synchronous + Asynchronous) # Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. Instead, it provides flexibility by requiring you to choose and integrate the best libraries for your project’s needs.\nofficial Flask Website official Flask Tutorial feed Explore top posts about Flask 16. Concurrency # Concurrency in Python allows multiple tasks to be executed simultaneously using different approaches. GIL (Global Interpreter Lock) limits thread execution, making multithreading less efficient for computational tasks, but suitable for I/O. Multiprocessing, using the multiprocessing module, allows multiple cores to be utilized, providing true parallelism. Asynchrony via asyncio is optimal for I/O operations, allowing thousands of connections to be processed simultaneously without blocking. The choice of approach depends on the nature of the task.\nofficial Concurrent Execution article Python Concurrency ◇Multiprocessing # Multiprocessing utilizes multiple processes, each with its own GIL. This allows full utilization of multiple processor cores, which is effective for computationally intensive tasks. Python’s multiprocessing module supports creating processes and exchanging data between them.\nofficial Python Documentation article Multiprocessing in Python with Example article Multiprocessing in Python ◇Asynchrony # Asynchronous programming, supported by asyncio, allows code to be executed without blocking, using async and await. This is especially useful for I/O tasks such as networking or file manipulation, allowing thousands of connections to be handled without blocking the main thread.\nofficial Python AsyncIO library article Async IO in Python: A Complete Walkthrough ◇GIL # GIL is a mechanism that allows only one thread to execute Python code at a time. This limitation is related to memory management in CPython and can reduce the efficiency of multithreaded applications on multi-core systems.\narticle What is GIL? ◇Threading # Multithreading allows multiple threads within a single process. However, because of GIL, threads cannot run in parallel on different cores, which makes multithreading suitable for I/O tasks (e.g., network requests) but not for computational tasks.\nofficial Python Threading Library article Introduction to Threading in Python 17. Environments # ◇Pipenv # Pipeline Environment (pipenv) is a tool that aims to bring the best of all packaging worlds (bundled, requirements.txt, setup.py, setup.cfg, etc.) to the Python world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds.\nofficial Pipenv Documentation ◇virtualenv # virtualenv is a tool to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\nofficial Virtual Environments ◇pyenv # pyenv is a tool for managing multiple versions of the Python programming language on Unix-like systems. It works by setting environment variables to point to the directory where the desired version of Python is installed. This allows you to switch between different versions of Python without having to modify your system’s default Python installation.\nOpenSource pyenv/pyenv 18. Static Typing # Static typing can be a powerful tool to help you catch bugs before they happen. It can also help you understand the code you’re working with, and make it easier to maintain and refactor.\nofficial Static Typing in Python ◇Pydantic # Pydantic is a python library for data validation and settings management using python type annotations.\nofficial Pydantic Documentation ◇pyre # pyre is a static type checker for Python. It is a tool that helps you find type errors in your Python code. Pyre is designed to be fast, scalable, and easy to use. It is used at Facebook to help developers catch type errors before they make it to production.\nofficial pyre Documentation ◇pyright # pyright is a static type checker for Python. It is a Microsoft product and is written in TypeScript. It is a language server that uses the Language Server Protocol (LSP) to communicate with the editor. It is a good alternative to mypy and pytype.\nofficial Pyright Documentation ◇mypy # mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or “duck”) typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking. Mypy type checks standard Python programs; run them using any Python VM with basically no runtime overhead.\nofficial mypy documentation OpenSource python/mypy ◇typing # Typing is a module in Python that provides runtime support for type hints. The typing module defines a standard set of names that can be used to describe types in the Python language. The typing module was added to the standard library in Python 3.5.\nofficial Typing Module 19. Code Formatting # Python code formatting is crucial for maintaining readability, consistency, and reducing errors. Black is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.\nofficial Pylint for Python official Black Documentation ◇yapf # yapf is a formatter for Python files. It is a tool that automatically formats Python code to conform to the PEP 8 style guide. It is similar to black but has more configuration options.\nOpenSource google/yapf ◇black # black is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.\nofficial Getting Started with Black official Black Documentation ◇ruff # An extremely fast Python linter and code formatter, written in Rust.\nofficial Ruff documentation 20. Documentation # ◇Sphinx # Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and licensed under the BSD license.\nofficial Sphinx Website 21. Testing # Testing in programming means checking if your code works as expected. It’s a systematic way to find and fix errors (bugs) before your code goes live. Imagine building a beautiful house without checking if the walls are straight or the roof doesn’t leak—that’s what coding without testing can feel like!\nofficial Unit Testing in Python article Python Testing Tutorial ◇tox # Tox is a tool for automating test environment management and testing against multiple interpreter configurations. It is particularly useful for Python codebase that need to support multiple versions of Python.\nofficial Tox Documentation ◇nose # Nose is another opensource testing framework that extends unittest to provide a more flexible testing framework. Note that Nose is no longer maintained and pytest is considered the replacement.\nofficial Introduction to Nose article Getting Started With Nose In Python ◇unittest / pyUnit # PyUnit is an easy way to create unit testing programs and UnitTests with Python. (Note that docs.python.org uses the name “unittest”, which is also the module name.)\nofficial PyUnit Docs article How To Use unittest to Write a Test Case for a Function in Python article A Gentle Introduction to Unit Testing in Python ◇doctest # Python’s standard library comes equipped with a test framework module called doctest. The doctest module programmatically searches Python code for pieces of text within comments that look like interactive Python sessions. Then, the module executes those sessions to confirm that the code referenced by a doctest runs as expected.\nofficial Doctest Module article How To Write Doctests in Python ◇pytest # pytest is a mature full-featured Python testing tool that helps you write better programs.\nofficial Pytest Docs article Pytest Tutorial article Effective Python Testing With Pytest feed Explore top posts about Python ","date":"8 March 2025","externalUrl":null,"permalink":"/posts/programming-python-1-roadmap/","section":"Blog","summary":"Python Roadmap","title":"Python Roadmap","type":"posts"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/tags/roadmap/","section":"Tags","summary":"","title":"Roadmap","type":"tags"},{"content":"As for why Python is recommended, I suggest reading Eric Raymond\u0026rsquo;s evaluation of several major programming languages, as well as his article \u0026ldquo;Why Python?\u0026rdquo;.\n","date":"2 March 2025","externalUrl":null,"permalink":"/posts/programming-python-0-overview/","section":"Blog","summary":"Python Series","title":"Python Overview","type":"posts"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/series/how-to-master-japanese/","section":"Series","summary":"","title":"How to Master Japanese","type":"series"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/japanese/","section":"Tags","summary":"","title":"Japanese","type":"tags"},{"content":" ★Learning Resources # The Resources ★📖 Dictionaries # Jisho.org: Japanese Dictionary Takoboto | Japanese dictionary and Nihongo learning tool How to Pronounce Japanese Like a Native | Youglish ★📖 Reading Resources # Aozora Bunko Aozora Bunko Assistant National Diet Library Search (NDL Search) Z-library Project - eBook Library Z. Download free Books Let\u0026rsquo;s Become a Novelist - A Novel Posting Site for Everyone ★🎧 Listening Practice # ◇Bilingual Subtitled Videos # Kamigami Subtitle Group: Documentaries and Anime NHK High School Lectures: Online short videos for Japanese high school students ◇News # NEWS WEB EASY: A slower version of NHK, but it sounds like machine-generated audio, suitable for interpreting practice. Aozora Reading: Some works from Aozora Bunko are read by Japanese people. You can find articles of interest to listen to. ANNnewsCH: Each video comes with a transcript (subtitles) in the description, perfect for intensive listening. TV Tokyo BIZ: Mainly economic news, each video also comes with a transcript in the description, highly recommended. ABC TV News: The first sentence in the description is a summary of the news, followed by the transcript. Great for summarization practice. ★📚 Grammar Explanations # Basic Verb Handbook | Always something new to learn Onomatopoeia Compound Verb Lexicon | Comprehensive but scattered in textbooks Learn Japanese – Tae Kim\u0026rsquo;s Guide to Learning Japanese IMABI Today – Guided Japanese Mastery ★📊 Text Difficulty Assessment # Chuta\u0026rsquo;s Toolbox: Assesses the difficulty of vocabulary in a text, categorized by JLPT levels. Japanese Text Difficulty Discrimination System: Also assesses vocabulary difficulty but not by JLPT levels, providing more data. Learning Item Analysis System: Assesses grammar difficulty in a text, not categorized by JLPT levels. ★📜 Miscellaneous # Japanese webpage furigana OJAD - Suzuki-kun\u0026rsquo;s Prosodic Tutor: This webpage can mark the pitch accent of a sentence and provide machine-generated audio. Kanbun HTML: Achieves beautiful Kanbun typesetting through HTML syntax. ★🎓 Thesis Related # J-STAGE: Allows free downloads of papers without login. CiNii: Use Detailed Search - Full Text Link - Full Text Available to search for downloadable papers. Academic Institutional Repository Database: Download papers and other data under Files. National Institute for Japanese Language and Linguistics: Japanese Research and Japanese Education Literature Database: Papers marked with Full Text Available can be downloaded. ★✍️ Practice Resources # ◇Kana Tests # learn kana ◇Writing Practice: # Children\u0026rsquo;s Character Table Hiragana/Katakana Practice Grid Paper Hiragana/Katakana Chart Hiragana Writing Practice Sheet 1 2 3 Blank Writing Practice Sheet Self-Introduction Katakana (including Hiragana) Website Mnemonic jpg1 jpg2 jpg3 jpg4 jpg5 jpg6 pdf Mnemonic Website 1 2 3 4 Hiragana Blank Fill-in Printables 1 2 NHK Japanese Hiragana NHK Japanese Learning Platform 1000 Kanji List ◇Pronunciation Practice # Downloadable audio files for comparison practice (basic_sounds.zip). Recommended Ancient Poem \u0026ldquo;Iroha\u0026rdquo;: Contains all Hiragana (except 「ん」), suitable as practice material. ","date":"1 March 2025","externalUrl":null,"permalink":"/posts/japanese-6-resources/","section":"Blog","summary":"A curated collection of recommended Japanese learning resources, tools, and practice materials for learners at all levels.","title":"Japanese Learning Resources","type":"posts"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/categories/language/","section":"Categories","summary":"","title":"Language","type":"categories"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/resources/","section":"Tags","summary":"","title":"Resources","type":"tags"},{"content":" ★Features of the Textbook # Irodori, developed by the Japan Foundation, is a Japanese language textbook series designed specifically for foreigners, aiming to help learners acquire basic communication skills for daily life and work in Japan.\nThe core philosophy of Irodori is to foster mutual understanding through communication and cultural awareness. The textbook not only focuses on language knowledge but also emphasizes practical application in real-life scenarios. Its learning objectives are based on the JF Standard for Japanese-Language Education (Can-do), enabling learners to handle various everyday situations in Japan, such as shopping, work, and social interactions.\nKey features of Irodori:\nExpands what learners \u0026ldquo;can do\u0026rdquo; in Japanese living scenarios Covers Japanese proficiency at AI–A2 levels Aligns with the \u0026ldquo;JF Can-do for Life in Japan\u0026rdquo; framework Promotes mutual understanding through communication and cultural exchange Includes diverse topics closely related to daily life Utilizes rich audio and authentic materials for practical Japanese learning Solidifies grammar and kanji knowledge Freely downloadable from the official website Loosely connected to the Marugoto series ★Textbook Structure # The IRODORI series consists of three volumes: Starter (A1), Elementary 1 (A2), and Elementary 2 (A2). Each volume is organized as follows:\nTextbook (PDF) Audio Files (MP3) Supplementary Materials ※ 【Cover】 【Lessons 1–18】 【Answer Key】 【Preface】【How to Use This Textbook】 【Vocabulary List】 【Table of Contents】 【Teaching Guide】 【Lessons 1–18】\nExercises, Listening Scripts, Kanji Vocabulary, Grammar Notes, Japanese Life \u0026amp; Culture 【Can-do Self-Assessment Sheet】 【Copyright Page】 ★How to Use the Textbook # ◇Lesson Structure # Each volume (Starter, Elementary 1, Elementary 2) comprises 9 themes and 18 lessons. Each lesson is designed for 150–180 minutes of instruction, though timing may vary based on exercise volume.\n【Theme \u0026amp; Lesson Title】 【Warm-up Questions】 Helps learners contextualize the lesson’s topic through personal reflection or group discussion. 【Exercises】 Core component for achieving Can-do goals. Each lesson includes 3–6 exercises to master practical Japanese. 【Listening Scripts】 【Kanji Vocabulary】 Introduces kanji encountered in exercises. 【Grammar Notes】 Explains sentence patterns and expressions from the lesson. 【Japanese Life \u0026amp; Culture】 Provides insights into cultural or situational contexts from the exercises. ◇Exercise Types and Goals # Each lesson includes Listening, Speaking, Reading, and Writing exercises. While each exercise is standalone, they are thematically linked within a lesson. Speaking exercises are emphasized across the series.\nSpeaking Ask/answer questions about familiar topics; give simple descriptions about oneself or surroundings. Listening Grasp key points in daily conversations; extract essential information from announcements or simple news. Reading Understand notices, signs, menus, or pamphlets written in plain Japanese. Writing Fill out forms, send messages, or post simple updates on social media. ◇Universal Learning Flow # All exercises follow this sequence: ➊ Confirm Can-do Review the exercise’s goal. ➋ Exercise Practice listening/speaking/reading/writing. ➌ Self-Assessment Use the Can-do sheet to evaluate progress and jot down reflections. 🟢 Step-by-Step Guide: 1. Review Can-do Goal 2. Preview Vocabulary 3. Listen/Read (Model Dialogue) 4. Focus on Form ↓ Fill in blanks to observe patterns. ↓ Analyze usage via Grammar Notes. ↓ Reinforce with the Grammar Workbook (optional). 5. Speaking Practice Shadowing or role-play after mastering forms. 6. Can-do Check Reflect and plan next steps. IRODORI prioritizes input-first learning: noticing forms, deducing rules, then applying them. Avoid starting with grammar drills—contextual practice is key.\n❌ Ineffective Approach:\nTeach grammar → Explain via Grammar Notes → Drill with Workbook → Begin exercises. The Grammar Workbook supplements IRODORI but is meaningless without the main textbook’s communicative practice.\n◇Speaking Exercises # Speaking ➊ Confirm Can-do ➋ Vocabulary Prep Learn terms via: 1. Match audio to illustrations 2. Imitate pronunciation 3. Select correct image after listening (linking meaning to form). ➌ Listen to Model Dialogue Focus on gist, not details. Two types: - Short dialogues (no script): Later found in Listening Scripts. - Long dialogues (with script): Read after initial listening. ➍ Focus on Form 1. Notice underlined patterns in dialogues. 2. Answer ❕ questions to deduce rules before checking Grammar Notes. 3. Re-listen to observe usage. ➎ Speaking Practice 1. Listen to model dialogue 2. Shadowing: Repeat with/without scripts. 3. Guided drills (e.g., word substitution) 4. Free conversation: Role-play or personalize. ➏ Self-Assessment ℹ️ Shadowing: Instant repetition of heard phrases, like an echo, to improve fluency.\n◇Listening Exercises # Listening ➊ Confirm Can-do ➋ Vocabulary Prep Same as Speaking. ➌ Listening Task 1. Preview context (setting/purpose). 2. Answer questions while listening (e.g., match images, note keywords). 3. Re-listen after checking new terms (optional). ➍ Focus on Form Analyze new patterns if present. ➎ Self-Assessment ◇Reading Exercises # Reading ➊ Confirm Can-do ➋ Reading Task 1. Preview context. 2. Skim for gist → Scan for details. - Real-life texts lack furigana; guess meanings from context. - Check 🔖 Key Words afterward. ➌ Reflect Compare with personal experiences (optional discussion). ➍ Focus on Form Study patterns via fill-in-blanks (if applicable). ➎ Self-Assessment ◇Writing Exercises # Writing ➊ Confirm Can-do ➋ Writing Task 1. Review context. 2. Read examples (may reuse Reading texts). 3. Write (handwrite or type, as situation demands). 4. Share feedback (peer review for real-world relevance). ➌ Self-Assessment ◇Kanji Vocabulary # Learners practice 429 kanji (across all levels) in context. Goals: recognize meanings in daily life and input via devices (no handwriting required). Steps:\n➊ Check readings/meanings (multiple fonts shown).\n➋ Read in sentences.\n➌ Type on devices (handwriting optional for enthusiasts).\n◇Grammar Notes # Explains patterns from \u0026ldquo;Focus on Form\u0026rdquo; sections. Includes:\nForm/meaning/usage per lesson. Additional examples or comparisons. Part-of-speech labels:\nN = Noun | ナA = ナ-adjective | イA = イ-adjective | V = Verb | S = Sentence. Teachers may use this for explanations or assign as homework. For deeper grammar study, use MARUGOTO’s \u0026ldquo;Rikai\u0026rdquo; series, but stay aligned with Can-do goals.\n◇Japanese Life \u0026amp; Culture # A photo-rich column offering practical tips about Japan. Topics align with lesson themes and cater to learners unfamiliar with Japan. Can be explored independently or in class.\nReference Links:\nIrodori Official Site JF Can-do for Life in Japan ","date":"28 February 2025","externalUrl":null,"permalink":"/posts/japanese-5-textbook-irodori/","section":"Blog","summary":"Introduces the content features and study recommendations of the Japanese textbook ‘いろどり’.","title":"Irodori（いろどり）","type":"posts"},{"content":"","date":"28 February 2025","externalUrl":null,"permalink":"/tags/textbook/","section":"Tags","summary":"","title":"Textbook","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/grammar/","section":"Tags","summary":"","title":"Grammar","type":"tags"},{"content":" ★ Notes # The notes are divided into key sections to reflect the course’s progressive structure:\nPart Title Lessons 1 Core Sentence Structure and Basic Particles 1–20 2 Verbs, Adjectives, and Tenses 21–45 3 Complex Sentences and Advanced Particle Usage 46–70 4 Advanced Grammar and Expressions 71–93 Playlist here: Organic Japanese with Cure Dolly\u0026rsquo;s Japanese from scratch: the game-changing course in organic Japanese - YouTube\n★ Core Sentence Structure # ◇ Core Concept: The Sentence Train # All Japanese sentences consist of A (Subject/Main Carriage) and B (Predicate/Engine). A が B is the most basic sentence form. が is the “pin” linking the subject to the predicate. ◇ Three Basic Sentence Types # A does B (Verb Sentence): A が [verb ending in u]\nExample:\nさくら が あるく (Sakura ga aruku) – Sakura walks. flowchart LR b\u003earuku] a{{Sakura}} subgraph \"う *U-Train (verb)*\" direction LR subgraph A[\" A (MAIN CAR) \"] direction LR a end subgraph B[\" B (ENGINE) \"] direction LR b end end a e0@--\u003e|が| B classDef mainNode fill:#1B9AAA,color:#F6F5EB,stroke:#1B9AAA,letter-spacing:2px class A,B mainNode classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate A is B (Noun Sentence): A が [noun] だ\nだ (da) is the copula, like “is”. Example:\nさくら が 日本人(にほんじん) だ – Sakura is Japanese. flowchart LR b\u003eNihonjin だ] a{{Sakura が}} subgraph \"だ *DA-Train (noun)*\" direction LR a --\u003e b end A is B (Adjective Sentence): A が [i-adjective]\ni-adjectives contain the meaning of “is” inherently—だ is not needed. Example:\nペン が あかい – The pen is red. flowchart LR b\u003eakai い] a{{Pen が}} subgraph \"い *I-Train 'adjective'*\" direction LR a --\u003e b end ◇ Core Concept: Invisible Subject (Zero Pronoun) # In Japanese, all minor pronouns—such as \u0026ldquo;it,\u0026rdquo; \u0026ldquo;she,\u0026rdquo; \u0026ldquo;he,\u0026rdquo; \u0026ldquo;I,\u0026rdquo; and \u0026ldquo;they\u0026rdquo;—can be replaced by an invisible medium, the zero pronoun. However, it’s crucial to remember that they still exist implicitly.\nWhen context is clear, the subject A が is often omitted but still exists logically. Very common in spoken and written Japanese.\nExample:\nドりーだ – I\u0026rsquo;m Dolly.\nflowchart LR b\u003eDolly だ] a{{⌀ が}} subgraph \"⌀ = I (watashi)\" direction LR a --\u003e b end classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText Example:\nうさぎだ – It is a rabbit!\nflowchart LR b\u003eusagi だ] a{{⌀ が}} subgraph \"⌀ = *it*: the thing moving in the trees\" direction LR a --\u003e b end classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText Example:\nどようびだ – It is Saturday!\nflowchart LR b\u003edoyoubi だ] a{{⌀ が}} subgraph \"⌀ = *it*: today\" direction LR a --\u003e b end classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText ◇ Particle を (o) # This carriage is painted white because it isn’t part of the core train. The core train is always made up of just two pieces: the Engine and the Main Carriage. So whenever we spot a white carriage, we know it’s there to tell us something extra about either the engine or the main carriage.\nObject: The noun we are doing something to.\nGrammar role: Marks the direct object of a verb.\nExample:\n(私 が) ケーキ を 食べる – I eat cake.\nflowchart LR b\u003etaberu] a{{watashi が}} o{{keeki を}} a e0@\u003c--\u003e|Core Sentence| b subgraph \"Object\" direction LR a --\u003e o --\u003e b end classDef whiteText fill:none class o whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate ⇩ flowchart LR b\u003etaberu] a{{⌀ が}} o{{keeki を}} subgraph \"Object\" direction LR a --\u003e o --\u003e b end classDef whiteText fill:none class o whiteText classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText ⇩ flowchart LR a{{私が}} b\u003etaberu] o{{keeki を}} subgraph \"Object\" direction LR o --\u003e b end a --\u003e o classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText classDef whiteText fill:none class o whiteText ⇩ flowchart LR a{{私が}} subgraph \"I eat cake\" b(\"ケーキを食べる\") end a --\u003e b classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText ◇ Super Basic Japanese Vocabulary List # This list contains the most basic vocabulary for beginner learners, useful for building “A is B” and “A does B” sentences. Includes hiragana, romaji, and Chinese/English meanings.\n📘 Click to expand the vocabulary table Category Japanese Romaji English/中文 Noun うさぎ usagi rabbit / 兔子 Noun ひと hito person / 人 Noun こ ko child / 孩子 Noun とり tori bird / 鸟 Noun おんな の ひと onna no hito woman / 女人 Noun おんな の こ onna no ko girl / 女孩 Noun おとこ の ひと otoko no hito man / 男人 Noun おとこ の こ otoko no ko boy / 男孩 Noun にほんじん Nihonjin Japanese person / 日本人 Noun あめりかじん Amerikajin American person / 美国人 Noun ふらんすじん Furansujin French person / 法国人 Noun ぱん pan bread / 面包 Free Gift ぺん pen pen / 钢笔 Free Gift あいすくりーむ aisu kuriimu ice cream / 冰淇淋 Free Gift たくしー takushii taxi / 出租车 Free Gift けーき keeki cake / 蛋糕 Verb あるく aruku walk / 走路，步行 Verb とぶ tobu jump / 跳跃\nfly / 飞行 Verb うたう utau sing / 唱歌 Adjective あかい akai red / 红色的 Adjective あおい aoi blue / 蓝色的 Adjective うれしい ureshii happy / 高兴的，愉快的 Adjective おいしい oishii tasty / 好吃的\ndelicious / 美味的 Adjective おもしろい omoshiroi interesting / 有趣的\namusing / 好玩的 Study Tips\nPrioritize hiragana: Beginners should focus on mastering hiragana first. Gradual progression: After basics, move on to kanji and katakana. Practice sentences: Use these words to form simple sentences. Pronunciation: Use romaji to help practice correct pronunciation. ★ WA-particle # ◇ Particle に (ni) # に is a white car\nIt makes a kind of trio with が and を.\nIn \u0026ldquo;A does B\u0026rdquo; sentences, が tells us who does the doing, を tells us what it is done to, and に tells us the ultimate target of that doing. Each carriage is noun+particle.\nflowchart LR b{{に}} a{{が}} o{{を}} subgraph \"Logical trio(A does B)\" direction LR a~~~o~~~b subgraph \"doer(subject)\" direction LR a end subgraph \"done-to(object)\" direction LR o end subgraph \"target(indirect object)\" direction LR b end end classDef whiteText fill:none class o,b whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate All sentences have が!\nflowchart LR b\u003eなげる nageru throw] a{{わたしが watashi-ga I}} o{{ぼーるを booru-wo ball}} a e0@\u003c--\u003e|Core| b subgraph \"White car → engine info\" direction LR a --\u003e o --\u003e b end classDef whiteText fill:none class o whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate ⇩ \"Watashi-ga booru-wo nageru\"\n\"I throw the ball.\" Now, if we say, \u0026ldquo;watashi ga booru-wo sakura-ni nageru\u0026rdquo;, this means \u0026ldquo;I throw a ball at Sakura\u0026rdquo; (or \u0026ldquo;to Sakura\u0026rdquo;).\nSakura is the destination, the target, of my throwing.\nflowchart LR b\u003eなげる nageru throw] a{{わたしが watashi-ga I}} o{{ぼーるを booru-wo ball}} n{{さくらに sakura-ni to/at Sakura}} a e0@\u003c--\u003e|Core| b subgraph \"White car → engine info\" direction LR a --\u003e o --\u003e n --\u003e b end classDef whiteText fill:none class o,n whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate The order of the words doesn\u0026rsquo;t really matter the way it does in English. What matters is the logical particle.\nSo if I say, \u0026ldquo;watashi-ni sakura-ga booru-wo nageru\u0026rdquo;, I\u0026rsquo;m saying, \u0026ldquo;Sakura throws the ball at me\u0026rdquo;.\nflowchart LR b\u003eなげる nageru throw] a{{さくらが sakura-ga Sakura /doer/}} o{{ぼーるを booru-wo ball}} n{{わたしに watashi-ni to/at me}} a e0@\u003c--\u003e|Core| b subgraph \"White car → engine info\" direction LR n --\u003e a --\u003e o --\u003e b end classDef whiteText fill:none class o,n whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate If I say, \u0026ldquo;booru-ga watashi-ni sakura-wo nageru\u0026rdquo;, I\u0026rsquo;m saying, \u0026ldquo;The ball throws Sakura at me\u0026rdquo;. It doesn\u0026rsquo;t make any sense, but we might want to say it in a fantasy novel or something. We can say whatever we like in Japanese so long as we have the logic of the particles correct.\nflowchart LR b\u003eなげる nageru throw] a{{ぼーるが booru-ga ball /doer/}} o{{さくらを sakura-wo Sakura}} n{{わたしに watashi-ni to/at me}} a e0@\u003c--\u003e|Core| b subgraph \"White car → engine info\" direction LR a --\u003e n --\u003e o --\u003e b end classDef whiteText fill:none class o,n whiteText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate ◇ Particle は (wa) # wa can never mark part of core sentence (main car or engine)\nwa can never mark any other part of the logical sentence (white car)\nnon-logical particle\nit\u0026rsquo;s a flag\nWA=TOPIC + COMMENT STRUCTURE\nは marks the “thing we’re talking about”—it pulls an element out of the sentence as the topic or context.\nは overrides が and を, but not other particles.\nX は Y が Z is a very common structure, meaning “As for X, Y is Z.”\nflowchart LR b\u003eアメリカ人だ Amerikajin da am American] a{{⌀ が ⌀ ga I}} A@{ shape: flag, label: \"わたしは watashi wa as for me\" } subgraph \"Topic Comment structure\" direction LR subgraph X1[\"wa-flagged\"] direction LR A end subgraph X2[\"full logical sentence comment\"] direction LR a --\u003e b end a---X1---b end classDef whiteText fill:none class A whiteText classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate ⇩ \"Watashi-wa zero-ga Amerikajin da\"\n\"As for me, I am American.\" Now let\u0026rsquo;s introduce WA into this sentence.\n\"Watashi-wa sakura-ni booru-wo nageru.\" ⇩ \"Watashi-wa Zero-ga sakura-ni booru-wo nageru.\"\n\"As for me, I throw the ball at Sakura.\" flowchart LR b\u003eなげる nageru throw] a{{⌀が ⌀-ga I}} o{{ぼーるを booru-wo ball}} n{{さくらに sakura-ni to/at Sakura}} A@{ shape: flag, label: \"わたしは watashi wa as for me\" } a e0@\u003c--\u003e|Core| b A e1@==\u003e X subgraph X[\"White car → engine info\"] direction LR a --\u003e n --\u003e o --\u003e b end classDef whiteText fill:none class o,n whiteText e1@{ curve: linear } classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class a grayText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate Now let\u0026rsquo;s give the WA to the ball: \u0026ldquo;Booru-wa watashi-ga sakura-ni nageru.\u0026rdquo;\nWhat we are saying now is \u0026ldquo;As for the ball, I throw it at Sakura\u0026rdquo;.\nflowchart LR b\u003eなげる nageru throw] a{{わたしが watashi-ga I}} o{{⌀を ⌀-wo it}} n{{さくらに sakura-ni to/at Sakura}} A@{ shape: flag, label: \"ぼーるは booru wa as for the ball\" } a e0@\u003c--\u003e|Core| b A e1@==\u003e X subgraph X[\"White car → engine info\"] direction LR a --\u003e n --\u003e o --\u003e b end classDef whiteText fill:none class n whiteText e1@{ curve: linear } classDef grayText fill:none,color:#888888,stroke:#888888,font-family:Arial; class o grayText classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite; class e0 animate The important thing to notice here is that when we change a logical particle from one noun to another, we change what\u0026rsquo;s actually happening in the sentence.\nBut when we change the non-logical particle WA (は) from one noun to another — I can change it from me to the ball — it makes no difference to the logic of the sentence.\nIt only changes the emphasis: I\u0026rsquo;m now talking about the ball — “as for the ball…”.\nWhat happens to the ball is that I throw it at Sakura. But who is doing what, and what they are doing it with, and what they are doing it to — none of that changes when you change the WA particle.\nAnd that’s the key difference between a logical and a non-logical particle.\n◇ Particle も (mo) # \u0026ldquo;Also / Too\u0026rdquo; Marker も indicates sameness or similarity to the previous statement. Like は, it overrides が and を. Example: 私 が 行く。あなた も 行く。 – I will go. You will go too. Example: ケーキ を 食べる。クッキー も 食べる。 – I eat cake. I also eat cookies. ◇ Particle の (no) — Possession \u0026amp; Nominalization # 1. Particle の (no) # Possession and Descriptive Marker Most commonly used to indicate possession: X の Y = Y of X. Example: 私 の 猫 – My cat. 2. Nominalization with の # Turns a verb or adjective phrase into a noun-like “thing.” Example: 赤い の が 好き – I like the red one. 3. Replacing が with の in embedded clauses # Makes the tone softer or more explanatory. 私 が 行く → 私 の 行く... – the place “I go to”\u0026hellip; ◇ Location, Direction, and Tool Particles # 2. Particle へ (e) # Directional Marker Similar to に, but emphasizes direction more than arrival. 東京 へ 行く – Heading toward Tokyo. 3. Particle で (de) # Action Location: Where an action takes place. レストラン で 食べる – Eat at a restaurant. Means / Tool / Material バス で 行く – Go by bus. 木 で 作る – Made with wood. 4. Particles から (kara) \u0026amp; まで (made) # から: from (starting point) まで: to/until (end point) 家 から 学校 まで – From home to school ★ Part 2: Verbs, Adjectives, and Tenses # This section dives into the classification and conjugation of verbs and adjectives, and how to express tenses and negation.\n◇ Verb Groups and the て-Form # 1. Verb Groups # Ru-verbs (Group 2): End in る, preceded by an i or e sound. e.g., 食べる, 見る. U-verbs (Group 1): All other verbs. e.g., 歩く, 話す, 待つ. Irregular Verbs: する, 来る. 2. て-form (te-form) # Essential for combining actions, requests, permissions, and more. Ru-verbs: drop る + て: 食べる → 食べて U-verbs: various sound shifts く/ぐ → いて/いで: 歩く → 歩いて う/つ/る → って: 待つ → 待って ぬ/ぶ/む → んで: 飲む → 飲んで す → して: 話す → 話して Irregular: する → して, 来る → 来て 3. Uses of て-form # Link actions: 起きて、ご飯を食べて、学校へ行く Requests: 待ってください – Please wait. Ongoing actions: 食べている – Is eating. Manner / Means: 歩いて行く – Go on foot. ◇ Adjective Types and Conjugation # 1. I-adjectives # Negative: 赤い → 赤くない Past: 赤い → 赤かった Past Negative: 赤い → 赤くなかった Te-form: 安くて、おいしい 2. Na-adjectives # As noun modifier: [na-adj] な [noun]: きれいな 花 As predicate: [na-adj] だ: 花 が きれい だ Negative: きれいじゃない Past: きれいだった Te-form: きれいで、静かだ ◇ Verb Tense and Negation # 1. Masu-form (Polite) # Ru-verbs: 食べる → 食べます U-verbs: 歩く → 歩きます 2. Plain vs Polite Forms # The course focuses on plain form first, as it\u0026rsquo;s essential for grammar foundations. 3. Nai-form (Negative) # Ru-verbs: 食べる → 食べない U-verbs: 歩く → 歩かない Irregular: する → しない, 来る → 来ない 4. Ta-form (Past) # Same pattern as te-form, but with た/だ instead of て/で 食べて → 食べた, 歩いた → 歩いた ★ Part 3: Complex Sentences and Advanced Particle Usage (Lessons 46–70) # ◇ Compound and Embedded Sentences # 1. Compound Sentences with て-form # Links sequential actions: 起きて、顔を洗って、朝ごはんを食べた。 Can express cause or manner depending on intonation/context. 2. Quoting with と # と 言う: “say that…” 先生 が 来る と 言った – (Someone) said that the teacher is coming. と 思う: “think that…” 明日 は 雨 だ と 思う – I think it will rain tomorrow. と 聞いた: “heard that…” 彼 が 来ない と 聞いた – I heard he won’t come. 3. Using こと and の for Nominalization # ～こと: Turns a verb phrase into a noun (more abstract/formal). 泳ぐ こと が 好き – I like swimming. ～の: More casual or descriptive nominalization. 彼 が 来る の は 明日 – It’s tomorrow that he’s coming. ◇ Giving and Receiving Verbs # 1. あげる / くれる / もらう # あげる: to give (speaker gives to others or others give to others) くれる: to give (someone gives to speaker or in-group) もらう: to receive Action Verb Example I give to you あげる 私は あなた に 本 を あげる You give to me くれる あなた は 私 に 本 を くれる I receive もらう 私は あなた に 本 を もらう 2. ～て あげる / て くれる / てもらう # Giving/receiving actions, not objects. 手伝って あげる – I help (you). 説明して くれる – (They) explain (to me). 説明して もらった – I was explained to. ◇ Desire, Intention, and Suggestions # 1. たい-form (want to do) # 食べたい, 行きたい – want to eat/go Uses を instead of が ケーキ が 食べたい → ケーキ を 食べたい 2. ～たがる (3rd person wants) # 彼 は 行きたがっている – He seems to want to go. 3. Volitional Form (let’s / I shall) # U-verbs: 行く → 行こう Ru-verbs: 食べる → 食べよう Irregular: する → しよう, 来る → 来よう Example: 映画 を 見よう – Let’s watch a movie. 4. ～つもり (intend to do) # 勉強する つもり です – I intend to study. ◇ Comparisons and Superlatives # 1. より / ほど # X は Y より 高い – X is taller than Y. X は Y ほど 高くない – X is not as tall as Y. 2. のほうが / より # Emphasizes preference or direction. 犬 の ほうが 好き – I prefer dogs. 3. 一番 (いちばん) # Superlative: 一番 高い 山 – the tallest mountain. ◇ Conditional Forms and Hypotheticals # 1. ～たら (if / when) # Verb past + ら: 行ったら, 雨 だったら Used for real conditions and outcomes. 2. ～ば form # Conditional using base verb + ば 食べれば, 行けば, 高ければ More formal/logical sounding than たら. 2. なら # Assumptive conditional (based on topic or supposition) 行く なら 早く して – If you’re going, hurry. 3. と # Natural consequence (like a rule or law) 春 に なる と 暖かく なる – When it becomes spring, it becomes warm. ★ Part 4: Advanced Grammar and Expressions (Lessons 71–93) # ◇ Passive and Causative Forms # 1. Passive Form (someone is acted upon) # Ru-verbs: 食べる → 食べられる U-verbs: 書く → 書かれる 私は 先生 に 褒められた – I was praised by the teacher. 2. Causative Form (make/let someone do) # Ru-verbs: 食べる → 食べさせる U-verbs: 行く → 行かせる 母 は 子供 を 勉強させた – The mother made the child study. 3. Causative-Passive (be made to do) # 食べさせられる, 行かされる – I was made to eat/go ◇ Honorific and Humble Expressions # 1. Honorific Verbs (respectful) # いらっしゃる, なさる, 召し上がる, ご覧になる 2. Humble Verbs (lower self) # 参る, いたす, いただく, 申す 3. Use with keigo forms # 先生 は お帰り に なりました 私 が いたします ◇ Formal Written Language Patterns # 1. ～のだ / ～んだ # Adds explanatory nuance: どうして 行かない の？ – Why aren’t you going? 2. ～ようだ / ～みたいだ # Resemblance or appearance: 雨 の ようだ – Seems like rain. 3. ～そうだ # Looks like: 美味しそう Hearsay: 雨 が 降る そうだ – I heard it will rain ◇ Idiomatic Phrases and Natural Expressions # 1. ～てしまう # Completion or regret: 食べてしまった – I (accidentally) ate it all. 2. ～ながら # While doing: 音楽 を 聞きながら 勉強する 3. ～ことがある / ～ことがある # There are times when: 遅れる こと が ある 4. ～ようにする / ～ようになる # Try to do / become able to do: 忘れない ようにする – Try not to forget 5. ～ばかり # Only / just: 食べて ばかり いる ","date":"26 February 2025","externalUrl":null,"permalink":"/posts/japanese-4-core/","section":"Blog","summary":"A structured overview of core grammar and sentence patterns to help beginners build a solid foundation in Japanese.","title":"Grammar \u0026 Syntax","type":"posts"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/kana/","section":"Tags","summary":"","title":"Kana","type":"tags"},{"content":" ★Hiragana # You can read more about Hiragana on Wikipedia.\nHiragana syllabograms Monographs (gojūon) Digraphs (yōon) a i u e o ya yu yo ∅ あ\na [a] い\ni [i] う\nu [ɯ] え\ne [e] お\no [o] K か\nka [ka] き\nki [ki] く\nku [kɯ] け\nke [ke] こ\nko [ko] きゃ\nkya [kʲa] きゅ\nkyu [kʲɯ] きょ\nkyo [kʲo] S さ\nsa [sa] し\nshi [ɕi] す\nsu [sɯ] せ\nse [se] そ\nso [so] しゃ\nsha [ɕa] しゅ\nshu [ɕɯ] しょ\nsho [ɕo] T た\nta [ta] ち\nchi [tɕi] つ\ntsu [tsɯ] て\nte [te] と\nto [to] ちゃ\ncha [tɕa] ちゅ\nchu [tɕɯ] ちょ\ncho [tɕo] N な\nna [na] に\nni [ɲi] ぬ\nnu [nɯ] ね\nne [ne] の\nno [no] にゃ\nnya [ɲa] にゅ\nnyu [ɲɯ] にょ\nnyo [ɲo] H は\nha [ha] ひ\nhi [çi] ふ\nfu [ɸɯ] へ\nhe [he] ほ\nho [ho] ひゃ\nhya [ça] ひゅ\nhyu [çɯ] ひょ\nhyo [ço] M ま\nma み\nmi む\nmu [mɯ] め\nme [me] も\nmo [mo] みゃ\nmya [mʲa] みゅ\nmyu [mʲɯ] みょ\nmyo [mʲo] Y や\nya [ja] 𛄟\ni [i] ゆ\nyu [jɯ] 𛄟\ne [e] よ\nyo [jo] R ら\nra [ɾa] り\nri [ɾi] る\nru [ɾɯ] れ\nre [ɾe] ろ\nro [ɾo] りゃ\nrya [ɾʲa] りゅ\nryu [ɾʲɯ] りょ\nryo [ɾʲo] W わ\nwa [wa] ゐ\ni [i] 𛄟\nu [ɯ] ゑ\ne [e] を\no[a] [o] Monographs (gojūon) with diacritics (dakuten, handakuten) Digraphs (yōon) with diacritics (dakuten, handakuten) a i u e o ya yu yo G が\nga [ga] ぎ\ngi [gi] ぐ\ngu [gɯ] げ\nge [ge] ご\ngo [go] ぎゃ\ngya [ɡʲa] ぎゅ\ngyu [ɡʲɯ] ぎょ\ngyo [ɡʲo] Z ざ\nza [(d)za] じ\nji [(d)ʑi] ず\nzu [(d)zɯ] ぜ\nze [(d)ze] ぞ\nzo [(d)zo] じゃ\nja [(d)ʑa] じゅ\nju [(d)ʑɯ] じょ\njo [(d)ʑo] D だ\nda [da] ぢ\nji [(d)ʑi] づ\nzu [(d)zɯ] で\nde [de] ど\ndo [do] ぢゃ\nja [(d)ʑa] ぢゅ\nju [(d)ʑɯ] ぢょ\njo [(d)ʑo] B ば\nba [ba] び\nbi [bi] ぶ\nbu [bɯ] べ\nbe [be] ぼ\nbo [bo] びゃ\nbya [bʲa] びゅ\nbyu [bʲɯ] びょ\nbyo [bʲo] P ぱ\npa [pa] ぴ\npi [pi] ぷ\npu [pɯ] ぺ\npe [pe] ぽ\npo [po] ぴゃ\npya [pʲa] ぴゅ\npyu [pʲɯ] ぴょ\npyo [pʲo] Final nasal monograph (hatsuon) n ん\nn\u0026nbsp;[m n ɲ ŋ ɴ ɰ̃] ★Katakana # You can read more about Katakana on Wikipedia.\nKatakana syllabograms Monographs (gojūon) Digraphs (yōon) a i u e o ya yu yo ∅ ア\na [a] イ\ni [i] ウ\nu [ɯ] エ\ne [e] オ\no [o] K カ\nka [ka] キ\nki [ki] ク\nku [kɯ] ケ\nke [ke] コ\nko [ko] キャ\nkya [kʲa] キュ\nkyu [kʲɯ] キョ\nkyo [kʲo] S サ\nsa [sa] シ\nshi [ɕi] ス\nsu [sɯ] セ\nse [se] ソ\nso [so] シャ\nsha [ɕa] シュ\nshu [ɕɯ] ショ\nsho [ɕo] T タ\nta [ta] チ\nchi [tɕi] ツ\ntsu [tsɯ] テ\nte [te] ト\nto [to] チャ\ncha [t͡ɕa] チュ\nchu [t͡ɕɯ] チョ\ncho [t͡ɕo] N ナ\nna [na] ニ\nni [ɲi] ヌ\nnu [nɯ] ネ\nne [ne] ノ\nno [no] ニャ\nnya [ɲa] ニュ\nnyu [ɲɯ] ニョ\nnyo [ɲo] H ハ\nha [ha] ヒ\nhi [çi] フ\nfu [ɸɯ] ヘ\nhe [he] ホ\nho [ho] ヒャ\nhya [ça] ヒュ\nhyu [çɯ] ヒョ\nhyo [ço] M マ\nma ミ\nmi ム\nmu [mɯ] メ\nme [me] モ\nmo [mo] ミャ\nmya [mʲa] ミュ\nmyu [mʲɯ] ミョ\nmyo [mʲo] Y ヤ\nya [ja] 𛄟\nyi ([i])[n 2] ユ\nyu [jɯ] エ\nye [je] / [e][n 3] ヨ\nyo [jo] R ラ\nra [ɾa] リ\nri [ɾi] ル\nru [ɾɯ] レ\nre [ɾe] ロ\nro [ɾo] リャ\nrya [ɾʲa] リュ\nryu [ɾʲɯ] リョ\nryo [ɾʲo] W ワ\nwa [wa] ヰ\nwi [wi] / [i][n 4] 𛄟\nwu ([ɯ])[n 2] ヱ\nwe [we] / [e][n 4] ヲ\nwo [wo] / [o][n 4] Monographs with diacritics: gojūon with (han)dakuten Digraphs with diacritics: yōon with (han)dakuten a i u e o ya yu yo G ガ\nga [ga] ギ\ngi [gi] グ\ngu [gɯ] ゲ\nge [ge] ゴ\ngo [go] ギャ\ngya [ɡʲa] ギュ\ngyu [ɡʲɯ] ギョ\ngyo [ɡʲo] Z ザ\nza [(d)za] ジ\nji [(d)ʑi] ズ\nzu [(d)zɯ] ゼ\nze [(d)ze] ゾ\nzo [(d)zo] ジャ\nja [(d)ʑa] ジュ\nju [(d)ʑɯ] ジョ\njo [(d)ʑo] D ダ\nda [da] ヂ\nji [(d)ʑi][n 5] ヅ\nzu [(d)zɯ][n 5] デ\nde [de] ド\ndo [do] ヂャ\nja [(d)ʑa][n 5] ヂュ\nju [(d)ʑɯ][n 5] ヂョ\njo [(d)ʑo][n 5] B バ\nba [ba] ビ\nbi [bi] ブ\nbu [bɯ] ベ\nbe [be] ボ\nbo [bo] ビャ\nbya [bʲa] ビュ\nbyu [bʲɯ] ビョ\nbyo [bʲo] P パ\npa [pa] ピ\npi [pi] プ\npu [pɯ] ペ\npe [pe] ポ\npo [po] ピャ\npya [pʲa] ピュ\npyu [pʲɯ] ピョ\npyo [pʲo] Final nasal monograph n ン\nn\u0026nbsp;[m n ɲ ŋ ɴ ɰ̃] ","date":"25 February 2025","externalUrl":null,"permalink":"/posts/japanese-3-kana/","section":"Blog","summary":"Introduces the structure, pronunciation, and learning techniques of Japanese kana to help build a solid foundation.","title":"Kana","type":"posts"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/pitch-accent/","section":"Tags","summary":"","title":"Pitch Accent","type":"tags"},{"content":"Japanese pronunciation involves pitch accents that are categorized into high and low tones. When pronouncing words, it is important to check whether there is a drop point (a place where the pitch suddenly falls). For words with a drop point, each has its own specific position for that drop. Different pitch patterns require different pronunciation methods.\nWhen a word has a drop point, it is indicated by the symbol \u0026ldquo;↓\u0026rdquo;.\nWhen a word has no drop point, it is marked with the symbol \u0026ldquo;○\u0026rdquo; at the end.\n★Pronunciation When Reading Words # When reading a word, start with a low pitch and then gradually raise it. Maintain a high pitch until you encounter the ↓ symbol; at that point, the pitch drops. For words without a drop point (marked with ○), maintain a high pitch all the way to the end.\n(例) ざ いりゅうカ ↓ード ざいりゅうカード イ ンドネ ↓シア インドネシア さ かな ○ さかな ベ トナム ○ ベトナム あ め ○ あめ（糖果） If the ↓ symbol appears on the very first mora of the word, start with a high pitch, then immediately lower it.\n(例) か ↓さ かさ ミャ ↓ンマー ミャンマー あ ↓め あめ（雨） If the ↓ symbol appears at the end of the word, the pitch drops after that point. When reading the word alone, its pronunciation is the same as that of a word without a drop point. The audio includes both the standalone pronunciation and the version followed by \u0026ldquo;～です.\u0026rdquo;\n(例) い もうと ↓ いもうと い もうと ↓で す。 いもうとです。 と もだち ○ ともだち と もだち○で す。 ともだちです。 は な ↓ はな（花） は な ↓で す。 はなです。 は な ○ はな（鼻子） は な○で す。 はなです。 Some words have a pause in the middle, after which the pitch rises again. In this case, the pause is marked with △.\n(例) よ ↓んじゅう △ ご ↓ふん よんじゅうごふん When a single word can be pronounced in two acceptable ways, both options are listed separated by \u0026ldquo;／.\u0026rdquo;\n(例) めんきょしょう め んきょしょう ○ ／ め んきょ ↓しょう ★Pronunciation in Sentences # When reading a sentence, start with a low pitch and gradually raise it. Maintain the high pitch until reaching the ↓ symbol, at which point the pitch begins to fall.\n(例) おさきにしつれいします。 お さきにしつ ↓れいします。 ベトナムから　きました。 ベ トナム↓から　きま ↓した。 If a sentence has two or more drop points, the pitch drop at the first ↓ is larger, while subsequent drops are smaller.\nIf there is a pause in the sentence or a segment you want to emphasize (the focus part), the pitch rises again from that point.\nIn yes-no or interrogative sentences, the pitch rises at the end.\nPitch accent significantly influences the overall intonation of a sentence.\n★How to Practice Pitch Accent # When listening to audio, pay attention to the pitch patterns of each word. Then look at the pitch markings to confirm where the drop occurs. Think about how these pitch differences affect pronunciation.\nWhen shadowing, be mindful of pitch changes as you mimic the sounds.\nAs you gradually understand the relationship between pitch and pronunciation, try to pay attention to pitch even when speaking sentences you create yourself.\nIf you can focus on pitch first and then speak, your pronunciation will sound more natural and easier to understand.\n","date":"24 February 2025","externalUrl":null,"permalink":"/posts/japanese-2-accent/","section":"Blog","summary":"An introduction to the basic rules of Japanese pitch accent and its importance in language expression.","title":"Pitch Accent","type":"posts"},{"content":" ★A Few Reminders at the Beginning # ◇About \u0026ldquo;Essence\u0026rdquo; # First, remember that language is not \u0026ldquo;learned\u0026rdquo; through conscious study, but is \u0026ldquo;acquired\u0026rdquo; naturally through use and immersion. It is not static knowledge, but dynamic practice. In the process of language learning, there is no absolute \u0026ldquo;know\u0026rdquo; or \u0026ldquo;don\u0026rsquo;t know\u0026rdquo;—only ever-deepening understanding and application.\nThe optimal solution for language learning is to spend most of your time engaging with language content, understanding and trying to express, and only a small portion of time on memorizing words and grammar.\n◇About \u0026ldquo;Traps\u0026rdquo; # A common pitfall in language learning: staying with beginner resources for too long and fearing to enter the real language environment, thinking you should \u0026ldquo;be ready\u0026rdquo; before practicing.\nHowever, language learning is like climbing a mountain: just weaving ropes (studying theory) won\u0026rsquo;t get you to the summit; only actual climbing (practical use) leads to mastery. Early exposure to real contexts enables you to adapt and improve your comprehension quickly.\n◇About \u0026ldquo;Immersion\u0026rdquo; # The breadth and complexity of language far exceed what classrooms or apps can teach. These methods often try to teach language using formulas like \u0026ldquo;X equals Y\u0026rdquo; or \u0026ldquo;X is used for Y,\u0026rdquo; but this is not enough for learners to reach a high level.\nTherefore, the core of language learning is \u0026ldquo;immersion\u0026rdquo;—that is, as much reading of native content and listening to native speakers as possible.\nLanguage acquisition is essentially the process of subconsciously remembering language patterns through comprehensible input. When you encounter understandable content during immersion, your brain automatically stores these patterns for future retrieval and use.\nTechnically, this is called \u0026ldquo;input,\u0026rdquo; but I prefer the term \u0026ldquo;immersion.\u0026rdquo;\nWhen you are familiar enough with a language, all of this becomes almost effortless. You not only understand the meaning of words, but also the logical relationships between sentences, and can even sense the tone and formality of an article—all thanks to your brain continually storing and recalling language patterns encountered in your reading.\nNotice, I did not mention \u0026ldquo;mastering grammar\u0026rdquo; or \u0026ldquo;memorizing vocabulary.\u0026rdquo; Because using a language does not depend on consciously analyzing grammar rules, but on extensive immersion and intuitive response. Many non-native speakers may have studied grammar, but when they encounter the language in daily life, their understanding does not rely on actively recalling rules, but on the natural cognitive patterns formed through long-term accumulation.\n★Three Core Skills of Language Comprehension # ◇Phoneme Discrimination (Bottom-Up) # Different languages have very different sound systems. For example, English speakers learning Chinese may find it hard to distinguish \u0026ldquo;yīng\u0026rdquo; (eagle) and \u0026ldquo;yīn\u0026rdquo; (sound). Even if they have learned the theory, their brains still struggle to distinguish these subtle differences in real conversations. This shows that knowledge and ability are two different things; just learning pronunciation rules does not enable the brain to automatically recognize phonemes—this skill must be developed through extensive listening practice.\n◇Adapting to Connected Speech and Phonological Changes (Bottom-Up) # In natural conversation, words are not pronounced as clearly as in writing. For example, in spoken English, \u0026ldquo;don’t + you\u0026rdquo; often becomes \u0026ldquo;don-chew,\u0026rdquo; and \u0026ldquo;want + to\u0026rdquo; becomes \u0026ldquo;wanna.\u0026rdquo; Similar phenomena are common in French, Spanish, and other languages. If learners do not get enough listening input, their brains will still expect words to appear in standard written form, leading to difficulty understanding speech.\n⚠️Note:\nBy \u0026ldquo;bottom-up,\u0026rdquo; I mean starting from the sounds you notice, then putting them together to see what word they form.\n/k/ + /æ/ + /t/ → cat\nBut because spoken language is often very ambiguous\u0026hellip; bottom-up processing alone is usually not enough to identify the words being spoken.\n◇Using Context to Infer Meaning (Top-Down) # Phonological ambiguity means that multiple words or phrases have the same pronunciation. For example, in English, \u0026ldquo;bat\u0026rdquo; might mean a baseball bat or a flying mammal, and \u0026ldquo;I got a letter\u0026rdquo; and \u0026ldquo;I let her go\u0026rdquo; can sound similar in connected speech. Learners need to rely on context to infer the correct meaning, and this inferencing ability can only be developed through extensive listening in real situations.\n★How to Effectively Improve Language Comprehension # Extensive listening input: Practice listening to your target language for hours every day, even if you don’t understand at first. Listen to native conversations: Choose original podcasts, movies, TV series, etc. without subtitles to train your brain to adapt to real speech. Imitate native pronunciation: Use shadowing and similar methods to improve your recognition and pronunciation skills. Infer meaning from context: Avoid translating word for word; instead, try to understand the overall meaning of sentences. ","date":"23 February 2025","externalUrl":null,"permalink":"/posts/japanese-1-overview/","section":"Blog","summary":"","title":"Language Acquisition","type":"posts"},{"content":" Complete Deployment Guide for Hugo Blog on GitHub Pages # ★Publishing to GitHub # ◇1. Create GitHub Repository # mywebsite (for Hugo source code) yuuniji.github.io (for generated static files) ◇2. Push mywebsite Repository # git remote add origin https://github.com/yuuniji/mywebsite.git git branch -M main git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main ◇3. Generate Static Files # hugo -D Static files are located in the public/ directory.\n◇4. Push to yuuniji.github.io # cd public git init git remote add origin https://github.com/yuuniji/yuuniji.github.io.git git checkout -b main git add . git commit -m \u0026#34;Deploy Hugo site\u0026#34; git push -f origin main ★Configure GitHub Pages # Enter yuuniji.github.io repository Settings → Pages. Select main branch, save, and wait for deployment to complete. Visit https://yuuniji.github.io to view the blog. ★Automated Deployment (Optional) # ◇1. Add deploy.sh to mywebsite repository # nano deploy.sh Paste the following content:\n#!/bin/bash hugo -D cd public git add . git commit -m \u0026#34;Deploy: $(date)\u0026#34; git push origin main cd .. Save and exit (press Ctrl + X, then Y, and press Enter).\n◇2. Assign Execution Permissions # chmod +x deploy.sh ◇3. Run Deployment Script # ./deploy.sh ★All Done! # After updating the blog, just:\nWrite articles in mywebsite/ directory hugo new posts/xxx.md Run ./deploy.sh Visit https://yuuniji.github.io to view updates 💡 Refer back to this guide if you have any questions! 🚀\n★ My Website Structure # Categories（Fixed large categories） Tags（Keywords） Topics（Series/Themes） Categories: ├── Language Acquisition ├── IT / Technology ├── Reading Notes ├── Life Records └── Reflections \u0026amp; Essays Tags: ├── Japanese, English, Grammar ├── Front-end, JavaScript, Cloud Computing ├── Philosophy, Economics, Psychology, History ├── Travel, 318 Sichuan-Tibet Highway, Photography ├── Time Management, Productivity Improvement... Topics: ├── How to Master Japanese ├── Top 10 Books ├── 2025 Reading Log... ★Hugo Function Extension Guide # ◇Quotes # Create quoteszh.html file and place it in the layouts/shortcodes/ directory of your Hugo site. Then, in content/../_index.md, reference {{\\\u0026lt; quoteszh \u0026gt;}} (remove \\).\n\u0026lt;!-- layouts/shortcodes/quoteszh.html --\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;{{ .Inner }}\u0026lt;/p\u0026gt; \u0026lt;footer\u0026gt;{{ .Get \u0026#34;source\u0026#34; }}\u0026lt;/footer\u0026gt; \u0026lt;/blockquote\u0026gt; \u0026lt;div id=\u0026#34;quote\u0026#34; class=\u0026#34;quote-box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const quotes = [ \u0026#34;\u0026#34;， \u0026#34;\u0026#34;， \u0026#34;\u0026#34; ] // 随机选择一个引语 const randomQuote = quotes[Math.floor(Math.random() * quotes.length)]; // 显示引语 document.getElementById(\u0026#39;quote\u0026#39;).innerHTML = randomQuote; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .quote-box { max-width: 600px; font-size: 0.8rem; text-align: left; .quote-box { animation: fadeIn 1.5s ease-in-out; } @keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } \u0026lt;/style\u0026gt; ◇Add Website Runtime # Add the following code to the newly created /layouts/partials/extend-footer.html:\n\u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 用于显示网站运行时间的容器 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function show_runtime() { // 每隔 1 秒执行一次 show_runtime，实现实时更新 setTimeout(show_runtime, 1000); // 设置网站起始运行时间（2025年2月22日 00:00:00） const startDate = new Date(\u0026#34;2025/02/22 00:00:00\u0026#34;); // 获取当前时间 const now = new Date(); // 计算时间差（毫秒） const diff = now.getTime() - startDate.getTime(); // 计算运行的天、小时、分钟、秒 const days = Math.floor(diff / (24 * 60 * 60 * 1000)); // 天数 const hours = Math.floor((diff % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)); // 小时 const minutes = Math.floor((diff % (60 * 60 * 1000)) / (60 * 1000)); // 分钟 const seconds = Math.floor((diff % (60 * 1000)) / 1000); // 秒 // 获取当前 HTML 页面设置的语言（由 Hugo 生成，如 \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt;） const lang = document.documentElement.lang || \u0026#34;en\u0026#34;; // 默认英文 // 各语言的显示文本模板 const translations = { zh: `网站已运行 ${days} 天 ${hours} 小时 ${minutes} 分 ${seconds} 秒`, ja: `サイトは稼働してから ${days}日 ${hours}時間 ${minutes}分 ${seconds}秒`, en: `Site has been running for ${days}d ${hours}h ${minutes}m ${seconds}s` }; // 根据当前语言选择显示内容，若找不到则使用英文 const output = translations[lang] || translations[\u0026#34;en\u0026#34;]; // 将显示内容写入页面中 document.getElementById(\u0026#34;runtime_span\u0026#34;).innerHTML = output; } // 初始化运行 show_runtime(); \u0026lt;/script\u0026gt; ◇Giscus Comments # Check params.toml # article.showComments = true\nPrepare GitHub Repository # Login to your GitHub account. Open your blog repository (e.g., yourname/yourwebsite). Ensure that Discussions is enabled: Go to Settings → Features → Check Discussions. Go to the Discussions page and create a Discussion Category (e.g., General). Generate Giscus Embed Code # Open Giscus configuration page: 👉 https://giscus.app\nConfigure as follows:\nRepository: Your blog repository (e.g. yourname/yourblog) Repository ID / Category / Category ID: Automatically generated based on the information in your Discussions Discussion Mapping: It is recommended to select pathname Reaction: Enable (👍, etc.) Input Position: bottom (comment box at the bottom) Theme: preferred_color_scheme (automatically adapt to light/dark colors) Copy the generated \u0026lt;script\u0026gt; code.\nInsert Giscus code into Hugo template # You can put the Giscus code into a separate file, for example: layouts/partials/giscus.html\n\u0026lt;div id=\u0026#34;giscus_container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;yourname/yourblog\u0026#34; data-repo-id=\u0026#34;Your repo ID\u0026#34; data-category=\u0026#34;General\u0026#34; data-category-id=\u0026#34;Your category ID\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;en\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Then in layouts/partials/comments.html article template:\n{{ partial \u0026#34;giscus.html\u0026#34; . }} ◇Music Player # A mini player fixed to the bottom-right corner of the screen Expandable/collapsible playlist Control buttons for play/pause, previous, and next Preserve playback state when switching between articles (using localStorage) Frosted glass background design for the music player Create file # \u0026lt;!-- layouts/partials/musicplayer.html --\u0026gt; \u0026lt;style scoped\u0026gt; .music-player-container { position: fixed; bottom: 12px; left: 12px; z-index: 9999; font-family: system-ui, sans-serif; font-size: 13px; } .music-player-container .music-panel { display: none; margin-bottom: 6px; background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 12px; padding: 12px 14px; width: 200px; max-height: 180px; overflow-y: auto; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(16px) saturate(180%); -webkit-backdrop-filter: blur(16px) saturate(180%); } .music-player-container .music-panel.show { display: block; } .music-player-container .music-title { font-size: 13px; color: var(--color-primary-300); font-weight: 500; margin-bottom: 6px; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); } .music-player-container .playlist { list-style: none; padding: 0; margin: 0; } .music-player-container .playlist li { padding: 4px 6px; border-radius: 6px; cursor: pointer; color: var(--content); text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); transition: all 0.2s ease; } .music-player-container .playlist li:hover { background: rgba(255, 255, 255, 0.15); transform: translateY(-1px); } .music-player-container .playlist li.active { background: rgba(255, 255, 255, 0.2); color: var(--accent); font-weight: 600; border: 1px solid rgba(255, 255, 255, 0.3); } .music-player-container .mini-player { background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 100px; display: flex; gap: 8px; padding: 6px 10px; align-items: center; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(20px) saturate(180%); -webkit-backdrop-filter: blur(20px) saturate(180%); transition: all 0.3s ease; } .music-player-container .mini-player:hover { background: rgba(255, 255, 255, 0.15); transform: translateY(-2px); box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4); } .music-player-container .mini-player button { background: none; border: none; font-size: 16px; color: var(--secondary); cursor: pointer; padding: 4px; border-radius: 50%; transition: all 0.2s ease; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); } .music-player-container .mini-player button.hidden { display: none; } .music-player-container.hidden { transform: translateX(-100%); opacity: 0; pointer-events: none; } .show-player-btn { position: fixed; bottom: 12px; left: 12px; background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 50%; width: 40px; height: 40px; display: none; align-items: center; justify-content: center; cursor: pointer; font-size: 16px; color: var(--secondary); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(20px) saturate(180%); -webkit-backdrop-filter: blur(20px) saturate(180%); transition: all 0.3s ease; z-index: 9999; } .music-player-container.hidden + .show-player-btn { display: flex; } .show-player-btn:hover { background: rgba(255, 255, 255, 0.15); transform: scale(1.1); } .music-player-container .mini-player button:hover { color: var(--accent); background: rgba(255, 255, 255, 0.1); transform: scale(1.1); } .music-player-container .mini-player button:active { color: var(--accent-active); transform: scale(0.95); } .music-player-container audio { display: none; } /* 滚动条美化 */ .music-player-container .music-panel::-webkit-scrollbar { width: 4px; } .music-player-container .music-panel::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.1); border-radius: 2px; } .music-player-container .music-panel::-webkit-scrollbar-thumb { background: rgba(255, 255, 255, 0.3); border-radius: 2px; } .music-player-container .music-panel::-webkit-scrollbar-thumb:hover { background: rgba(255, 255, 255, 0.5); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;music-player-container\u0026#34; id=\u0026#34;musicPlayerContainer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;music-panel\u0026#34; id=\u0026#34;musicPanel\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;music-title\u0026#34; id=\u0026#34;musicTitle\u0026#34;\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;playlist\u0026#34; id=\u0026#34;musicPlaylist\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mini-player\u0026#34; id=\u0026#34;miniPlayer\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;musicTogglePanel\u0026#34; title=\u0026#34;Toggle Playlist\u0026#34;\u0026gt;📂\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicPrevBtn\u0026#34; title=\u0026#34;Previous\u0026#34;\u0026gt;⏮️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicPlayBtn\u0026#34; title=\u0026#34;Play\u0026#34;\u0026gt;▶️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicNextBtn\u0026#34; title=\u0026#34;Next\u0026#34;\u0026gt;⏭️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicHideBtn\u0026#34; title=\u0026#34;Hide Player\u0026#34;\u0026gt;👁️\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;audio id=\u0026#34;musicAudio\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;show-player-btn\u0026#34; id=\u0026#34;showPlayerBtn\u0026#34; title=\u0026#34;Show Music Player\u0026#34;\u0026gt;🎧\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; (function() { \u0026#39;use strict\u0026#39;; // 命名空间前缀，避免全局冲突 const MUSIC_PLAYER_NS = \u0026#39;HugoMusicPlayer_\u0026#39;; const base = \u0026#34;https://yuuniji.github.io/music/lofi_beats/\u0026#34;; const jsonURL = base + \u0026#34;songs.json\u0026#34;; const STORAGE_KEY = MUSIC_PLAYER_NS + \u0026#34;state\u0026#34;; const INTERACT_KEY = MUSIC_PLAYER_NS + \u0026#34;user_interacted\u0026#34;; const HIDDEN_KEY = MUSIC_PLAYER_NS + \u0026#34;hidden\u0026#34;; async function initMusicPanel() { try { const res = await fetch(jsonURL); const songs = await res.json(); if (!songs.length) return; let currentIndex = 0; let isPlaying = false; // 使用带命名空间的ID选择器 const audio = document.getElementById(\u0026#34;musicAudio\u0026#34;); const playBtn = document.getElementById(\u0026#34;musicPlayBtn\u0026#34;); const prevBtn = document.getElementById(\u0026#34;musicPrevBtn\u0026#34;); const nextBtn = document.getElementById(\u0026#34;musicNextBtn\u0026#34;); const toggleBtn = document.getElementById(\u0026#34;musicTogglePanel\u0026#34;); const hideBtn = document.getElementById(\u0026#34;musicHideBtn\u0026#34;); const showBtn = document.getElementById(\u0026#34;showPlayerBtn\u0026#34;); const panel = document.getElementById(\u0026#34;musicPanel\u0026#34;); const title = document.getElementById(\u0026#34;musicTitle\u0026#34;); const playlist = document.getElementById(\u0026#34;musicPlaylist\u0026#34;); // 检查元素是否存在 if (!audio || !playBtn || !prevBtn || !nextBtn || !toggleBtn || !hideBtn || !showBtn || !panel || !title || !playlist) { console.warn(\u0026#39;Music player elements not found\u0026#39;); return; } // 恢复保存的状态 const savedStateStr = localStorage.getItem(STORAGE_KEY); if (savedStateStr) { try { const saved = JSON.parse(savedStateStr); if (saved.index \u0026gt;= 0 \u0026amp;\u0026amp; saved.index \u0026lt; songs.length) { currentIndex = saved.index; audio.currentTime = saved.time || 0; // 恢复播放状态，如果之前是播放状态则继续播放 isPlaying = saved.isPlaying || false; } } catch (e) { console.warn(\u0026#39;Failed to parse saved music player state:\u0026#39;, e); } } // 恢复隐藏状态 const isHidden = localStorage.getItem(HIDDEN_KEY) === \u0026#39;true\u0026#39;; if (isHidden) { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.add(\u0026#39;hidden\u0026#39;); } // 构建播放列表 songs.forEach((song, index) =\u0026gt; { const li = document.createElement(\u0026#34;li\u0026#34;); li.textContent = song.title; li.onclick = function() { currentIndex = index; loadAndPlay(currentIndex); localStorage.setItem(INTERACT_KEY, \u0026#34;true\u0026#34;); }; playlist.appendChild(li); }); function highlight(index) { const listItems = playlist.querySelectorAll(\u0026#34;li\u0026#34;); listItems.forEach((li, idx) =\u0026gt; { li.classList.toggle(\u0026#34;active\u0026#34;, idx === index); }); } function loadAndPlay(index) { audio.src = base + songs[index].file; audio.currentTime = 0; title.textContent = songs[index].title; highlight(index); // 立即高亮 audio.play().then(() =\u0026gt; { isPlaying = true; playBtn.textContent = \u0026#34;⏸️\u0026#34;; saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to play audio:\u0026#39;, error); isPlaying = false; playBtn.textContent = \u0026#34;▶️\u0026#34;; }); } function saveState() { try { localStorage.setItem(STORAGE_KEY, JSON.stringify({ index: currentIndex, time: audio.currentTime, isPlaying: !audio.paused })); } catch (e) { console.warn(\u0026#39;Failed to save music player state:\u0026#39;, e); } } // 初始化显示 audio.src = base + songs[currentIndex].file; title.textContent = songs[currentIndex].title; highlight(currentIndex); // 根据恢复的状态决定是否播放 if (isPlaying) { audio.play().then(() =\u0026gt; { updatePlayButton(); saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to auto-play audio:\u0026#39;, error); isPlaying = false; updatePlayButton(); }); } else { audio.pause(); isPlaying = false; updatePlayButton(); // 确保按钮状态正确 } // 更新播放按钮状态的函数 function updatePlayButton() { if (audio.paused) { playBtn.textContent = \u0026#34;▶️\u0026#34;; isPlaying = false; // 暂停状态时隐藏其他按钮 prevBtn.classList.add(\u0026#39;hidden\u0026#39;); nextBtn.classList.add(\u0026#39;hidden\u0026#39;); toggleBtn.classList.add(\u0026#39;hidden\u0026#39;); hideBtn.classList.add(\u0026#39;hidden\u0026#39;); } else { playBtn.textContent = \u0026#34;⏸️\u0026#34;; isPlaying = true; // 播放状态时显示所有按钮 prevBtn.classList.remove(\u0026#39;hidden\u0026#39;); nextBtn.classList.remove(\u0026#39;hidden\u0026#39;); toggleBtn.classList.remove(\u0026#39;hidden\u0026#39;); hideBtn.classList.remove(\u0026#39;hidden\u0026#39;); } } // 事件监听器 playBtn.onclick = function() { if (audio.paused) { audio.play().then(() =\u0026gt; { updatePlayButton(); saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to play audio:\u0026#39;, error); updatePlayButton(); }); } else { audio.pause(); updatePlayButton(); saveState(); } }; prevBtn.onclick = function() { currentIndex = (currentIndex - 1 + songs.length) % songs.length; loadAndPlay(currentIndex); }; nextBtn.onclick = function() { currentIndex = (currentIndex + 1) % songs.length; loadAndPlay(currentIndex); }; toggleBtn.onclick = function() { panel.classList.toggle(\u0026#34;show\u0026#34;); }; hideBtn.onclick = function() { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.add(\u0026#39;hidden\u0026#39;); localStorage.setItem(HIDDEN_KEY, \u0026#39;true\u0026#39;); }; showBtn.onclick = function() { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.remove(\u0026#39;hidden\u0026#39;); localStorage.setItem(HIDDEN_KEY, \u0026#39;false\u0026#39;); }; // 音频事件监听 audio.ontimeupdate = saveState; audio.onplay = function() { updatePlayButton(); saveState(); }; audio.onpause = function() { updatePlayButton(); saveState(); }; audio.onended = function() { currentIndex = (currentIndex + 1) % songs.length; loadAndPlay(currentIndex); }; // 移除自动播放功能，用户需要手动点击播放 // 确保初始状态为暂停 updatePlayButton(); // 页面卸载时保存状态 window.addEventListener(\u0026#39;beforeunload\u0026#39;, function() { saveState(); }); // 页面隐藏时也保存状态（移动设备切换应用时） document.addEventListener(\u0026#39;visibilitychange\u0026#39;, function() { if (document.hidden) { saveState(); } }); } catch (error) { console.error(\u0026#39;Failed to initialize music player:\u0026#39;, error); } } // 确保DOM加载完成后再初始化 if (document.readyState === \u0026#39;loading\u0026#39;) { document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initMusicPanel); } else { initMusicPanel(); } })(); \u0026lt;/script\u0026gt; In layout template # Add the following code to the newly created /layouts/partials/extend-footer.html:\n{{ partial \u0026#34;musicplayer.html\u0026#34; . }} ◇Icon # https://favicon.io/favicon-generator/\nwebsite/ ├── static/ │ ├── android-chrome-192x192.png │ ├── android-chrome-512x512.png │ ├── apple-touch-icon.png │ ├── favicon.ico │ ├── favicon-16x16.png │ ├── favicon-32x32.png │ └── site.webmanifest 当然，以下是更精简且专业的英文笔记：\n◇Sidenote Shortcode # 1. Usage # Markdown:\n{{\\\u0026lt; sidenote label=\u0026#34;☍\u0026#34; \u0026gt;}}Your note here{{\\\u0026lt; /sidenote \u0026gt;}} (remove `\\`). e.g.: The term \u0026ldquo;sidenote\u0026quot; ☍ A small note that provides extra context without interrupting the flow. is often used in academic writing.\nFile: layouts/shortcodes/sidenote.html\n2. Shortcode (HTML) # {{- $id := .Get \u0026#34;id\u0026#34; | default (printf \u0026#34;sn-%d\u0026#34; (.Page.Scratch.Get \u0026#34;sidenoteID\u0026#34; | default 1)) -}} {{- $label := .Get \u0026#34;label\u0026#34; | default \u0026#34;☍\u0026#34; -}} \u0026lt;span class=\u0026#34;sidenote-block\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;{{ $id }}-toggle\u0026#34; class=\u0026#34;sidenote-label\u0026#34;\u0026gt;{{ $label }}\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;{{ $id }}-toggle\u0026#34; class=\u0026#34;sidenote-toggle\u0026#34; hidden\u0026gt; \u0026lt;span class=\u0026#34;sidenote\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; {{- .Page.Scratch.Set \u0026#34;sidenoteID\u0026#34; ((.Page.Scratch.Get \u0026#34;sidenoteID\u0026#34; | default 1) | add 1) -}} 3. CSS # /* assets/css/custom.css */ .sidenote-block { position: relative; display: inline-block; } .sidenote-label { font-size: 0.8em; vertical-align: super; color: #888; cursor: pointer; user-select: none; } .sidenote { display: none; position: absolute; left: 100%; top: 0; margin-left: 1rem; width: 15rem; font-size: 0.85em; background: var(--sidenote-bg, #f9f9f9); padding: 0.5rem; border-left: 3px solid var(--sidenote-border, #ccc); color: var(--sidenote-text, #333); z-index: 10; box-shadow: 0 0 5px rgba(0,0,0,0.1); } .sidenote-toggle:checked ~ .sidenote { display: inline-block; } /* 深色模式适配（适用于 prefers-color-scheme 或 Blowfish 的 .dark class） */ @media (prefers-color-scheme: dark) { .sidenote { --sidenote-bg: #1e1e1e; --sidenote-text: #ddd; --sidenote-border: #444; } .sidenote-label { --sidenote-label-color: #aaa; } } .dark .sidenote { --sidenote-bg: #1e1e1e; --sidenote-text: #ddd; --sidenote-border: #444; } .dark .sidenote-label { --sidenote-label-color: #aaa; } /* 手机端适配 */ @media (max-width: 768px) { .sidenote { position: relative; left: auto; top: auto; margin-left: 0; margin-top: 0.3rem; width: 100%; border-left: none; border-top: 2px solid var(--sidenote-border, #ccc); background: var(--sidenote-bg, #f2f2f2); } } ◇Chart # Hugo + Chart.js Shortcode example:\n{{\\\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\\\u0026lt; /chart \u0026gt;}} (remove `\\`). ◇Mermaid # Hugo + Mermaid Shortcode example:\n{{\\\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\\\u0026lt; /mermaid \u0026gt;}} (remove `\\`). graph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] The examples below are a small selection taken from the official Mermaid docs. You can also view the page source on GitHub to see the markup.\nFlowchart # \u0026lt;div style=\u0026#34;background-color:white; padding: 20px\u0026#34;\u0026gt; {{\\\u0026lt; mermaid \u0026gt;}} graph TD A[Christmas] --\u0026gt;|Get money| B(Go shopping) B --\u0026gt; C{Let me think} B --\u0026gt; G[/Another/] C ==\u0026gt;|One| D[Laptop] C --\u0026gt;|Two| E[iPhone] C --\u0026gt;|Three| F[Car] subgraph Section C D E F G end (remove `\\`). {{\\\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt; graph TD A[Christmas] --\u003e|Get money| B(Go shopping) B --\u003e C{Let me think} B --\u003e G[/Another/] C ==\u003e|One| D[Laptop] C --\u003e|Two| E[iPhone] C --\u003e|Three| F[Car] subgraph Section C D E F G end Sequence diagram # \u0026lt;div style=\u0026#34;background-color:white; padding: 20px\u0026#34;\u0026gt; {{\\\u0026lt; mermaid \u0026gt;}} sequenceDiagram autonumber par Action 1 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? and Action 2 Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? end Alice-\u0026gt;\u0026gt;+John: Hello John, how are you? Alice-\u0026gt;\u0026gt;+John: John, can you hear me? John--\u0026gt;\u0026gt;-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u0026gt;\u0026gt;-Alice: I feel great! loop Every minute John--\u0026gt;Alice: Great! end (remove `\\`). {{\\\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt; sequenceDiagram autonumber par Action 1 Alice-\u003e\u003eJohn: Hello John, how are you? and Action 2 Alice-\u003e\u003eBob: Hello Bob, how are you? end Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u003e\u003e-Alice: I feel great! loop Every minute John--\u003eAlice: Great! end Class diagram # \u0026lt;div style=\u0026#34;background-color:white; padding: 20px\u0026#34;\u0026gt; {{\\\u0026lt; mermaid \u0026gt;}} classDiagram Animal \u0026#34;1\u0026#34; \u0026lt;|-- Duck Animal \u0026lt;|-- Fish Animal \u0026lt;--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } (remove `\\`). {{\\\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt; classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } ``` Entity relationship diagram # \u0026lt;div style=\u0026#34;background-color:white; padding: 20px\u0026#34;\u0026gt; {{\\\u0026lt; mermaid \u0026gt;}} erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \u0026#34;liable for\u0026#34; DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \u0026#34;ordered in\u0026#34; (remove `\\`). {{\\\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt; erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ◇Article Heatmap # Create the Shortcode File # Create a new file named heatmap.html in the layouts/shortcodes/ directory of your Hugo site.\n\u0026lt;div id=\u0026#34;heatmap\u0026#34; style=\u0026#34;max-width: 600px;height: 180px;padding: 2px;text-align: center;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/echarts@5.3.0/dist/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; (function() { // Hugo 数据 var dataArr = [ {{- $posts := where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;posts\u0026#34; -}} {{- range $posts -}} [\u0026#34;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026#34;, {{ printf \u0026#34;%.1f\u0026#34; (div .WordCount 1000.0) }}, \u0026#34;{{ .RelPermalink }}\u0026#34;, \u0026#34;{{ .Title }}\u0026#34;], {{- end -}} ]; var dataMap = new Map(); dataArr.forEach(function(item) { var key = item[0]; var wordCount = item[1]; var link = item[2]; var title = item[3]; var value = dataMap.get(key); if (!value || wordCount \u0026gt; value.wordCount) { dataMap.set(key, {wordCount, link, title}); } }); var data = []; for (const [key, value] of dataMap.entries()) { data.push([key, value.wordCount]); } var chartDom = document.getElementById(\u0026#39;heatmap\u0026#39;); var myChart = echarts.init(chartDom); function heatmap_width(months){ var startDate = new Date(); var mill = startDate.setMonth(startDate.getMonth() - months); var endDate = +new Date(); startDate = +new Date(mill); endDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, endDate); startDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, startDate); return [[startDate, endDate]]; } function getRangeArr() { const windowWidth = window.innerWidth; if (windowWidth \u0026gt;= 600) return heatmap_width(12); else if (windowWidth \u0026gt;= 400) return heatmap_width(9); else return heatmap_width(6); } // 配色方案 function getThemeOptions(isDark) { return { title: { top: 15, // 下移一点 left: \u0026#39;center\u0026#39;, text: \u0026#39;Article Activity Heatmap\u0026#39;, textStyle: { color: isDark ? \u0026#39;#ccc\u0026#39; : \u0026#39;#666\u0026#39;, // 颜色淡化，不太突出 fontSize: 14 // 字体小一点 } }, tooltip: { backgroundColor: isDark ? \u0026#39;#222\u0026#39; : \u0026#39;#fff\u0026#39;, borderColor: isDark ? \u0026#39;#444\u0026#39; : \u0026#39;#ccc\u0026#39;, textStyle: { color: isDark ? \u0026#39;#F6F5EB\u0026#39; : \u0026#39;#222\u0026#39; }, formatter: function(p) { const post = dataMap.get(p.data[0]); if (!post) return \u0026#39;\u0026#39;; return (post.title || \u0026#39;No title\u0026#39;) + \u0026#39; | \u0026#39; + post.wordCount + \u0026#39;k words\u0026#39;; } }, visualMap: { min: 0, max: 10, type: \u0026#39;piecewise\u0026#39;, orient: \u0026#39;horizontal\u0026#39;, // 也可以改成 \u0026#39;vertical\u0026#39; left: \u0026#39;center\u0026#39;, bottom: 10, // 移到底部 inRange: { color: isDark ? [\u0026#39;#3A3D5C\u0026#39;, \u0026#39;#9AA7E0\u0026#39;] : [\u0026#39;#9aa7e04c\u0026#39;, \u0026#39;#3A3D5C\u0026#39;] }, splitNumber: 4, text: [\u0026#39;k words\u0026#39;, \u0026#39;\u0026#39;], showLabel: true, itemGap: 20, textStyle: { color: isDark ? \u0026#39;#F6F5EB\u0026#39; : \u0026#39;#222\u0026#39; } }, calendar: { top: 60, // 标题下移后，让日历靠下 left: 20, right: 20, cellSize: [\u0026#39;auto\u0026#39;, 12], range: getRangeArr(), itemStyle: { color: isDark ? \u0026#39;#23272e\u0026#39; : \u0026#39;#F1F1F1\u0026#39;, borderWidth: 2.5, borderColor: isDark ? \u0026#39;#444\u0026#39; : \u0026#39;#fff\u0026#39; }, yearLabel: { show: false, color: isDark ? \u0026#39;#F6F5EB\u0026#39; : \u0026#39;#222\u0026#39; }, dayLabel: { color: isDark ? \u0026#39;#F6F5EB\u0026#39; : \u0026#39;#222\u0026#39; }, monthLabel: { color: isDark ? \u0026#39;#F6F5EB\u0026#39; : \u0026#39;#222\u0026#39; }, splitLine: { lineStyle: { color: \u0026#39;rgba(0,0,0,0)\u0026#39; } } }, series: { type: \u0026#39;heatmap\u0026#39;, coordinateSystem: \u0026#39;calendar\u0026#39;, data: data } }; } // 判断深色模式 function isDarkMode() { return document.documentElement.classList.contains(\u0026#39;dark\u0026#39;); } function setChartTheme() { myChart.setOption(getThemeOptions(isDarkMode())); } // 初始化 setChartTheme(); // 监听主题切换 var observer = new MutationObserver(setChartTheme); observer.observe(document.documentElement, { attributes: true, attributeFilter: [\u0026#39;class\u0026#39;] }); // 响应窗口变化 window.onresize = function() { myChart.resize(); }; // 点击跳转文章 myChart.on(\u0026#39;click\u0026#39;, function(params) { if (params.componentType === \u0026#39;series\u0026#39;) { const post = dataMap.get(params.data[0]); if (post) { window.open(window.location.origin + post.link, \u0026#39;_blank\u0026#39;).focus(); } } }); })(); \u0026lt;/script\u0026gt; Use the Shortcode in Pages # {{\\\u0026lt; heatmap \u0026gt;}} (remove `\\`). ","date":"22 February 2025","externalUrl":null,"permalink":"/posts/it-a/","section":"Blog","summary":"","title":"Deployment and Expansion of My Website","type":"posts"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/tags/software-introduction/","section":"Tags","summary":"","title":"Software Introduction","type":"tags"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/categories/tech/","section":"Categories","summary":"","title":"Tech","type":"categories"},{"content":"","externalUrl":null,"permalink":"/animals/","section":"Animals","summary":"","title":"Animals","type":"animals"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","externalUrl":null,"permalink":"/topics/","section":"Topics","summary":"","title":"Topics","type":"topics"}]