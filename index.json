
[{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/bank/","section":"Tags","summary":"","title":"Bank","type":"tags"},{"content":" ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/","section":"Blog","summary":"","title":"Blog","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/hong-kong/","section":"Tags","summary":"","title":"Hong Kong","type":"tags"},{"content":" Overnight at the Airport 15 July Hangzhou → Hangzhou Xiaoshan International Airport Hong Kong Banks \u0026amp; Hostel 16 July Hong Kong International Airport → Yau Ma Tei The plane landed at Hong Kong T1 at 10:40. After clearing customs, it was already 11:10. Follow the Bus signs out of the airport, cross the road and turn right; where there are many people is the S1 bus stop. Take the Citybus Airport Express S1 and get off at Tung Chung Station Bus Terminus. Then transfer to the MTR Tung Chung Line to Olympic Station, go to 7-ELEVEn (Olympian City) to buy a Club Sim card. By then, it was already 12:31. Exit C of the metro leads directly to HSBC Centre. Connect to HSBC's Wi-Fi to apply for a bank account online: HSBC: Ask the staff about depositing HKD after opening the account. They will help you get a queue number and ask you to supplement your signature. Airstar Bank ZA Bank Ant Bank (binds with AlipayHK) After completing the online account openings, it was already 15:16. Walk to Yesinn @ YMT (Yau Ma Tei Yesinn Youth Hostel) to check in; by then, it was 15:51. City Walk 1 16 July Yau Ma Tei → Tsim Sha Tsui By evening, I finally packed away all my paperwork and walked from the hostel to the Avenue of Stars in Tsim Sha Tsui. The sea breeze carried a moist, salty scent, and the lights on both sides of Victoria Harbour shimmered on the water. In that moment, the fatigue of the day was washed away by the night view. City Walk 2 17 July Tsim Sha Tsui → Central → Causeway Bay → Tsim Sha Tsui The next day, I decided to slow down a bit. In the morning, I walked to Star Ferry Terminal, Tsim Sha Tsui, bought a ticket, queued up, and boarded the Star Ferry—an ordinary-looking boat that carries countless memories. As the ferry left the pier, a cool breeze hit my face, and the Hong Kong Island skyline slowly approached. After arriving at Central Ferry Pier, I took a bus and then walked to Causeway Bay, enjoying the city scenery along the way. The minimalism of MUJI, the familiarity of IKEA, and the lively atmosphere of Donki each offered a different shopping experience. In the evening, I walked along the street to Wan Chai Pier and took the Star Ferry again, watching the water turn orange-red in the sunset. Returning to Tsim Sha Tsui, I took a bus back to Yesinn @ YMT, ending two packed but fulfilling days. Practical Information Tips Accommodation: Yesinn @ YMT (Yau Ma Tei) (Convenient for the metro, suitable for short stays) Transport: Alipay Transit QR code can be used for all transport (bus, MTR, Star Ferry) Suggestion: Complete all bank procedures in one day, so you can arrange sightseeing easily on the second day ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/life-2-hongkong/","section":"Blog","summary":"","title":"Hong Kong","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/categories/life-records/","section":"Categories","summary":"","title":"Life Records","type":"categories"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/travel/","section":"Tags","summary":"","title":"Travel","type":"tags"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/","section":"yuuniji","summary":"","title":"yuuniji","type":"page"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/china/","section":"Tags","summary":"","title":"China","type":"tags"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/cycling/","section":"Tags","summary":"","title":"Cycling","type":"tags"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/categories/reflections--essays/","section":"Categories","summary":"","title":"Reflections \u0026 Essays","type":"categories"},{"content":" Preface # Taking advantage of the iPhone\u0026rsquo;s Live Photos feature to generate videos, I compiled the photos taken along my 318 cycling journey into a short video. During this process, many memories suddenly resurfaced, as if I was once again on that familiar and long road. A year has passed, many things have changed, but the feelings and thoughts from that journey remain vivid. So, I decided to write them down—for my present self, and for someday in the future when I look back.\nMain Text # Looking back on this experience, it can be as long or as short as you want.\nIf I write too much, I worry my future self will be too lazy to read; if I write too little, I\u0026rsquo;m afraid it will be lost in the river of time.\nSo I’ll just leave this part, which touched me the most and is most worth recording.\nThe biggest feeling from cycling 318 is: Once you choose a road, walk it firmly.\nWhy do I say this? Because this 2,160 km Sichuan-Tibet Route 318, starting from Chengdu, made me truly experience that the “road” is never fixed—it’s neither perfect nor simple.\nI rode through country lanes and got lost at highway entrances;\nExperienced days stranded by flat tires and delays, and moments of endless climbing that left me breathless;\nWalked misty mountain roads in the rain and fog, greeted monkeys along the way;\nClimbed wild hills at midnight for hot springs, and after fixing a tire, got caught in hail and rain so heavy I couldn’t see the road;\nThere were plateaus, muddy construction, roaring trucks in long tunnels, landslides\u0026hellip;\nOf course, there were also roads with breathtaking scenery that made me stop in awe.\nThe diversity and challenge of just the “road” alone is so rich, yet it’s only part of the journey.\nThe people along the way, the stories I encountered, the loneliness and excitement, the surging emotions inside\u0026hellip;\nThere’s so much more, far beyond what a few words can express.\nThis is one road, but it let me experience countless possibilities of what a “road” can be.\nBut none of that matters anymore. What matters is: I didn’t get lost. I knew I was riding toward Tibet, toward Lhasa.\nIsn’t life the same?\nSometimes we care too much about which road “looks better” right now—smoother, more profitable—and forget the most crucial thing: Are you moving toward your goal?\nWhat 318 taught me is that once you’ve chosen your goal, even if the road you’re on isn’t perfect, isn’t comfortable, or doesn’t seem “worth it,” as long as it leads toward the destination, it’s worth sticking to.\nGo a segment, then another, and piece together those fragments into the complete path to your dream.\nOn the other hand, those “good-looking” roads—if they only take you further off course—are the real detour.\nSo, after finishing 318, I have more courage to face life’s choices.\nI no longer blindly pursue the “best road,” but have learned to ask myself: Is this the road that brings me closer to my destination?\nAs long as the answer is yes, then just like cycling 318, even if it’s wind and rain all the way, it’s worth it.\nPhoto Gallery (238 photos) # Closing Remark / Motto # Not every step is perfect, but every step brings you closer to the distance.\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/life-1-road-318/","section":"Blog","summary":"Looking back on a year of cycling along National Highway 318, reflecting on those imperfect but goal-oriented roads.","title":"Reflections on the First Anniversary of Cycling China's 318","type":"posts"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/series/2025-reading-log/","section":"Series","summary":"","title":"2025 Reading Log","type":"series"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/categories/books/","section":"Categories","summary":"","title":"Books","type":"categories"},{"content":"Back to the series index\nCategory Reading Method / Education / Intellectual Training Authors Mortimer J. Adler (USA)\nCharles Van Doren (USA) Title How to Read a Book Year of Publication 1940 (First Edition)\n1972 (Revised and Expanded Edition) Links How to Read a Book @ Wikipedia Summary:\nMortimer J. Adler, an American philosopher and educator, originally published this book in 1940. The 1972 edition, co-authored with Charles Van Doren, is the most widely read and influential version.\nThe book introduces four levels of reading: Elementary Reading, Inspectional Reading, Analytical Reading, and Syntopical Reading. It systematically explains how to read and truly understand complex and theoretical books.\nIt emphasizes that reading is not just about gathering information, but about training comprehension and thinking skills. This book is suitable not only for students but also for anyone who wants to improve their learning efficiency and engage in deep reading.\nOften referred to as \u0026ldquo;the user manual for all books,\u0026rdquo; it is a starting point for independent learning.\n★PART ONE The Dimensions of Reading # ★1 THE ACTIVITY AND ART OF READING # This is a book for readers and for those who wish to become readers. Particularly, it is for readers of books. Even more particularly, it is for those whose main purpose in reading books is to gain increased understanding.\nBy “readers” we mean people who are still accustomed, as almost every literate and intelligent person used to be, to gain a large share of their information about and their understanding of the world from the written word. Not all of it, of course; even in the days before radio and television, a certain amount of information and understanding was acquired through spoken words and through observation. But for intelligent and curious people that was never enough. They knew that they had to read too, and they did read.\nThere is some feeling nowadays that reading is not as necessary as it once was. Radio and especially television have taken over many of the functions once served by print, just as photography has taken over functions once served by painting and other graphic arts. Admittedly, television serves some of these functions extremely well; the visual communication of news events, for example, has enormous impact. The ability of radio to give us information while we are engaged in doing other things—for instance, driving a car—is remarkable, and a great saving of time. But it may be seriously questioned whether the advent of modern communication media has much enhanced our understanding of the world in which we live.\nPerhaps we know more about the world than we used to, and insofar as knowledge is prerequisite to understanding, that is all to the good. But knowledge is not as much a prerequisite to understanding as is commonly supposed. We do not have to know everything about something in order to understand it; too many facts are often as much of an obstacle to understanding as too few. There is a sense in which we modems are inundated with facts to the detriment of understanding.\nOne of the reasons for this situation is that the very media we have mentioned are so designed as to make thinking seem unnecessary (though this is only an appearance). The packaging of intellectual positions and views is one of the most active enterprises of some of the best minds of our day. The viewer of television, the listener to radio, the reader of magazines, is presented with a whole complex of elements—all the way from ingenious rhetoric to carefully selected data and statistics—to make it easy for him to “make up his own mind” with the minimum of difficulty and effort. But the packaging is often done so effectively that the viewer, listener, or reader does not make up his own mind at all. Instead, he inserts a packaged opinion into his mind, somewhat like inserting a cassette into a cassette player. He then pushes a button and “plays back” the opinion whenever it seems appropriate to do so. He has performed acceptably without having had to think.\n◇Active Reading # As we said at the beginning, we will be principally concerned in these pages with the development of skill in reading books; but the rules of reading that, if followed and practiced, develop such skill can be applied also to printed material in general, to any type of reading matter—to newspapers, magazines, pamphlets, articles, tracts, even advertisements.\nSince reading of any sort is an activity, all reading must to some degree be active. Completely passive reading is impossible; we cannot read with our eyes immobilized and our minds asleep. Hence when we contrast active with passive reading, our purpose is, first, to call attention to the fact that reading can be more or less active, and second, to point out that the more active the reading the better. One reader is better than another in proportion as he is capable of a greater range of activity in reading and exerts more effort. He is better if he demands more of himself and of the text before him.\nThough, strictly speaking, there can be no absolutely passive reading, many people think that, as compared with writing and speaking, which are obviously active undertakings, reading and listening are entirely passive. The writer or speaker must put out some effort, but no work need be done by the reader or listener. Reading and listening are thought of as receiving communication from someone who is actively engaged in giving or sending it. The mistake here is to suppose that receiving communication is like receiving a blow or a legacy or a judgment from the court. On the contrary, the reader or listener is much more like the catcher in a game of baseball.\nCatching the ball is just as much an activity as pitching or hitting it. The pitcher or batter is the sender in the sense that his activity initiates the motion of the ball. The catcher or fielder is the receiver in the sense that his activity terminates it. Both are active, though the activities are different. If anything is passive, it is the ball. It is the inert thing that is put in motion or stopped, whereas the players are active, moving to pitch, hit, or catch. The analogy with writing and reading is almost perfect. The thing that is written and read, like the ball, is the passive object common to the two activities that begin and terminate the process.\nWe can take this analogy a step further. The art of catching is the skill of catching every kind of pitch—fast balls and curves, changeups and knucklers. Similarly, the art of reading is the skill of catching every sort of communication as well as possible.\nIt is noteworthy that the pitcher and catcher are successful only to the extent that they cooperate. The relation of writer and reader is similar. The writer isn’t trying not to be caught, although it sometimes seems so. Successful communication occurs in any case where what the writer wanted to have received finds its way into the reader’s possession. The writer’s skill and the reader’s skill converge upon a common end.\nAdmittedly, writers vary, just as pitchers do. Some writers have excellent “control”; they know exactly what they want to convey, and they convey it precisely and accurately. Other things being equal, they are easier to “catch” than a “wild” writer without “control.”\nThere is one respect in which the analogy breaks down. The ball is a simple unit. It is either completely caught or not. A piece of writing, however, is a complex object. It can be received more or less completely, all the way from very little of what the writer intended to the whole of it. The amount the reader “catches” will usually depend on the amount of activity he puts into the process, as well as upon the skill with which he executes the different mental acts involved.\nWhat does active reading entail? We will return to this question many times in this book. For the moment, it suffices to say that, given the same thing to read, one person reads it better than another, first, by reading it more actively, and second, by performing each of the acts involved more skillfully. These two things are related. Reading is a complex activity, just as writing is. It consists of a large number of separate acts, all of which must be performed in a good reading. The person who can perform more of them is better able to read.\n◇The Goals of Reading: Reading for Information and Reading for Understanding # You have a mind. Now let us suppose that you also have a book that you want to read. The book consists of language written by someone for the sake of communicating something to you. Your success in reading it is determined by the extent to which you receive everything the writer intended to communicate.\nThat, of course, is too simple. The reason is that there are two possible relations between your mind and the book, not just one. These two relations are exemplified by two different experiences that you can have in reading your book.\nThere is the book; and here is your mind. As you go through the pages, either you understand perfectly everything the author has to say or you do not. If you do, you may have gained information, but you could not have increased your understanding. If the book is completely intelligible to you from start to finish, then the author and you are as two minds in the same mold. The symbols on the page merely express the common understanding you had before you met.\nLet us take our second alternative. You do not understand the book perfectly. Let us even assume—what unhappily is not always true—that you understand enough to know that you do not understand it all. You know the book has more to say than you understand and hence that it contains something that can increase your understanding.\nWhat do you do then? You can take the book to someone else who, you think, can read better than you, and have him explain the parts that trouble you. (“He” may be a living person or another book—a commentary or textbook.) Or you may decide that what is over your head is not worth bothering about, that you understand enough. In either case, you are not doing the job of reading that the book requires.\nThat is done in only one way. Without external help of any sort, you go to work on the book. With nothing but the power of your own mind, you operate on the symbols before you in such a way that you gradually lift yourself from a state of understanding less to one of understanding more. Such elevation, accomplished by the mind working on a book, is highly skilled reading, the kind of reading that a book which challenges your understanding deserves.\nThus we can roughly define what we mean by the art of reading as follows: the process whereby a mind, with nothing to operate on but the symbols of the readable matter, and with no help from outside, ☍ There is one kind of situation in which it is appropriate to ask for outside help in reading a difficult book. This exception is discussed in Chapter 18. elevates itself by the power of its own operations. The mind passes from understanding less to understanding more. The skilled operations that cause this to happen are the various acts that constitute the art of reading.\nTo pass from understanding less to understanding more by your own intellectual effort in reading is something like pulling yourself up by your bootstraps. It certainly feels that way. It is a major exertion. Obviously, it is a more active kind of reading than you have done before, entailing not only more varied activity but also much more skill in the performance of the various acts required. Obviously, too, the things that are usually regarded as more difficult to read, and hence as only for the better reader, are those that are more likely to deserve and demand this kind of reading.\nThe distinction between reading for information and reading for understanding is deeper than this. Let us try to say more about it. We will have to consider both goals of reading because the line between what is readable in one way and what must be read in the other is often hazy. To the extent that we can keep these two goals of reading distinct, we can employ the word “reading” in two distinct senses.\nThe first sense is the one in which we speak of ourselves as reading newspapers, magazines, or anything else that, according to our skill and talents, is at once thoroughly intelligible to us. Such things may increase our store of information, but they cannot improve our understanding, for our understanding was equal to them before we started. Otherwise, we would have felt the shock of puzzlement and perplexity that comes from getting in over our depth—that is, if we were both alert and honest.\nThe second sense is the one in which a person tries to read something that at first he does not completely understand. Here the thing to be read is initially better or higher than the reader. The writer is communicating something that can increase the reader’s understanding. Such communication between unequals must be possible, or else one person could never learn from another, either through speech or writing. Here by “learning” is meant understanding more, not remembering more information that has the same degree of intelligibility as other information you already possess.\nThere is clearly no difficulty of an intellectual sort about gaining new information in the course of reading if the new facts are of the same sort as those you already know. A person who knows some of the facts of American history and understands them in a certain light can readily acquire by reading, in the first sense, more such facts and understand them in the same light. But suppose he is reading a history that seeks not merely to give him some more facts but also to throw a new and perhaps more revealing light on all the facts he knows. Suppose there is greater understanding available here than he possessed before he started to read. If he can manage to acquire that greater understanding, he is reading in the second sense. He has indeed elevated himself by his activity, though indirectly, of course, the elevation was made possible by the writer who had something to teach him.\nWhat are the conditions under which this kind of reading—reading for understanding—takes place? There are two. First, there is initial inequality in understanding. The writer must be “superior” to the reader in understanding, and his book must convey in readable form the insights he possesses and his potential readers lack. Second, the reader must be able to overcome this inequality in some degree, seldom perhaps fully, but always approaching equality with the writer. To the extent that equality is approached, clarity of communication is achieved.\nIn short, we can learn only from our “betters.” We must know who they are and how to learn from them. The person who has this sort of knowledge possesses the art of reading in the sense with which we are especially concerned in this book. Everyone who can read at all probably has some ability to read in this way. But all of us, without exception, can learn to read better and gradually gain more by our efforts through applying them to more rewarding materials.\nWe do not want to give the impression that facts, leading to increased information, and insights, leading to increased understanding, are always easy to distinguish. And we would admit that sometimes a mere recital of facts can itself lead to greater understanding. The point we want to emphasize here is that this book is about the art of reading for the sake of increased understanding. Fortunately, if you learn to do that, reading for information will usually take care of itself.\nOf course, there is still another goal of reading, besides gaining information and understanding, and that is entertainment. However, this book will not be much concerned with reading for entertainment. It is the least demanding kind of reading, and it requires the least amount of effort. Furthermore, there are no rules for it. Everyone who knows how to read at all can read for entertainment if he wants to.\nIn fact, any book that can be read for understanding or information can probably be read for entertainment as well, just as a book that is capable of increasing our understanding can also be read purely for the information it contains. (This proposition cannot be reversed: it is not true that every book that can be read for entertainment can also be read for understanding.) Nor do we wish to urge you never to read a good book for entertainment. The point is, if you wish to read a good book for understanding, we believe we can help you. Our subject, then, is the art of reading good books when understanding is the aim you have in view.\n◇Reading as Learning: The Difference Between Learning by Instruction and Learning by Discovery # Getting more information is learning, and so is coming to understand what you did not understand before. But there is an important difference between these two kinds of learning.\nTo be informed is to know simply that something is the case. To be enlightened is to know, in addition, what it is all about: why it is the case, what its connections are with other facts, in what respects it is the same, in what respects it is different, and so forth.\nThis distinction is familiar in terms of the differences between being able to remember something and being able to explain it. If you remember what an author says, you have learned something from reading him. If what he says is true, you have even learned something about the world. But whether it is a fact about the book or a fact about the world that you have learned, you have gained nothing but information if you have exercised only your memory. You have not been enlightened. Enlightenment is achieved only when, in addition to knowing what an author says, you know what he means and why he says it.\nIt is true, of course, that you should be able to remember what the author said as well as know what he meant. Being informed is prerequisite to being enlightened. The point, however, is not to stop at being informed.\nMontaigne speaks of \u0026ldquo;an abecedarian ignorance that precedes knowledge, and a doctoral ignorance that comes after it.\u0026rdquo; The first is the ignorance of those who, not knowing their ABC’s, cannot read at all. The second is the ignorance of those who have misread many books. They are, as Alexander Pope rightly calls them, bookful blockheads, ignorantly read. There have always been literate ignoramuses who have read too widely and not well. The Greeks had a name for such a mixture of learning and folly which might be applied to the bookish but poorly read of all ages. They are all sophomores.\nTo avoid this error—the error of assuming that to be widely read and to be well-read are the same thing—we must consider a certain distinction in types of learning. This distinction has a significant bearing on the whole business of reading and its relation to education generally.\nIn the history of education, men have often distinguished between learning by instruction and learning by discovery. Instruction occurs when one person teaches another through speech or writing. We can, however, gain knowledge without being taught. If this were not the case, and every teacher had to be taught what he in turn teaches others, there would be no beginning in the acquisition of knowledge. Hence, there must be discovery—the process of learning something by research, by investigation, or by reflection, without being taught.\nDiscovery stands to instruction as learning without a teacher stands to learning through the help of one. In both cases, the activity of learning goes on in the one who learns. It would be a mistake to suppose that discovery is active learning and instruction passive. There is no inactive learning, just as there is no inactive reading.\nThis is so true, in fact, that a better way to make the distinction clear is to call instruction “aided discovery.” Without going into learning theory as psychologists conceive it, it is obvious that teaching is a very special art, sharing with only two other arts-agriculture and medicine—an exceptionally important characteristic. A doctor may do many things for his patient, but in the final analysis it is the patient himself who must get well—grow in health. The fanner does many things for his plants or animals, but in the final analysis it is they that must grow in size and excellence. Similarly, although the teacher may help his student in many ways, it is the student himself who must do the learning. Knowledge must grow in his mind if learning is to take place.\nThe difference between learning by instruction and learning by discovery—or, as we would prefer to say, between aided and unaided discovery—is primarily a difference in the materials on which the learner works. When he is being instructed—discovering with the help of a teacher—the learner acts on something communicated to him. He performs operations on discourse, written or oral. He learns by acts of reading or listening. Note here the close relation between reading and listening. If we ignore the minor differences between these two ways of receiving communication, we can say that reading and listening are the same art—the art of being taught. When, however, the learner proceeds without the help of any sort of teacher, the operations of learning are performed on nature or the world rather than on discourse. The rules of such learning constitute the art of unaided discovery. If we use the word \u0026ldquo;reading\u0026rdquo; loosely, we can say that discovery—strictly, unaided discovery—is the art of reading nature or the world, as instruction (being taught, or aided discovery) is the art of reading books or, to include listening, of learning from discourse.\nWhat about thinking? If by “thinking” we mean the use of our minds to gain knowledge or understanding, and if learning by discovery and learning by instruction exhaust the ways of gaining knowledge, then thinking must take place during both of these two activities. We must think in the course of reading and listening, just as we must think in the course of research. Naturally, the kinds of thinking are different—as different as the two ways of learning are.\nThe reason why many people regard thinking as more closely associated with research and unaided discovery than with being taught is that they suppose reading and listening to be relatively effortless. It is probably true that one does less thinking when one reads for information or entertainment than when one is undertaking to discover something. Those are the less active sorts of reading. But it is not true of the more active reading—the effort to understand. No one who has done this sort of reading would say it can be done thoughtlessly.\nThinking is only one part of the activity of learning. One must also use one’s senses and imagination. One must observe, and remember, and construct imaginatively what cannot be observed. There is, again, a tendency to stress the role of these activities in the process of unaided discovery and to forget or minimize their place in the process of being taught through reading or listening. For example, many people assume that though a poet must use his imagination in writing a poem, they do not have to use their imagination in reading it. The art of reading, in short, includes all of the same skills that are involved in the art of unaided discovery: keenness of observation, readily available memory, range of imagination, and, of course, an intellect trained in analysis and reflection. The reason for this is that reading in this sense is discovery, too—although with help instead of without it.\n◇Present and Absent Teachers # We have been proceeding as if reading and listening could both be treated as learning from teachers. To some extent that is true. Both are ways of being instructed, and for both one must be skilled in the art of being taught. Listening to a course of lectures, for example, is in many respects like reading a book; and listening to a poem is like reading it. Many of the rules to be formulated in this book apply to such experiences. Yet there is good reason to place primary emphasis on reading, and let listening become a secondary concern. The reason is that listening is learning from a teacher who is present—a living teacher—while reading is learning from one who is absent.\nIf you ask a living teacher a question, he will probably answer you. If you are puzzled by what he says, you can save yourself the trouble of thinking by asking him what he means. If, however, you ask a book a question, you must answer it yourself. In this respect a book is like nature or the world. When you question it, it answers you only to the extent that you do the work of thinking and analysis yourself.\nThis does not mean, of course, that if the living teacher answers your question, you have no further work. That is so only if the question is simply one of fact. But if you are seeking an explanation, you have to understand it or nothing has been explained to you. Nevertheless, with the living teacher available to you, you are given a lift in the direction of understanding him, as you are not when the teacher’s words in a book are all you have to go by.\nStudents in school often read difficult books with the help and guidance of teachers. But for those of us who are not in school, and indeed also for those of us who are when we try to read books that are not required or assigned, our continuing education depends mainly on books alone, read without a teachers help. Therefore if we are disposed to go on learning and discovering, we must know how to make books teach us well. That, indeed, is the primary goal of this book.\n★2 THE LEVELS OF READING # In the preceding chapter, we made some distinctions that will be important in what follows. The goal a reader seeks—be it entertainment, information or understanding—determines the way he reads. The effectiveness with which he reads is determined by the amount of effort and skill he puts into his reading. In general, the rule is: the more effort the better, at least in the case of books that are initially beyond our powers as readers and are therefore capable of raising us from a condition of understanding less to one of understanding more. Finally, the distinction between instruction and discovery (or between aided and unaided discovery) is important because most of us, most of the time, have to read without anyone to help us. Reading, like unaided discovery, is learning from an absent teacher. We can only do that successfully if we know how.\nBut important as these distinctions are, they are relatively insignificant compared to the points we are going to make in this chapter. These all have to do with the levels of reading. The differences between the levels must be understood before any effective improvement in reading skills can occur.\nThere are four levels of reading. They are here called levels rather than kinds because kinds, strictly speaking, are distinct from one another, whereas it is characteristic of levels that higher ones include lower ones. So it is with the levels of reading, which are cumulative. The first level is not lost in the second, the second in the third, the third in the fourth. In fact, the fourth and highest level of reading includes all the others. It simply goes beyond them.\nThe first level of reading we will call Elementary Reading. Other names might be rudimentary reading, basic reading or initial reading; any one of these terms serves to suggest that as one masters this level one passes from nonliteracy to at least beginning literacy. In mastering this level, one learns the rudiments of the art of reading, receives basic training in reading, and acquires initial reading skills. We prefer the name elementary reading, however, because this level of reading is ordinarily learned in elementary school.\nThe child’s first encounter with reading is at this level. His problem then (and ours when we began to read) is to recognize the individual words on the page. The child sees a collection of black marks on a white ground (or perhaps white marks on a black ground, if he is reading from a blackboard); what the marks say is, “The cat sat on the hat.” The first grader is not really concerned at this point with whether cats do sit on hats, or with what this implies about cats, hats, and the world. He is merely concerned with language as it is employed by the writer.\nAt this level of reading, the question asked of the reader is “What does the sentence say?” That could be conceived as a complex and difficult question, of course. We mean it here, however, in its simplest sense.\nThe attainment of the skills of elementary reading occurred some time ago for almost all who read this book. Nevertheless, we continue to experience the problems of this level of reading, no matter how capable we may be as readers. This happens, for example, whenever we come upon something we want to read that is written in a foreign language that we do not know very well. Then our first effort must be to identify the actual words. Only after recognizing them individually can we begin to try to understand them, to struggle with perceiving what they mean.\nEven when they are reading material written in their own language, many readers continue to have various kinds of difficulties at this level of reading. Most of these difficulties are mechanical, and some of them can be traced back to early instruction in reading. Overcoming these difficulties usually allows us to read faster; hence, most speed reading courses concentrate on this level. We will have more to say about elementary reading in the next chapter; and in Chapter 4, we will discuss speed reading.\nThe second level of reading we will call Inspectional Reading. It is characterized by its special emphasis on time. When reading at this level, the student is allowed a set time to complete an assigned amount of reading. He might be allowed fifteen minutes to read this book, for instance—or even a book twice as long.\nHence, another way to describe this level of reading is to say that its aim is to get the most out of a book within a given time—usually a relatively short time, and always (by definition) too short a time to get out of the book everything that can be gotten.\nStill another name for this level might be skimming or pre-reading. However, we do not mean the kind of skimming that is characterized by casual or random browsing through a book. Inspectional reading is the art of skimming systematically.\nWhen reading at this level, your aim is to examine the surface of the book, to learn everything that the surface alone can teach you. That is often a good deal.\nWhereas the question that is asked at the first level is “What does the sentence say?” the question typically asked at this level is “What is the book about?” That is a surface question; others of a similar nature are “What is the structure of the book?” or “What are its parts?”\nUpon completing an inspectional reading of a book, no matter how short the time you had to do it in, you should also be able to answer the question, “What kind of book is it—a novel, a history, a scientific treatise?”\nChapter 4 is devoted to an account of this level of reading, so we will not discuss it further here. We do want to stress, however, that most people, even many quite good readers, are unaware of the value of inspectional reading. They start a book on page one and plow steadily through it, without even reading the table of contents. They are thus faced with the task of achieving a superficial knowledge of the book at the same time that they are trying to understand it. That compounds the difficulty.\nThe third level of reading we will call Analytical Reading. It is both a more complex and a more systematic activity than either of the two levels of reading discussed so far. Depending on the difficulty of the text to be read, it makes more or less heavy demands on the reader.\nAnalytical reading is thorough reading, complete reading, or good reading—the best reading you can do. If inspectional reading is the best and most complete reading that is possible given a limited time, then analytical reading is the best and most complete reading that is possible given unlimited time.\nThe analytical reader must ask many, and organized, questions of what he is reading. We do not want to state these questions here, since this book is mainly about reading at this level: Part Two gives its rules and tells you how to do it. We do want to emphasize here that analytical reading is always intensely active. On this level of reading, the reader grasps a book—the metaphor is apt—and works at it until the book becomes his own. Francis Bacon once remarked that “some books are to be tasted, others to be swallowed, and some few to be chewed and digested.” Reading a book analytically is chewing and digesting it.\nWe also want to stress that analytical reading is hardly ever necessary if your goal in reading is simply information or entertainment. Analytical reading is preeminently for the sake of understanding. Conversely, bringing your mind with the aid of a book from a condition of understanding less to one of understanding more is almost impossible unless you have at least some skill in analytical reading.\nThe fourth and highest level of reading we will call Syntopical Reading. It is the most complex and systematic type of reading of all. It makes very heavy demands on the reader, even if the materials he is reading are themselves relatively easy and unsophisticated.\nAnother name for this level might be comparative reading. When reading syntopically, the reader reads many books, not just one, and places them in relation to one another and to a subject about which they all revolve. But mere comparison of texts is not enough. Syntopical reading involves more. With the help of the books read, the syntopical reader is able to construct an analysis of the subject that may not be in any of the books. It is obvious, therefore, that syntopical reading is the most active and effortful kind of reading.\nWe will discuss syntopical reading in Part Four. Let it suffice for the moment to say that syntopical reading is not an easy art, and that the rules for it are not widely known. Nevertheless, syntopical reading is probably the most rewarding of all reading activities. The benefits are so great that it is well worth the trouble of learning how to do it.\n★3 THE FIRST LEVEL OF READING: ELEMENTARY READING # Ours is a time of great interest in and concern about reading. Public officials have declared that the 1970’s will be “the decade of reading.” Best-selling books tell us why Johnny can or can’t read. Research and experimentation in all fields of initial reading instruction proceed at an ever-increasing pace.\nThree historical trends or movements have converged upon our time to produce this ferment. The first is the continuing effort of the United States to educate all of its citizens, which means, of course, at a minimum, to make them all literate. This effort, which Americans have supported almost from the beginning of the national existence and which is one of the cornerstones of our democratic way of life, has had remarkable results. Near-universal literacy was obtained in the United States earlier than anywhere else, and this in turn has helped us to become the highly developed industrial society that we are at the present day. But there have been enormous problems, too. They can be summed up in the observation that teaching a small percentage of highly motivated children, most of them the children of literate parents, to read—as was the case a century ago—is a far cry from teaching every child to read, no matter how little motivated he may be, or how deprived his background.\nThe second historical trend is in the teaching of reading itself. As late as 1870, reading instruction was little changed from what it had been in Greek and Roman schools. In America, at least, the so-called ABC method was dominant throughout most of the nineteenth century. Children were taught to sound out the letters of the alphabet individually—hence the name of this method—and to combine them in syllables, first two letters at a time and then three and four, whether the syllables so constructed were meaningful or not. Thus, syllables such as ab, ac, ad, ib, ic were practiced for the sake of mastery of the language. When a child could name all of a determined number of combinations, he was said to know his ABC’s.\nThis synthetic method of teaching reading came under heavy criticism around the middle of the last century, and two alternatives to it were proposed. One was a variant on the synthetic ABC method, known as the phonic method. Here the word was recognized by its sounds rather than by its letter-names. Complicated and ingenious systems of printing were evolved for the purpose of representing the different sounds made by a single letter, especially the vowels. If you are fifty or over, it is probable that you learned to read using some variant of the phonic method.\nA wholly different approach, analytical rather than synthetic, originated in Germany and was advocated by Horace Mann and other educators after about 1840. This involved teaching the visual recognition of whole words before giving any attention to letter-names or letter-sounds. This so-called sight method was later extended so that whole sentences, representing units of thought, were introduced first, with the pupils only later learning to recognize the constituent words and then, finally, the constituent letters. This method was especially popular during the 1920’s and 30’s, which period was also characterized by the shift in emphasis from oral reading to silent reading. It was found that ability to read orally did not necessarily mean ability to read silently and that instruction in oral reading was not always adequate if silent reading was the goal. Thus, an almost exclusive emphasis on rapid, comprehensive silent reading was a feature of the years from about 1920 to 1925. More recently, however, the pendulum has swung back again toward phonics, which indeed had never entirely left the curriculum.\nAll of these different methods of teaching elementary reading were successful for some pupils, unsuccessful for others. In the last two or three decades, it has perhaps been the failures that have attracted the most attention. And here the third historical trend comes into play. It is traditional in America to criticize the schools; for more than a century, parents, self-styled experts, and educators themselves have attacked and indicted the educational system. No aspect of schooling has been more severely criticized than reading instruction. The current books have a long ancestry, and every innovation carries in its train a posse of suspicious and, one feels, unpersuadable observers.\nThe critics may or may not be right, but in any event the problems have taken on a new urgency as the continuing effort to educate all citizens has entered a new phase, resulting in ever-growing high school and college populations. A young man or woman who cannot read very well is hindered in his pursuit of the American dream, but that remains largely a personal matter if he is not in school. If he remains in school or goes to college, however, it is a matter of concern for his teachers as well, and for his fellow students.\nHence, researchers are very active at the present time, and their work has resulted in numerous new approaches to reading instruction. Among the more important new programs are the so-called eclectic approach, the individualized reading approach, the language-experience approach, the various approaches based on linguistic principles, and others based more or less closely on some kind of programmed instruction. In addition, new mediums such as the Initial Teaching Alphabet (i.t.a.) have been employed, and sometimes these involve new methods as well. Still other devices and programs are the \u0026ldquo;total immersion method,\u0026rdquo; the \u0026ldquo;foreign-language-school method,\u0026rdquo; and the method known variously as the \u0026ldquo;see-say,\u0026rdquo; \u0026ldquo;look-say,\u0026rdquo; \u0026ldquo;look-and-say,\u0026rdquo; or \u0026ldquo;word method.\u0026rdquo; Doubtless experiments are now being undertaken in methods and approaches that differ from all of these. It is perhaps too early to tell whether any of these is the long-sought panacea for all reading ills.\n◇Stages of Learning to Read # One useful finding of recent research is the analysis of stages in learning to read. It is now widely accepted that there are at least four more or less clearly distinguishable stages in the child’s progress toward what is called mature reading ability. The first stage is known by the term \u0026ldquo;reading readiness.\u0026rdquo; This begins, it has been pointed out, at birth, and continues normally until the age of about six or seven.\nReading readiness includes several different kinds of preparation for learning to read. Physical readiness involves good vision and hearing. Intellectual readiness involves a minimum level of visual perception such that the child can take in and remember an entire word and the letters that combine to form it Language readiness involves the ability to speak clearly and to use several sentences in correct order. Personal readiness involves the ability to work with other children, to sustain attention, to follow directions, and the like.\nGeneral reading readiness is assessed by tests and is also estimated by teachers who are often skillful at discerning just when a pupil is ready to learn to read. The important thing to remember is that jumping the gun is usually self-defeating. The child who is not yet ready to read is frustrated if attempts are made to teach him, and he may carry over his dislike for the experience into his later school career and even into adult life. Delaying the beginning of reading instruction beyond the reading readiness stage is not nearly so serious, despite the feelings of parents who may fear that their child is \u0026ldquo;backward\u0026rdquo; or is not \u0026ldquo;keeping up\u0026rdquo; with his peers.\nIn the second stage, children learn to read very simple materials. They usually begin, at least in the United States, by learning a few sight words, and typically manage to master perhaps three hundred to four hundred words by the end of the first year. Basic skills are introduced at this time, such as the use of context or meaning clues and the beginning sounds of words. By the end of this period pupils are expected to be reading simple books independently and with enthusiasm.\nIt is incidentally worth observing that something quite mysterious, almost magical, occurs during this stage. At one moment in the course of his development the child, when faced with a series of symbols on a page, finds them quite meaningless. Not much later—perhaps only two or three weeks later—he has discovered meaning in them; he knows that they say \u0026ldquo;The cat sat on the hat.\u0026rdquo; How this happens no one really knows, despite the efforts of philosophers and psychologists over two and a half millennia to study the phenomenon. Where does meaning come from? How is it that a French child would find the same meaning in the symbols \u0026ldquo;Le chat s’asseyait sur le chapeau\u0026rdquo;? Indeed, this discovery of meaning in symbols may be the most astounding intellectual feat that any human being ever performs—and most humans perform it before they are seven years old!\nThe third stage is characterized by rapid progress in vocabulary building and by increasing skill in \u0026ldquo;unlocking\u0026rdquo; the meaning of unfamiliar words through context clues. In addition, children at this stage learn to read for different purposes and in different areas of content, such as science, social studies, language arts, and the like. They learn that reading, besides being something one does at school, is also something one can do on one’s own, for fun, to satisfy curiosity, or even to \u0026ldquo;expand one’s horizons.\u0026rdquo;\nFinally, the fourth stage is characterized by the refinement and enhancement of the skills previously acquired. Above all, the student begins to be able to assimilate his reading experiences—that is, to carry over concepts from one piece of writing to another, and to compare the views of different writers on the same subject. This, the mature stage of reading, should be reached by young persons in their early teens. Ideally, they should continue to build on it for the rest of their lives.\nThat they often do not even reach it is apparent to many parents and to most educators. The reasons for the failure are many, ranging all the way from various kinds of deprivations in the home environment—economic, social, and/or intellectual (including parental illiteracy)—to personal problems of all kinds (including total revolt against \u0026ldquo;the system\u0026rdquo;). But one cause of the failure is not often noted. The very emphasis on reading readiness and on the methods employed to teach children the rudiments of reading has meant that the other, the higher, levels of reading have tended to be slighted. This is quite understandable, considering the urgency and extent of the problems found on this first level. Nevertheless, effective remedies for the overall reading deficiencies of Americans cannot be found unless efforts are made on all levels of reading.\n◇Stages and Levels # We have described four levels of reading, and we have also outlined four stages of learning to read in an elementary fashion. What is the relation between these stages and levels?\nIt is of paramount importance to recognize that the four stages outlined here are all stages of the first level of reading, as outlined in the previous chapter. They are stages, that is, of elementary reading, which thus can be usefully divided somewhat in the manner of the elementary school curriculum. The first stage of elementary reading—reading readiness—corresponds to pre-school and kindergarten experiences. The second stage—word mastery—corresponds to the first grade experience of the typical child (although many quite normal children are not \u0026ldquo;typical\u0026rdquo; in this sense), with the result that the child attains what we can call second-stage reading skills, or first grade ability in reading or first grade literacy. The third stage of elementary reading—vocabulary growth and the utilization of context—is typically (but not universally, even for normal children) acquired at about the end of the fourth grade of elementary school, and results in what is variously called fourth grade, or functional, literacy—the ability, according to one common definition, to read traffic signs or picture captions fairly easily, to fill out the simpler government forms, and the like. The fourth and final stage of elementary reading is attained at about the time the pupil leaves or graduates from elementary school or junior high school. It is sometimes called eighth grade, ninth grade, or tenth grade literacy. The child is a \u0026ldquo;mature\u0026rdquo; reader in the sense that he is now capable of reading almost anything, but still in a relatively unsophisticated manner. In the simplest terms, he is mature enough to do high school work.\nHowever, he is not yet a \u0026ldquo;mature\u0026rdquo; reader in the sense in which we want to employ the term in this book. He has mastered the first level of reading, that is all; he can read on his own and is prepared to learn more about reading. But he does not yet know how to read beyond the elementary level.\nWe mention all this because it is highly germane to the message of this book. We assume—we must assume—that you, our reader, have attained ninth grade literacy, that you have mastered the elementary level of reading, which means that you have passed successfully through the four stages described. If you think about it, you realize that we could not assume less. No one can learn from a how-to-do-it book until he can read it; and it is particularly true of a book purporting to teach one to read that its readers must be able to read in some sense of the term.\nThe difference between aided and unaided discovery comes into play here. Typically, the four stages of elementary reading are attained with the help of living teachers. Children differ in their abilities, of course; some need more help than others. But a teacher is usually present to answer questions and smooth over difficulties that arise during the elementary school years. Only when he has mastered all of the four stages of elementary reading is the child prepared to move on to the higher levels of reading. Only then can he read independently and learn on his own. Only then can he begin to become a really good reader.\n◇Higher Levels of Reading and Higher Education # Traditionally, the high schools of America have provided little reading instruction for their students, and the colleges have provided none. That situation has changed in recent years. Two generations ago, when high school enrollments increased greatly within a relatively short period, educators began to realize that it could no longer be assumed that entering students could read effectively. Remedial reading instruction was therefore provided, sometimes for as many as 75% or more students. Within the last decade, the same situation has occurred at the college level. Thus, of approximately 40,000 freshmen entering the City University of New York in the fall of 1971, upwards of half, or more than 20,000 young people, had to be given some kind of remedial training in reading.\nThat does not mean, however, that reading instruction beyond the elementary level is offered in many U.S. colleges to this day. In fact, it is offered in almost none of them. Remedial reading instruction is not instruction in the higher levels of reading. It serves only to bring students up to a level of maturity in reading that they should have attained by the time they graduated from elementary school. To this day, most institutions of higher learning either do not know how to instruct students in reading beyond the elementary level, or lack the facilities and personnel to do so.\nWe say this despite the fact that a number of four-year and community colleges have recently instituted courses in speed reading, or in \u0026ldquo;effective\u0026rdquo; reading, or \u0026ldquo;competence\u0026rdquo; in reading. On the whole (though there are exceptions), these courses are remedial. They are designed to overcome various kinds of failures of the lower schools. They are not designed to take the student beyond the first level or to introduce him to the kinds and levels of reading that are the main subject of this book.\nThis, of course, should not be the case. A good liberal arts high school, if it does nothing else, ought to produce graduates who are competent analytical readers. A good college, if it does nothing else, ought to produce competent syntopical readers. A college degree ought to represent general competence in reading such that a graduate could read any kind of material for general readers and be able to undertake independent research on almost any subject (for that is what syntopical reading, among other things, enables you to do). Often, however, three or four years of graduate study are required before students attain this level of reading ability, and they do not always attain it even then.\nOne should not have to spend four years in graduate school in order to learn how to read. Four years of graduate school, in addition to twelve years of preparatory education and four years of college—that adds up to twenty full years of schooling. It should not take that long to learn to read. Something is very wrong if it does.\nWhat is wrong can be corrected. Courses could be instituted in many high schools and colleges that are based on the program described in this book. There is nothing arcane or even really new about what we have to propose. It is largely common sense.\n◇Reading and the Democratic Ideal of Education # We do not want to seem to be mere carping critics. We know that the thunder of thousands of freshmen feet upon the stairs makes it hard to hear, no matter how reasonable the message. And as long as a large proportion, even a majority, of these new students cannot read effectively at the elementary level, we are aware that the first task to be faced must be to teach them to read in the lowest, the largest common-denominator, sense of the term.\nNor, for the moment, would we want it any other way. We are on record as holding that unlimited educational opportunity—or, speaking practically, educational opportunity that is limited only by individual desire, ability, and need—is the most valuable service that society can provide for its members. That we do not yet know how to provide that kind of opportunity is no reason to give up the attempt.\nBut we must also realize—students, teachers, and laymen alike—that even when we have accomplished the task that lies before us, we will not have accomplished the whole task. We must be more than a nation of functional literates. We must become a nation of truly competent readers, recognizing all that the word competent implies. Nothing less will satisfy the needs of the world that is coming.\n★4 THE SECOND LEVEL OF READING: INSPECTIONAL READING # Inspectional reading is a true level of reading. It is quite distinct from the level that precedes it (elementary reading) and from the one that follows it in natural sequence (analytical reading). But, as we noted in Chapter 2, the levels of reading are cumulative. Thus, elementary reading is contained in inspectional reading, as, indeed, inspectional reading is contained in analytical reading, and analytical reading in syntopical reading.\nPractically, this means that you cannot read on the inspectional level unless you can read effectively on the elementary level. You must be able to read an author’s text more or less steadily, without having to stop to look up the meaning of many words, and without stumbling over the grammar and syntax. You must be able to make sense of a majority of the sentences and paragraphs, although not necessarily the best sense of all of them.\nWhat, then, is involved in inspectional reading? How do you go about doing it?\nThe first thing to realize is that there are two types of inspectional reading. They are aspects of a single skill, but the beginning reader is well-advised to consider them as two different steps or activities. The experienced reader learns to perform both steps simultaneously, but for the moment we will treat them as if they were quite distinct.\n◇Inspectional Reading I: Systematic Skimming or Pre-reading # Let us return to the basic situation to which we have referred before. There is a book or other reading matter, and here is your mind. What is the first thing that you do?\nLet us assume two further elements in the situation, elements that are quite common. First, you do not know whether you want to read the book. You do not know whether it deserves an analytical reading. But you suspect that it does, or at least that it contains both information and insights that would be valuable to you if you could dig them out.\nSecond, let us assume—and this is very often the case—that you have only a limited time in which to find all this out.\nIn this case, what you must do is skim the book, or, as some prefer to say, pre-read it. Skimming or pre-reading is the first sublevel of inspectional reading. Your main aim is to discover whether the book requires a more careful reading. Secondly, skimming can tell you lots of other things about the book, even if you decide not to read it again with more care.\nGiving a book this kind of quick once-over is a threshing process that helps you to separate the chaff from the real kernels of nourishment. You may discover that what you get from skimming is all the book is worth to you for the time being. It may never be worth more. But you will know at least what the author’s main contention is, as well as what kind of book he has written, so the time you have spent looking through the book will not have been wasted.\nThe habit of skimming should not take much time to acquire. Here are some suggestions about how to do it.\n1. LOOK AT THE TITLE PAGE AND, IF THE BOOK HAS ONE, AT ITS PREFACE. Read each quickly. Note especially the subtitles or other indications of the scope or aim of the book or of the author’s special angle on his subject. Before completing this step you should have a good idea of the subject, and, if you wish, you may pause for a moment to place the book in the appropriate category in your mind. What pigeonhole that already contains other books does this one belong in?\n2. STUDY THE TABLE OF CONTENTS to obtain a general sense of the book’s structure; use it as you would a road map before taking a trip. It is astonishing how many people never even glance at a book’s table of contents unless they wish to look something up in it. In fact, many authors spend a considerable amount of time in creating the table of contents, and it is sad to think their efforts are often wasted.\nIt used to be a common practice, especially in expository works, but sometimes even in novels and poems, to write very full tables of contents, with the chapters or parts broken down into many subtitles indicative of the topics covered. Milton, for example, wrote more or less lengthy headings, or \u0026ldquo;Arguments,\u0026rdquo; as he called them, for each book of Paradise Lost. Gibbon published his Decline and Fall of the Roman Empire with an extensive analytical table of contents for each chapter. Such summaries are no longer common, although occasionally you do still come across an analytical table of contents. One reason for the decline of the practice may be that people are not so likely to read tables of contents as they once were. Also, publishers have come to feel that a less revealing table of contents is more seductive than a completely frank and open one. Readers, they feel, will be attracted to a book with more or less mysterious chapter titles—they will want to read the book to find out what the chapters are about. Even so, a table of contents can be valuable, and you should read it carefully before going on to the rest of the book.\nAt this point, you might turn back to the table of contents of this book, if you have not already read it. We tried to make it as full and informative as we could. Examining it should give you a good idea of what we are trying to do.\n3. CHECK THE INDEX if the book has one—most expository works do. Make a quick estimate of the range of topics covered and of the kinds of books and authors referred to. When you see terms listed that seem crucial, look up at least some of the passages cited. (We will have much more to say about crucial terms in Part Two. Here you must make your judgment of their importance on the basis of your general sense of the book, as obtained from steps 1 and 2.) The passages you read may contain the crux—the point on which the book hinges—or the new departure which is the key to the author’s approach and attitude.\nAs in the case of the table of contents, you might at this point check the index of this book. You will recognize as crucial some terms that have already been discussed. Can you identify, for example, by the number of references under them, any others that also seem important?\n4. If the book is a new one with a dust jacket, READ THE PUBLISHER’S BLURB. Some people have the impression that the blurb is never anything but sheer puffery. But this is quite often not true, especially in the case of expository works. The blurbs of many of these books are written by the authors themselves, admittedly with the help of the publisher’s public relations department. It is not uncommon for authors to try to summarize as accurately as they can the main points in their book. These efforts should not go unnoticed. Of course, if the blurb is nothing but a puff for the book, you will ordinarily be able to discover this at a glance. But that in itself can tell you something about the work. Perhaps the book does not say anything of importance—and that is why the blurb does not say anything, either.\nUpon completing these first four steps you may already have enough information about the book to know that you want to read it more carefully, or that you do not want or need to read it at all. In either case, you may put it aside for the moment. If you do not do so, you are now ready to skim the book, properly speaking.\n5. From your general and still rather vague knowledge of the book’s contents, LOOK NOW AT THE CHAPTERS THAT SEEM TO BE PIVOTAL TO ITS ARGUMENT. If these chapters have summary statements in their opening or closing pages, as they often do, read these statements carefully.\n6. Finally, TURN THE PAGES, DIPPING IN HERE AND THERE, READING A PARAGRAPH OR TWO, SOMETIMES SEVERAL PAGES IN SEQUENCE, NEVER MORE THAN THAT. Thumb through the book in this way, always looking for signs of the main contention, listening for the basic pulsebeat of the matter. Above all, do not fail to read the last two or three pages, or, if these are an epilogue, the last few pages of the main part of the book. Few authors are able to resist the temptation to sum up what they think is new and important about their work in these pages. You do not want to miss this, even though, as sometimes happens, the author himself may be wrong in his judgment.\nYou have now skimmed the book systematically; you have given it the first type of inspectional reading. You should know a good deal about the book at this point, after having spent no more than a few minutes, at most an hour, with it. In particular, you should know whether the book contains matter that you still want to dig out, or whether it deserves no more of your time and attention. You should also be able to place the book even more accurately than before in your mental card catalogue, for further reference if the occasion should ever arise.\nIncidentally, this is a very active sort of reading. It is impossible to give any book an inspectional reading without being alert, without having all of one’s faculties awake and working. How many times have you daydreamed through several pages of a good book only to wake up to the realization that you have no idea of the ground you have gone over? That cannot happen if you follow the steps outlined here—that is, if you have a system for following a general thread.\nThink of yourself as a detective looking for clues to a book’s general theme or idea, alert for anything that will make it clearer. Heeding the suggestions we have made will help you sustain this attitude. You will be surprised to find out how much time you will save, pleased to see how much more you will grasp, and relieved to discover how much easier it all can be than you supposed.\n◇Inspectional Reading II: Superficial Reading # The title of this section is intentionally provocative. The word \u0026ldquo;superficial\u0026rdquo; ordinarily has a negative connotation. We are quite serious, however, in using the term.\nEveryone has had the experience of struggling fruitlessly with a difficult book that was begun with high hopes of enlightenment. It is natural enough to conclude that it was a mistake to try to read it in the first place. But that was not the mistake. Rather it was in expecting too much from the first going over of a difficult book. Approached in the right way, no book intended for the general reader, no matter how difficult, need be a cause for despair.\nWhat is the right approach? The answer lies in an important and helpful rule of reading that is generally overlooked. That rule is simply this: In tackling a difficult book for the first time, read it through without ever stopping to look up or ponder the things you do not understand right away.\nPay attention to what you can understand and do not be stopped by what you cannot immediately grasp. Go right on reading past the point where you have difficulties in understanding, and you will soon come to things you do understand. Concentrate on these. Keep on in this way. Read the book through, undeterred and undismayed by the paragraphs, footnotes, comments, and references that escape you. If you let yourself get stalled, if you allow yourself to be tripped up by any one of these stumbling blocks, you are lost. In most cases, you will not be able to puzzle the thing out by sticking to it. You will have a much better chance of understanding it on a second reading, but that requires you to have read the book through at least once.\nWhat you understand by reading the book through to the end—even if it is only fifty percent or less—will help you when you make the additional effort later to go back to the places you passed by on your first reading. And even if you never go back, understanding half of a really tough book is much better than not understanding it at all, which will be the case if you allow yourself to be stopped by the first difficult passage you come to.\nMost of us were taught to pay attention to the things we did not understand. We were told to go to a dictionary when we met an unfamiliar word. We were told to go to an encyclopedia or some other reference work when we were confronted with allusions or statements we did not comprehend. We were told to consult footnotes, scholarly commentaries, or other secondary sources to get help. But when these things are done prematurely, they only impede our reading, instead of helping it.\nThe tremendous pleasure that can come from reading Shakespeare, for instance, was spoiled for generations of high school students who were forced to go through Julius Caesar, As You Like It, or Hamlet, scene by scene, looking up all the strange words in a glossary and studying all the scholarly footnotes. As a result, they never really read a Shakespearean play. By the time they reached the end, they had forgotten the beginning and lost sight of the whole. Instead of being forced to take this pedantic approach, they should have been encouraged to read the play at one sitting and discuss what they got out of that first quick reading. Only then would they have been ready to study the play carefully and closely because then they would have understood enough of it to learn more.\nThe rule applies with equal force to expository works. Here, indeed, the best proof of the soundness of the rule—give a book a first superficial reading—is what happens when you do not follow it. Take a basic work in economics, for example, such as Adam Smith\u0026rsquo;s classic The Wealth of Nations. (We choose this book as an example because it is more than a textbook or a work for specialists in the field. It is a book for the general reader.) If you insist on understanding everything on every page before you go on to the next, you will not get very far. In your effort to master the fine points, you will miss the big points that Smith makes so clearly about the factors of wages, rents, profits, and interest that enter into the cost of things, the role of the market in determining prices, the evils of monopoly, the reasons for free trade. You will miss the forest for the trees. You will not be reading well on any level.\n◇On Reading Speeds # We described inspectional reading in Chapter 2 as the art of getting the most out of a book in a limited time. In describing it further in the present chapter, we have in no way changed that definition. The two steps involved in inspectional reading are both taken rapidly. The competent inspectional reader will accomplish them both quickly, no matter how long or difficult the book he is trying to read.\nThat working definition, however, inevitably raises the question. What about speed reading? What is the relation between the levels of reading and the many speed reading courses, both academic and commercial, that are offered at the present day?\nWe have already suggested that such courses are basically remedial—that is, that they provide instruction mainly, if not exclusively, in reading on the elementary level. But more needs to be said.\nLet it be understood at once that we are wholly in favor of the proposition that most people ought to be able to read faster than they do. Too often, there are things we have to read that are not really worth spending a lot of time reading; if we cannot read them quickly, it will be a terrible waste of time. It is true enough that many people read some things too slowly, and that they ought to read them faster. But many people also read some things too fast, and they ought to read those things more slowly. A good speed reading course should therefore teach you to read at many different speeds, not just one speed that is faster than anything you can manage now. It should enable you to vary your rate of reading in accordance with the nature and complexity of the material.\nOur point is really very simple. Many books are hardly worth even skimming; some should be read quickly; and a few should be read at a rate, usually quite slow, that allows for complete comprehension. It is wasteful to read a book slowly that deserves only a fast reading; speed reading skills can help you solve that problem. But this is only one reading problem. The obstacles that stand in the way of comprehension of a difficult book are not ordinarily, and perhaps never primarily, physiological or psychological. They arise because the reader simply does not know what to do when approaching a difficult—and rewarding—book. He does not know the rules of reading; he does not know how to marshal his intellectual resources for the task. No matter how quickly he reads, he will be no better off if, as is too often true, he does not know what he is looking for and does not know when he has found it.\nWith regard to rates of reading, then, the ideal is not merely to be able to read faster, but to be able to read at different speeds—and to know when the different speeds are appropriate. Inspectional reading is accomplished quickly, but that is not only because you read faster, although in fact you do; it is also because you read less of a book when you give it an inspectional reading, and because you read it in a different way, with different goals in mind. Analytical reading is ordinarily much slower than inspectional reading, but even when you are giving a book an analytical reading, you should not read all of it at the same rate of speed. Every book, no matter how difficult, contains interstitial material that can be and should be read quickly; and every good book also contains matter that is difficult and should be read very slowly.\n◇Fixations and Regressions # Speed reading courses properly make much of the discovery—we have known it for half a century or more—that most people continue to sub-vocalize for years after they are first taught to read. Films of eye movements, furthermore, show that the eyes of young or untrained readers \u0026ldquo;fixate\u0026rdquo; as many as five or six times in the course of each line that is read. (The eye is blind while it moves; it can only see when it stops.) Thus single words or at the most two-word or three-word phrases are being read at a time, in jumps across the line. Even worse than that, the eyes of incompetent readers regress as often as once every two or three lines—that is, they return to phrases or sentences previously read.\nAll of these habits are wasteful and obviously cut down reading speed. They are wasteful because the mind, unlike the eye, does not need to \u0026ldquo;read\u0026rdquo; only a word or short phrase at a time. The mind, that astounding instrument, can grasp a sentence or even a paragraph at a \u0026ldquo;glance\u0026rdquo;—if only the eyes will provide it with the information it needs. Thus the primary task—recognized as such by all speed reading courses—is to correct the fixations and regressions that slow so many readers down. Fortunately, this can be done quite easily. Once it is done, the student can read as fast as his mind will let him, not as slow as his eyes make him.\nThere are various devices for breaking the eye fixations, some of them complicated and expensive. Usually, however, it is not necessary to employ any device more sophisticated than your own hand, which you can train yourself to follow as it moves more and more quickly across and down the page. You can do this yourself. Place your thumb and first two fingers together. Sweep this \u0026ldquo;pointer\u0026rdquo; across a line of type, a little faster than it is comfortable for your eyes to move. Force yourself to keep up with your hand. You will very soon be able to read the words as you follow your hand. Keep practicing this, and keep increasing the speed at which your hand moves, and before you know it you will have doubled or trebled your reading speed.\n◇The Problem of Comprehension # But what exactly have you gained if you increase your reading speed significantly? It is true that you have saved time—but what about comprehension? Has that also increased, or has it suffered in the process?\nThere is no speed reading course that we know of that does not claim to be able to increase your comprehension along with your reading speed. And on the whole, there is probably some foundation for these claims. The hand (or some other device) used as a timer tends not only to increase your reading rate, but also to improve your concentration on what you are reading. As long as you are following your hand it is harder to fall asleep, to daydream, to let your mind wander. So far, so good. Concentration is another name for what we have called activity in reading. The good reader reads actively, with concentration.\nBut concentration alone does not really have much of an effect on comprehension, when that is properly understood. Comprehension involves much more than merely being able to answer simple questions of fact about a text. This limited kind of comprehension, in fact, is nothing but the elementary ability to answer the question about a book or other reading material: \u0026ldquo;What does it say?\u0026rdquo; The many further questions that, when correctly answered, imply higher levels of comprehension are seldom asked in speed reading courses, and instruction in how to answer them is seldom given.\nTo make this clearer, let us take an example of something to read. Let us take the Declaration of Independence. You probably have a copy of it available. Take it down and look at it. It occupies less than three pages when printed. How fast should you read it?\nThe second paragraph of the Declaration ends with the sentence: \u0026ldquo;To prove this, let facts be submitted to a candid world.\u0026rdquo; The following two pages of \u0026ldquo;facts,\u0026rdquo; some of which, incidentally, are quite dubious, can be read quickly. It is not necessary to gain more than a general idea of the kind of facts that Jefferson is citing, unless, of course, you are a scholar concerned with the historical circumstances in which he wrote. Even the last paragraph, ending with the justly celebrated statement that the signers \u0026ldquo;mutually pledge to each other our lives, our fortunes, and our sacred honour,\u0026rdquo; can be read quickly. This is a rhetorical flourish, and it deserves what mere rhetoric always deserves. But the first two paragraphs of the Declaration of Independence require more than a first rapid reading.\nWe doubt that there is anyone who can read those first two paragraphs at a rate much faster than 20 words a minute. Indeed, individual words in the famous second paragraph- words like \u0026ldquo;inalienable,\u0026rdquo; \u0026ldquo;rights,\u0026rdquo; \u0026ldquo;liberty,\u0026rdquo; \u0026ldquo;happiness,\u0026rdquo; \u0026ldquo;consent,\u0026rdquo; \u0026ldquo;just powers\u0026rdquo;—are worth dwelling over, puzzling about, considering at length. Properly read, for full comprehension, those first two paragraphs of the Declaration might require days, or weeks, or even years.\nThe problem of speed reading, then, is the problem of comprehension. Practically, this comes down to defining comprehension at levels beyond the elementary. Speed reading courses, for the most part, do not attempt this. It is worth emphasizing, therefore, that it is precisely comprehension in reading that this book seeks to improve. You cannot comprehend a book without reading it analytically; analytical reading, as we have noted, is undertaken primarily for the sake of comprehension (or understanding).\n◇Summary of Inspectional Reading # A few words in summary of this chapter. There is no single right speed at which you should read; the ability to read at various speeds and to know when each speed is appropriate is the ideal. Great speed in reading is a dubious achievement; it is of value only if what you have to read is not really worth reading. A better formula is this: Every book should be read no more slowly than it deserves, and no more quickly than you can read it with satisfaction and comprehension. In any event, the speed at which they read, be it fast or slow, is but a fractional part of most people’s problem with reading.\nSkimming or pre-reading a book is always a good idea; it is necessary when you do not know, as is often the case, whether the book you have in hand is worth reading carefully. You will find that out by skimming it. It is generally desirable to skim even a book that you intend to read carefully, to get some idea of its form and structure.\nFinally, do not try to understand every word or page of a difficult book the first time through. This is the most important rule of all; it is the essence of inspectional reading. Do not be afraid to be, or to seem to be, superficial. Race through even the hardest book. You will then be prepared to read it well the second time.\nWe have now completed our initial discussion of the second level of reading—inspectional reading. We will return to the subject when we come to Part Four, where we will show what an important role inspectional reading plays in syntopical reading, the fourth and highest level of reading.\nHowever, you should keep in mind during our discussion of the third level of reading—analytical reading—which is described in the second part of this book, that inspectional reading serves an important function at that level, too. The two stages of inspectional reading can both be thought of as anticipations of steps that the reader takes when he reads analytically. The first stage of inspectional reading—the stage we have called systematic skimming—serves to prepare the analytical reader to answer the questions that must be asked during the first stage of that level. Systematic skimming, in other words, anticipates the comprehension of a book’s structure. And the second stage of inspectional reading—the stage we have called superficial reading—serves the reader when he comes to the second stage of reading at the analytical level. Superficial reading is the first necessary step in the interpretation of a book’s contents.\nBefore going on to explain analytical reading, we want to pause for a moment to consider again the nature of reading as an activity. There are certain actions the active or demanding reader must perform in order to read well. We will discuss them in the next chapter.\n★5 HOW TO BE A DEMANDING READER # The rules for reading yourself to sleep are easier to follow than are the rules for staying awake while reading. Get into bed in a comfortable position, make sure the light is inadequate enough to cause a slight eyestrain, choose a book that is either terribly difficult or terribly boring—in any event, one that you do not really care whether you read or not—and you will be asleep in a few minutes. Those who are experts in relaxing with a book do not have to wait for nightfall. A comfortable chair in the library will do any time.\nUnfortunately, the rules for keeping awake do not consist in doing just the opposite. It is possible to keep awake while reading in a comfortable chair or even in bed, and people have been known to strain their eyes by reading late in light too dim. What kept the famous candlelight readers awake? One thing certainly—it made a difference to them, a great difference, whether or not they read the book they had in hand.\nWhether you manage to keep awake or not depends in large part on your goal in reading. If your aim in reading is to profit from it—to grow somehow in mind or spirit—you have to keep awake. That means reading as actively as possible. It means making an effort—an effort for which you expect to be repaid.\nGood books, fiction or nonfiction, deserve such reading. To use a good book as a sedative is conspicuous waste. To fall asleep or, what is the same, to let your mind wander during the hours you planned to devote to reading for profit—that is, primarily for understanding—is clearly to defeat your own ends.\nBut the sad fact is that many people who can distinguish between profit and pleasure—between understanding, on the one hand, and entertainment or the mere satisfaction of curiosity, on the other hand—nevertheless fail to carry out their reading plans. They fail even if they know which books give which. The reason is that they do not know how to be demanding readers, how to keep their mind on what they are doing by making it do the work without which no profit can be earned.\n◇The Essence of Active Reading: The Four Basic Questions a Reader Asks # We have already discussed active reading extensively in this book. We have said that active reading is better reading, and we have noted that inspectional reading is always active. It is an effortful, not an effortless, undertaking. But we have not yet gone to the heart of the matter by stating the one simple prescription for active reading. It is: Ask questions while you read—questions that you yourself must try to answer in the course of reading.\nAny questions? No. The art of reading on any level above the elementary consists in the habit of asking the right questions in the right order. There are four main questions you must ask about any book. ☍ These four questions, as stated, together with the discussion of them that follows, apply mainly to expository or nonfiction works. However, the questions, when adapted, apply to fiction and poetry as well. The adaptations required are discussed in Chapters 14 and 15. 1. WHAT IS THE BOOK ABOUT AS A WHOLE? You must try to discover the leading theme of the book, and how the author develops this theme in an orderly way by subdividing it into its essential subordinate themes or topics.\n2. WHAT IS BEING SAID IN DETAIL, AND HOW? You must try to discover the main ideas, assertions, and arguments that constitute the author’s particular message.\n3. IS THE BOOK TRUE, IN WHOLE OR IN PART? You cannot answer this question until you have answered the first two. You have to know what is being said before you can decide whether it is true or not. When you understand a book, however, you are obligated, if you are reading seriously, to make up your own mind. Knowing the author’s mind is not enough.\n4. WHAT OF IT? If the book has given you information, you must ask about its significance. Why does the author think it is important to know these things? Is it important to you to know them? And if the book has not only informed you, but also enlightened you, it is necessary to seek further enlightenment by asking what else follows, what is further implied or suggested.\nWe will return to these four questions at length in the rest of this book. Stated another way, they become the basic rules of reading with which Part Two is mainly concerned. They are stated here in question form for a very good reason. Reading a book on any level beyond the elementary is essentially an effort on your part to ask it questions (and to answer them to the best of your ability). That should never be forgotten. And that is why there is all the difference in the world between the demanding and the undemanding reader. The latter asks no questions—and gets no answers.\nThe four questions stated above summarize the whole obligation of a reader. They apply to anything worth reading—a book or an article or even an advertisement. Inspectional reading tends to provide more accurate answers to the first two questions than to the last two, but it nevertheless helps with those also. An analytical reading of a book has not been accomplished satisfactorily until you have answers to those last questions—until you have some idea of the book’s truth, in whole or part, and of its significance, if only in your own scheme of things. The last question—What of it?—is probably the most important one in syntopical reading. Naturally, you will have to answer the first three questions before attempting the final one.\nKnowing what the four questions are is not enough. You must remember to ask them as you read. The habit of doing that is the mark of a demanding reader. More than that, you must know how to answer them precisely and accurately. The trained ability to do that is the art of reading.\nPeople go to sleep over good books not because they are unwilling to make the effort, but because they do not know how to make it. Good books are over your head; they would not be good for you if they were not. And books that are over your head weary you unless you can reach up to them and pull yourself up to their level. It is not the stretching that tires you, but the frustration of stretching unsuccessfully because you lack the skill to stretch effectively. To keep on reading actively, you must have not only the will to do so, but also the skill—the art that enables you to elevate yourself by mastering what at first sight seems to be beyond you.\n◇How to Make a Book Your Own # If you have the habit of asking a book questions as you read, you are a better reader than if you do not. But, as we have indicated, merely asking questions is not enough. You have to try to answer them. And although that could be done, theoretically, in your mind only, it is much easier to do it with a pencil in your hand. The pencil then becomes the sign of your alertness while you read.\nIt is an old saying that you have to \u0026ldquo;read between the lines\u0026rdquo; to get the most out of anything. The rules of reading are a formal way of saying this. But we want to persuade you to “write between the lines,” too. Unless you do, you are not likely to do the most efficient kind of reading.\nWhen you buy a book, you establish a property right in it, just as you do in clothes or furniture when you buy and pay for them. But the act of purchase is actually only the prelude to possession in the case of a book. Full ownership of a book only comes when you have made it a part of yourself, and the best way to make yourself a part of it—which comes to the same thing—is by writing in it.\nWhy is marking a book indispensable to reading it? First, it keeps you awake—not merely conscious, but wide awake. Second, reading, if it is active, is thinking, and thinking tends to express itself in words, spoken or written. The person who says he knows what he thinks but cannot express it usually does not know what he thinks. Third, writing your reactions down helps you to remember the thoughts of the author.\nReading a book should be a conversation between you and the author. Presumably he knows more about the subject than you do; if not, you probably should not be bothering with his book. But understanding is a two-way operation; the learner has to question himself and question the teacher. He even has to be willing to argue with the teacher, once he understands what the teacher is saying. Marking a book is literally an expression of your differences or your agreements with the author. It is the highest respect you can pay him.\nThere are all kinds of devices for marking a book intelligently and fruitfully. Here are some devices that can be used:\n1. UNDERLINING—of major points; of important or forceful statements.\n2. VERTICAL LINES AT THE MARGIN—to emphasize a statement already underlined or to point to a passage too long to be underlined.\n3. STAR, ASTERISK, OR OTHER DOODAD AT THE MARGIN—to be used sparingly, to emphasize the ten or dozen most important statements or passages in the book. You may want to fold a corner of each page on which you make such marks or place a slip of paper between the pages. In either case, you will be able to take the book off the shelf at any time and, by opening it to the indicated page, refresh your recollection.\n4. NUMBERS IN THE MARGIN—to indicate a sequence of points made by the author in developing an argument.\n5. NUMBERS OF OTHER PAGES IN THE MARGIN—to indicate where else in the book the author makes the same points, or points relevant to or in contradiction of those here marked; to tie up the ideas in a book, which, though they may be separated by many pages, belong together. Many readers use the symbol \u0026ldquo;Cf\u0026rdquo; to indicate the other page numbers; it means \u0026ldquo;compare\u0026rdquo; or \u0026ldquo;refer to\u0026rdquo;.\n6. CIRCLING OF KEY WORDS OR PHRASES—This serves much the same function as underlining.\n7. WRITING IN THE MARGIN, OR AT THE TOP OR BOTTOM OF THE PAGE—to record questions (and perhaps answers) which a passage raises in your mind; to reduce a complicated discussion to a simple statement; to record the sequence of major points right through the book. The endpapers at the back of the book can be used to make a personal index of the author’s points in the order of their appearance.\nTo inveterate book-markers, the front endpapers are often the most important. Some people reserve them for a fancy bookplate. But that expresses only their financial ownership of the book. The front endpapers are better reserved for a record of your thinking. After finishing the book and making your personal index on the back endpapers, turn to the front and try to outline the book, not page by page or point by point (you have already done that at the back), but as an integrated structure, with a basic outline and an order of parts. That outline will be the measure of your understanding of the work; unlike a bookplate, it will express your intellectual ownership of the book.\n◇The Three Kinds of Note-making # There are three quite different kinds of notes that you will make in your books as well as about them. Which kind you make depends upon the level at which you are reading.\nWhen you give a book an inspectional reading, you may not have much time to make notes in it; inspectional reading, as we have observed, is always limited as to time. Nevertheless, you are asking important questions about a book when you read it at this level, and it would be desirable, even if it is not always possible, to record your answers when they are fresh in your mind.\nThe questions answered by inspectional reading are: first, what kind of book is it? second, what is it about as a whole? and third, what is the structural order of the work whereby the author develops his conception or understanding of that general subject matter? You may and probably should make notes concerning your answers to these questions, especially if you know that it may be days or months before you will be able to return to the book to give it an analytical reading. The best place to make such notes is on the contents page, or perhaps on the title page, which are otherwise unused in the scheme we have outlined above.\nThe point to recognize is that these notes primarily concern the structure of the book, and not its substance—at least not in detail. We therefore call this kind of note-making structural.\nIn the course of an inspectional reading, especially of a long and difficult book, you may attain some insights into the author’s ideas about his subject matter. Often, however, you will not; and certainly you should put off making any judgment of the accuracy or truth of the statements until you have read the book more carefully. Then, during an analytical reading, you will need to give answers to questions about the truth and significance of the book. The notes you make at this level of reading are, therefore, not structural but conceptual. They concern the author’s concepts, and also your own, as they have been deepened or broadened by your reading of the book.\nThere is an obvious difference between structural and conceptual note-making. What kind of notes do you make when you are giving several books a syntopical reading—when you are reading more than one book on a single subject? Again, such notes will tend to be conceptual; and the notes on a page may refer you not only to other pages in that book, but also to pages in other books.\nThere is a step beyond even that, however, and a truly expert reader can take it when he is reading several books syntopically. That is to make notes about the shape of the discussion—the discussion that is engaged in by all of the authors, even if unbeknownst to them. For reasons that will become clear in Part Four, we prefer to call such notes dialectical. Since they are made concerning several books, not just one, they often have to be made on a separate sheet (or sheets) of paper. Here, a structure of concepts is implied—an order of statements and questions about a single subject matter. We will return to this kind of note-making in Chapter 20.\n◇Forming the Habit of Reading # Any art or skill is possessed by those who have formed the habit of operating according to its rules. This is the way the artist or craftsman in any field differs from those who lack his skill.\nNow there is no other way of forming a habit of operation than by operating. That is what it means to say one learns to do by doing. The difference between your activity before and after you have formed a habit is a difference in facility and readiness. After practice, you can do the same thing much better than when you started. That is what it means to say practice makes perfect. What you do very imperfectly at first, you gradually come to do with the kind of almost automatic perfection that an instinctive performance has. You do something as if you were born to it, as if the activity were as natural to you as walking or eating. That is what it means to say that habit is second nature.\nKnowing the rules of an art is not the same as having the habit. When we speak of a man as skilled in any way, we do not mean that he knows the rules of making or doing something, but that he possesses the habit of making or doing it. Of course, it is true that knowing the rules, more or less explicitly, is a condition of getting the skill. You cannot follow rules you do not know. Nor can you acquire an artistic habit—any craft or skill—without following rules. The art as something that can be taught consists of rules to be followed in operation. The art as something learned and possessed consists of the habit that results from operating according to the rules.\nIncidentally, not everyone understands that being an artist consists in operating according to rules. People point to a highly original painter or sculptor and say, “He isn’t following rules. He\u0026rsquo;s doing something entirely original, something that has never been done before, something for which there are no rules.” But they fail to see what rules it is that the artist follows. There are no final, unbreakable rules, strictly speaking, for making a painting or sculpture. But there are rules for preparing canvas and mixing paints and applying them, and for moulding clay or welding steel. Those rules the painter or sculptor must have followed, or else he could not have made the thing he has made. No matter how original his final production, no matter how little it seems to obey the “rules” of art as they have traditionally been understood, he must be skilled to produce it. And this is the art—the skill or craft—that we are talking about here.\n◇From Many Rules to One Habit # Reading is like skiing. When done well, when done by an expert, both reading and skiing are graceful, harmonious activities. When done by a beginner, both are awkward, frustrating, and slow.\nLearning to ski is one of the most humiliating experiences an adult can undergo (that is one reason to start young). After all, an adult has been walking for a long time; he knows where his feet are; he knows how to put one foot in front of the other in order to get somewhere. But as soon as he puts skis on his feet, it is as though he had to learn to walk all over again. He slips and slides, falls down, has trouble getting up, gets his skis crossed, tumbles again, and generally looks—and feels—like a fool.\nEven the best instructor seems at first to be no help. The ease with which the instructor performs actions that he says are simple but that the student secretly believes are impossible is almost insulting. How can you remember everything the instructor says you have to remember? Bend your knees. Look down the hill. Keep your weight on the downhill ski. Keep your back straight, but nevertheless lean forward. The admonitions seem endless—how can you think about all that and still ski?\nThe point about skiing, of course, is that you should not be thinking about the separate acts that, together, make a smooth turn or series of linked turns—instead, you should merely be looking ahead of you down the hill, anticipating bumps and other skiers, enjoying the feel of the cold wind on your cheeks, smiling with pleasure at the fluid grace of your body as you speed down the mountain. In other words, you must learn to forget the separate acts in order to perform all of them, and indeed any of them, well. But in order to forget them as separate acts, you have to learn them first as separate acts. Only then can you put them together to become a good skier.\nIt is the same with reading. Probably you have been reading for a long time, too, and starting to learn all over again can be humiliating. But it is just as true of reading as it is of skiing that you cannot coalesce a lot of different acts into one complex, harmonious performance until you become expert at each of them. You cannot telescope the different parts of the job so that they run into one another and fuse intimately. Each separate act requires your full attention while you are doing it. After you have practiced the parts separately, you can not only do each with greater facility and less attention but can also gradually put them together into a smoothly running whole.\nAll of this is common knowledge about learning a complex skill. We say it here merely because we want you to realize that learning to read is at least as complex as learning to ski or to typewrite or to play tennis. If you can recall your patience in any other learning experience you have had, you will be more tolerant of instructors who will shortly enumerate a long list of rules for reading.\nThe person who has had one experience in acquiring a complex skill knows that he need not fear the array of rules that present themselves at the beginning of something new to be learned. He knows that he does not have to worry about how all the separate acts in which he must become separately proficient are going to work together.\nThe multiplicity of the rules indicates the complexity of the one habit to be formed, not a plurality of distinct habits. The parts coalesce and telescope as each reaches the stage of automatic execution. When all the subordinate acts can be done more or less automatically, you have formed the habit of the whole performance. Then you can think about tackling an expert run you have never skied before, or reading a book that you once thought was too difficult for you. At the beginning, the learner pays attention to himself and his skill in the separate acts. When the acts have lost their separateness in the skill of the whole performance, the learner can at last pay attention to the goal that the technique he has acquired enables him to reach.\nWe hope we have encouraged you by the things we have said in these pages. It is hard to learn to read well. Not only is reading, especially analytical reading, a very complex activity-much more complex than skiing; it is also much more of a mental activity. The beginning skier must think of physical acts that he can later forget and perform almost automatically. It is relatively easy to think of and be conscious of physical acts. It is much harder to think of mental acts, as the beginning analytical reader must do; in a sense, he is thinking about his own thoughts. Most of us are unaccustomed to doing this. Nevertheless, it can be done, and a person who does it cannot help learning to read much better.\n★PART TWO The Third Level of Reading: Analytical Reading # ★6 PIGEONHOLING A BOOK # We said at the beginning of this book that the instruction in reading that it provides applies to anything you have to or want to read. However, in expounding the rules of analytical reading, as we will do in Part Two, we may seem to be ignoring that fact. We will usually, if not always, refer to the reading of whole books. Why is this so?\nThe answer is simple. Reading a whole book, and especially a long and difficult one, poses the severest problems any reader can face. Reading a short story is almost always easier than reading a novel; reading an article is almost always easier than reading a book on the same subject. If you can read an epic poem or a novel, you can read a lyric or a short story; if you can read an expository book—a history, a philosophical work, a scientific treatise—you can read an article or abstract in the same field.\nHence everything that we will say about reading books applies to reading other materials of the kinds indicated. You are to understand, when we refer to the reading of books, that the rules expounded refer to lesser and more easily understood materials, too. Sometimes the rules do not apply to the latter in quite the same way, or to the extent that they apply to whole books. Nevertheless, it will always be easy for you to adapt them so that they are applicable.\n◇The Importance of Classifying Books # The first rule of analytical reading can be expressed as follows: RULE 1. YOU MUST KNOW WHAT KIND OF BOOK YOU ARE READING, AND YOU SHOULD KNOW THIS AS EARLY IN THE PROCESS AS POSSIBLE, PREFERABLY BEFORE YOU BEGIN TO READ.\nYou must know, for instance, whether you are reading fiction—a novel, a play, an epic, a lyric—or whether it is an expository work of some sort. Almost every reader knows a work of fiction when he sees it. Or so it seems—and yet this is not always easy. Is Portnoy\u0026rsquo;s Complaint a novel or a psychoanalytical study? Is Naked Lunch a fiction or a tract against drug abuse, similar to the books that used to recount the horrors of alcohol for the betterment of readers? Is Gone with the Wind a romance or a history of the South before and during the Civil War? Do Main Street and The Grapes of Wrath belong in the category of belles-lettres or are both of them sociological studies, the one concentrating on urban experiences, the other on agrarian life?\nAll of these, of course, are novels; all of them appeared on the fiction side of the best-seller lists. Yet the questions are not absurd. Just by their titles, it would be hard to tell in the case of Main Street and Middletown which was fiction and which was social science. There is so much social science in some contemporary novels, and so much fiction in much of sociology, that it is hard to keep them apart. But there is another kind of science, too—physics and chemistry, for instance—in books like The Andromeda Strain or the novels of Robert Heinlein or Arthur C Clarke. And a book like The Universe and Dr. Einstein, while clearly not fiction, is almost as “readable” as a novel, and probably more readable than some of the novels of, say, William Faulkner.\nAn expository book is one that conveys knowledge primarily, “knowledge” being construed broadly. Any book that consists primarily of opinions, theories, hypotheses, or speculations, for which the claim is made more or less explicitly that they are true in some sense, conveys knowledge in this meaning of knowledge and is an expository work. As with fiction, most people know an expository work when they see it. Here, however, the problem is not to distinguish nonfiction from fiction, but to recognize that there are various kinds of expository books. It is not merely a question of knowing which books are primarily instructive, but also which are instructive in a particular way. The kinds of information or enlightenment that a history and a philosophical work affords are not the same. The problems dealt with by a book on physics and one on morals are not the same, nor are the methods the writers employ in solving such different problems.\nThus this first rule of analytical reading, though it is applicable to all books, applies particularly to nonfictional, expository works. How do you go about following the rule, particularly its last clause?\nAs we have already suggested, you do so by first inspecting the book—giving it an inspectional reading. You read the title, the subtitle, the table of contents, and you at least glance at the preface or introduction by the author and at the index. If the book has a dust jacket, you look at the publisher’s blurb. These are the signal flags the author waves to let you know which way the wind is blowing. It is not his fault if you will not stop, look, and listen.\n◇What You Can Learn from the Title of a Book # The numbers of readers who pay no attention to the signals is larger than you might expect. We have had this experience again and again with students. We have asked them what a book was about. We have asked them, in the most general terms, to tell us what sort of book it was. This is a good way, almost an indispensable way, to begin a discussion of a book. Nevertheless, it is often hard to get any kind of answer to the question.\nLet us take a couple of examples of the kind of confusion that can occur. In 1859, Darwin published a very famous book. A century later the entire English-speaking world celebrated the publication of the book. It was discussed endlessly, and its influence was assessed by learned and not-so-learned commentators. The book was about the theory of evolution, and the word “species” was in the title. What was the title?\nProbably you said The Origin of Species, in which case you were correct. But you might not have said that. You might have said that the title was The Origin of the Species. Recently, we asked some twenty-five reasonably well-read persons what the title of Darwin\u0026rsquo;s book was and more than half said The Origin of the Species. The reason for the mistake is obvious; they supposed, never having read the book, that it had something to do with the development of the human species. In fact, it has little or nothing to do with that subject, which Darwin covered in a later book, The Descent of Man. The Origin of Species is about what its title says it is about—namely the proliferation in the natural world of a vast number of species of plants and animals from an originally much smaller number of species, owing mainly to the principle of natural selection. We mention this common error because many think they know the title of the book, although few have actually ever read the title carefully and thought about what it means.\nHere is another example. In this case we will not ask you to remember the title, but to think about what it means. Gibbon wrote a famous, and famously long, book about the Roman Empire. He called it The Decline and Fall of the Roman Empire. Almost everybody who takes up the book recognizes that title; and most people, even without the book in their hand, know the title. Indeed, the phrase “decline and fall” has become proverbial. Nevertheless, when we asked the same twenty-five well-read people why the first chapter is called “The Extent and Military Force of the Empire in the Age of the Antonines,” they had no idea. They did not see that if the book as a whole was titled Decline and Fall, then it might be assumed that the narrative would begin with the high point of the Roman Empire, and continue through to the end. Unconsciously, they had translated “decline and fall” into “rise and fall.” They were puzzled because there was no discussion of the Roman Republic, which ended a century and a half before the Age of the Antonines. If they had read the title carefully they could have assumed that the Age of the Antonines was the high point of the Empire, even if they had not known it before. Reading the title, in other words, could have given them essential information about the book before they started to read it; but they had failed to do that, as most people fail to do even with an unfamiliar book.\nOne reason why titles and prefaces are ignored by many readers is that they do not think it important to classify the book they are reading. They do not follow this first rule of analytical reading. If they tried to follow it, they would be grateful to the author for helping them. Obviously, the author thinks it is important for the reader to know the kind of book he is being given. That is why he goes to the trouble of making it plain in the preface, and usually tries to make his title—or at least his subtitle—descriptive. Thus, Einstein and Inf eld, in their preface to The Evolution of Physics, tell the reader that they expect him to know “that a scientific book, even though popular, must not be read in the same way as a novel.” They also construct an analytical table of contents to advise the reader in advance of the details of their treatment. In any event, the chapter headings listed in the front serve the purpose of amplifying the significance of the main title.\nThe reader who ignores all these things has only himself to blame if he is puzzled by the question. What kind of book is this? He is going to become more perplexed. If he cannot answer that question, and if he never asks it of himself, he is going to be unable to answer a lot of other questions about the book.\nImportant as reading titles is, it is not enough. The clearest titles in the world, the most explicit front matter, will not help you to classify a book unless you have the broad lines of classification already in your mind.\nYou will not know the sense in which Euclid’s Elements of Geometry and William James’ Principles of Psychology are books of the same sort if you do not know that psychology and geometry are both sciences—and, incidentally, if you do not know that “elements” and “principles” mean much the same thing in these two titles (though not in general), nor will you further be able to distinguish them as different unless you know there are different kinds of science. Similarly, in the case of Aristotle’s Politics and Adam Smith’s The Wealth of Nations, you can tell how these books are alike and different only if you know what a practical problem is, and what different kinds of practical problems there are.\nTitles sometimes make the grouping of books easy. Anyone would know that Euclid’s Elements, Descartes’ Geometry, and Hilbert’s Foundations of Geometry are three mathematical books, more or less closely related in subject matter. This is not always the case. It might not be so easy to tell from the titles that Augustine’s The City of God, Hobbes’ Leviathan, and Rousseau’s Social Contract are political treatises, although a careful perusal of their chapter headings would reveal the problems that are common to these three books.\nAgain, however, to group books as being of the same kind is not enough; to follow this first rule of reading you must know what that kind is. The title will not tell you, nor all the rest of the front matter, nor even the whole book itself sometimes, unless you have some categories you can apply to classify books intelligently. In other words, this rule has to be made a little more intelligible if you are to follow it intelligently. It can only be made intelligible by drawing distinctions and thus creating categories that make sense and will stand up to the test of time.\nWe have already discussed a rough classification of books. The main distinction, we said, was between works of fiction, on the one hand, and works conveying knowledge, or expository works, on the other hand. Among expository works, we can further distinguish history from philosophy, and both from science and mathematics.\nNow this is all very well as far as it goes. This is a classification scheme with fairly perspicuous categories, and most people could probably place most books in the right category if they thought about it. But not all books in all categories.\nThe trouble is that as yet we have no principles of classification. We will have more to say about these principles as we proceed in our discussion of the higher levels of reading. For the moment, we want to confine ourselves to one basic distinction, a distinction that applies across the board to all expository works. It is the distinction between theoretical and practical works.\n◇Practical vs. Theoretical Books # Everyone uses the words “theoretical” and “practical,” but not everyone knows what they mean, perhaps least of all the hardheaded practical man who distrusts all theorists, especially if they are in the government. For such persons, “theoretical” means visionary or even mystical; “practical” means something that works, something that has an immediate cash return. There is an element of truth in this. The practical has to do with what works in some way, at once or in the long run. The theoretical concerns something to be seen or understood. If we polish the rough truth that is here being grasped, we come to the distinction between knowledge and action as the two ends a writer may have in mind.\nBut, you may say, in dealing with expository books, are we not dealing with books that convey knowledge? How does action come into it? The answer, of course, is that intelligent action depends on knowledge. Knowledge can be used in many ways, not only for controlling nature and inventing useful machines or instruments but also for directing human conduct and regulating man’s operations in various fields of skill. What we have in mind here is exemplified by the distinction between pure and applied science, or, as it is sometimes very inaccurately expressed, between science and technology.\nSome books and some teachers are interested only in the knowledge itself that they have to communicate. This does not mean that they deny its utility, or that they insist that knowledge is good only for its own sake. They simply limit themselves to one kind of communication or teaching, and leave the other kind to other men. These others have an interest beyond knowledge for its own sake. They are concerned with the problems of human life that knowledge can help to solve. They communicate knowledge, too, but always with a view to and an emphasis upon its application.\nTo make knowledge practical we must convert it into rules of operation. We must pass from knowing what is the case to knowing what to do about it if we wish to get somewhere. This can be summarized in the distinction between knowing that and knowing how. Theoretical books teach you that something is the case. Practical books teach you how to do something you want to do or think you should do.\nThis book is practical, not theoretical. Any guidebook is a practical book. Any book that tells you either what you should do or how to do it is practical. Thus you see that the class of practical books includes all expositions of arts to be learned, all manuals of practice in any field, such as engineering or medicine or cooking, and all treatises that are conveniently classified as moral, such as books on economic, ethical, or political problems. We will later explain why this last group of books, properly called “normative,” constitutes a very special category of practical books.\nProbably no one would question our calling expositions of arts to be learned and manuals or rule books, practical works. But the “practical” man to whom we have referred might object to the notion that a book on ethics, say, or one on economics, was practical. He might say that such a book was not practical because it was not true or would not work.\nIn fact, this is irrelevant to the point, although a book about economics that is not true is a bad book. Strictly speaking, any ethical work teaches us how to live our lives, tells us what we should do and not do, and often informs us of the rewards and punishments attached to doing and not doing it. Thus, whether or not we agree with its conclusions, any such work is practical. (Some modem sociological studies merely report the actual behavior of men, without judging it. These are neither ethical nor practical books. They are theoretical works—works of science.)\nSimilarly with a work on economics. Apart from reportorial, mathematical, or statistical studies of economic behavior, which are theoretical rather than practical, such works usually teach us how to organize our economic life, either as individuals or as societies or states, tell us what we should do and not do, and also inform us of the penalties involved if we do not do what we should. Again, we may disagree, but our disagreement does not make the book unpractical.\nImmanuel Kant wrote two famous philosophical works, one called The Critique of Pure Reason, the other. The Critique of Practical Reason. The first is about what is and how we know it—not how to know it, but how we in fact do know it—as well as about what can and cannot be known. It is a theoretical book par excellence. The Critique of Practical Reason is about how men should conduct themselves and about what constitutes virtuous or right conduct. This book places great emphasis on duty as the basis of all right action, and that emphasis may seem repellent to many modem readers. They may even say it is “impractical” to believe that duty is any longer a useful ethical concept. What they mean, of course, is that Kant is wrong, in their opinion, in his basic approach. But that does not mean that his book is any less a practical work in the sense we are employing here.\nApart from manuals and moral treatises (in the broad sense) one other instance of practical writing should be mentioned. An oration—a political speech or moral exhortation—certainly tries to tell you what you should do or how you should feel about something. Anyone who writes practically about anything not only tries to advise you but also tries to persuade you to follow his advice. Hence there is an element of oratory or exhortation in every moral treatise. It is also present in books that try to teach an art, such as this one. Thus, in addition to trying to teach you to read better, we have tried, and will continue to try, to persuade you to make the effort to do so.\nAlthough every practical book is somewhat oratorical and hortatory, it does not follow that oratory and exhortation are coextensive with the practical. There is a difference between a political harangue and a treatise on politics, between economic propaganda and an analysis of economic problems. The Communist Manifesto is a piece of oratory, but Marx’s Capital is much more than that.\nSometimes you can detect that a book is practical by its title. If the title contains such phrases as “the art of” or “how to,” you can spot it at once. If the title names fields that you know are practical, such as ethics or politics, engineering or business, and in many cases economics, law, or medicine, you can classify the book fairly readily.\nTitles can tell you even more than that. John Locke wrote two books with similar titles: An Essay Concerning Human Understanding and A Treatise Concerning the Origin, Extent, and End of Civil Government. Which of these is theoretical, which practical?\nFrom the titles alone we may conclude that the first is theoretical, because any analysis of understanding would be theoretical, and that the second is practical, because problems of government are themselves practical. But one could go beyond that, employing the techniques of inspectional reading that we have described. Locke wrote an introduction to the book on understanding. There he expressed his intention as being to inquire into the “origin, certainty, and extent of human knowledge.” The phrasing resembles the title of the book on government, but with one important difference. Locke was concerned with the certainty or validity of knowledge in the one case, and with the end or purpose of government in the other. Questions about the validity of something are theoretical, whereas to raise questions about the end of anything, the purpose it serves, is practical.\nIn describing the art of inspectional reading, we noted that you should not ordinarily stop after reading the front matter of a book and perhaps its index. You should read passages in the book that appear to be of a summary nature. You should also read the beginning and end of the book and of its major parts.\nThis becomes necessary when, as is sometimes the case, it is impossible to classify a book from its title and other front matter. In that case, you have to depend on signs to be found in the main body of the text. By paying attention to the words and keeping the basic categories in mind, you should be able to classify a book without reading very far.\nA practical book will soon betray its character by the frequent occurrence of such words as “should” and “ought,” “good” and “bad,” “ends” and “means.” The characteristic statement in a practical book is one that says that something should be done (or made); or that this is the right way of doing (or making) something; or that one thing is better than another as an end to be sought, or a means to be chosen. In contrast, a theoretical book keeps saying “is,” not “should” or “ought.” It tries to show that something is true, that these are the facts; not that things would be better if they were otherwise, and here is the way to make them better.\nBefore turning to theoretical books, let us caution you against supposing that the problem is as simple as telling whether you are drinking coffee or milk. We have merely suggested some signs whereby you can begin to make discriminations. The better you understand everything that is involved in the distinction between the theoretical and the practical, the better you will be able to use the signs.\nFor one thing, you will have to learn to mistrust them. You have to be suspicious in classifying books. We have noted that although economics is primarily and usually a practical matter, there are nevertheless books on economics that are purely theoretical. Similarly, although understanding is primarily and usually a theoretical matter, there are books (most of them are terrible) that purport to teach you “how to think.” You will also find authors who do not know the difference between theory and practice, just as there are novelists who do not know the difference between fiction and sociology. You will find books that are partly of one sort and partly of another, such as Spinoza’s Ethics. It remains, nevertheless, to your advantage as a reader to detect the way an author approaches his problem.\n◇Kinds of Theoretical Books # The traditional subdivision of theoretical books classifies them as history, science, and philosophy. Everybody knows the differences here in a rough way. It is only when you try to refine the obvious, and give the distinctions greater precision, that you get into difficulties. For the moment, let us try to skirt that danger and let rough approximations suffice.\nIn the case of history, the title usually does the trick. If the word “history” does not appear in the title, the rest of the front matter is likely to inform us that this is a book about something that happened in the past—not necessarily in the far past, of course, because it may have happened only yesterday. The essence of history is narration. History is knowledge of particular events or things that not only existed in the past but also underwent a series of changes in the course of time. The historian narrates these happenings and often colors his narrative with comment on, or insight into, the significance of the events.\nHistory is chronotopic. Chronos is the Greek word for time, topos the Greek word for place. History always deals with things that existed or events that occurred on a particular date and in a particular place. The word “chronotopic” can remind you of that.\nScience is not concerned with the past as such. It treats of matters than can happen at any time or place. The scientist seeks laws or generalizations. He wants to find out how things happen for the most part or in every case, not, as the historian does, how some particular things happened at a given time and place in the past.\nThe title of a scientific work is usually less revealing than the title of a history book. The word “science” sometimes appears, but more often the name of the subject matter appears, such as psychology or geology or physics. Then we must know whether that subject matter belongs to the scientist, as geology clearly does, or to the philosopher, as metaphysics clearly does. The trouble comes with the cases that are not so clear, such as physics and psychology, which have been claimed, at various times, by both scientists and philosophers. There is even trouble with the very words “philosophy” and “science,” for they have been variously used. Aristotle called his book on Physics a scientific treatise, although according to current usage we should regard it as philosophical; and Newton titled his great work Mathematical Principles of Natural Philosophy, though for us it is one of the masterpieces of science.\nPhilosophy is like science and unlike history in that it seeks general truths rather than an account of particular events, either in the near or distant past. But the philosopher does not ask the same questions as the scientist, nor does he employ the same kind of method to answer them.\nSince titles and subject-matter names are not likely to help us determine whether a book is philosophical or scientific, how can we tell? There is one criterion that we think always works, although you may have to read a certain amount of the book before you can apply it. If a theoretical book emphasizes things that lie outside the scope of your normal, routine, daily experience, it is a scientific work. If not, it is philosophical.\nThe distinction may be surprising. Let us illustrate it. (Remember that it applies only to books that are either science or philosophy, not to books that are neither.) Galileo’s Two New Sciences requires you to imagine, or to repeat for yourself in a laboratory, certain experiments with inclined planes. Newton’s Opticks refers to experiences in dark rooms with prisms, mirrors, and specially controlled rays of light. The special experience to which the author refers may not have been obtained by him in a laboratory. The facts that Darwin reported in The Origin of Species he observed in the course of many years of work in the field. They are facts that can be and have been rechecked by other observers making a similar effort. But they are not facts that can be checked in terms of the ordinary daily experience of the average man.\nIn contrast, a philosophical book appeals to no facts or observations that lie outside the experience of the ordinary man. A philosopher refers the reader to his own normal and common experience for the verification or support of anything the writer has to say. Thus, Locke’s Essay Concerning Human Understanding is a philosophical work in psychology, whereas many of Freud’s writings are scientific. Locke makes every point in terms of the experience all of us have of our own mental processes. Freud can make many of his points only by reporting what he observed under the clinical conditions of the psychoanalyst’s office.\nWilliam James, another great psychologist, took an interesting middle course. He reports many examples of the special experience that only the careful, trained observer can know about, but he also frequently asks the reader to judge whether what is being said is not true from his own experience. Thus James’ Principles of Psychology is both a scientific and a philosophical work, although it is primarily scientific.\nThe distinction proposed here is popularly recognized when we say that science is experimental or depends upon elaborate observational researches, whereas philosophy is merely armchair thinking. The contrast should not be invidious. There are certain problems, some of them very important, that can be solved in an armchair by a man who knows how to think about them in the light of common, human experience. There are other problems that no amount of the best armchair thinking can solve. What is needed to solve them is investigation of some sort—experiments in the laboratory or research in the field—extending experience beyond the normal, everyday routine. Special experience is required.\nThis does not mean that the philosopher is a pure thinker and the scientist merely an observer. Both have to observe and think, but they think about different sorts of observations. And however they may have arrived at the conclusions that they want to prove, they prove them in different ways, the scientist by pointing to the results of his special experiences, the philosopher by pointing to experiences that are common to all.\nThis difference in method always reveals itself in philosophical and scientific books, and that is how you can tell which sort of book you are reading. If you note the sort of experience that is being referred to as a condition of understanding what is being said, you will know whether the book is scientific or philosophical.\nIt is important to know this because, apart from the different kinds of experiences that they depend on, scientists and philosophers do not think in exactly the same way. Their styles in arguing are different. You must be able to find the terms and propositions—here we are getting a little ahead of ourselves—that constitute these different sorts of argumentation.\nThe same is true of history. Historical statements are different from scientific and philosophical ones. A historian argues differently and interprets facts differently. Furthermore, the typical history book is narrative in form. A narrative is a narrative, whether it be fact or fiction. The historian must write poetically, which means he must obey the rules for telling a good story. Whatever other excellences Locke’s Essay on Human Understanding or Newton’s Principia may have, neither is a good story.\nYou may object that we are making too much of the classification of books, at least before one has read them. Is it really all that important?\nWe may be able to meet the objections by calling your attention to one obvious fact. If you walked into a classroom in which a teacher was lecturing or otherwise instructing students, you could tell very soon whether the class was one in history, science, or philosophy. There would be something in the way the teacher proceeded, the kind of words he used, the type of arguments he employed, the sort of problems he proposed, and the kind of responses he expected from his students, that would give him away as belonging to one department or another. And it would make a difference to you to know this, if you were going to try to listen intelligently to what went on.\nIn short, the methods of teaching different kinds of subject matter are different. Any teacher knows this. Because of the difference in method and subject matter, the philosopher usually finds it easier to teach students who have not been previously taught by his colleagues, whereas the scientist prefers the student whom his colleagues have already prepared. And so forth and so on.\nNow, just as there is a difference in the art of teaching in different fields, so there is a reciprocal difference in the art of being taught. The activity of the student must somehow be responsive to the activity of the instructor. The relation between books and their readers is the same as that between teachers and their students. Hence, as books differ in the kinds of knowledge they have to communicate, they proceed to instruct us differently; and, if we are to follow them, we must learn to read each kind in an appropriate manner.\n★7 X-RAYING A BOOK # Every book has a skeleton hidden between its covers. Your job as an analytical reader is to find it.\nA book comes to you with flesh on its bare bones and clothes over its flesh. It is all dressed up. You do not have to undress it or tear the flesh off its limbs to get at the firm structure that underlies the soft surface. But you must read the book with X-ray eyes, for it is an essential part of your apprehension of any book to grasp its structure.\nRecognition of the need to see the structure of a book leads to the discovery of the second and third rules for reading any book. We say “any book.” These rules apply to poetry as well as to science, and to any kind of expository work. Their application will be different, of course, according to the kind of book they are used on. The unity of a novel is not the same as the unity of a treatise on politics; nor are the parts of the same sort, or ordered in the same way. But every book without exception that is worth reading at all has a unity and an organization of parts. A book that did not would be a mess. It would be relatively unreadable, as bad books actually are.\nWe will state these two rules as simply as possible. Then we will explain and illustrate them.\nThe second rule of analytical reading can be expressed as follows: RULE 2. STATE THE UNITY OF THE WHOLE BOOK IN A SINGLE SENTENCE, OR AT MOST A FEW SENTENCES (A SHORT PARAGRAPH).\nThis means that you must say what the whole book is about as briefly as possible. To say what the whole book is about is not the same as saying what land of book it is. (That was covered by Rule 1.) The word “about” may be misleading here. In one sense, a book is about a certain type of subject matter, which it treats in a certain way. If you know this, you know what kind of book it is. But there is another, more colloquial sense of “about.” We ask a person what he is about, what he is up to. So we can wonder what an author is up to, what he is trying to do. To find out what a book is about in this sense is to discover its theme or main point.\nA book is a work of art. (Again, we want to warn you against too narrow a conception of “art.” We do not mean, or we do not only mean, “fine art” here. A book is the product of someone who has a certain skill in making. He is a maker of books and he has made one here for our benefit.) In proportion as it is good, as a book and as a work of art, it has a more nearly perfect, a more pervasive unity. This is true of music and paintings, of novels and plays; it is no less true of books that convey knowledge.\nBut it is not enough to acknowledge this fact vaguely. You must apprehend the unity with definiteness. There is only one way to know that you have succeeded. You must be able to tell yourself or anybody else what the unity is, and in a few words. (If it requires too many words, you have not seen the unity but a multiplicity.) Do not be satisfied with “feeling the unity” that you cannot express. The reader who says, “I know what it is, but I just can’t say it,” probably does not even fool himself.\nThe third rule can be expressed as follows: RULE 3. SET FORTH THE MAJOR PARTS OF THE BOOK, AND SHOW HOW THESE ARE ORGANIZED INTO A WHOLE, BY BEING ORDERED TO ONE ANOTHER AND TO THE UNITY OF THE WHOLE.\nThe reason for this rule should be obvious. If a work of art were absolutely simple, it would, of course, have no parts. But that is never the case. None of the sensible, physical things man knows is simple in this absolute way, nor is any human production. They are all complex unities. You have not grasped a complex unity if all you know about it is how it is one. You must also know how it is many, not a many that consists of a lot of separate things, but an organized many. If the parts were not organically related, the whole that they composed would not be one. Strictly speaking, there would be no whole at all but merely a collection.\nThere is a difference between a heap of bricks, on the one hand, and the single house they can constitute, on the other. There is a difference between a single house and a collection of houses. A book is like a single house. It is a mansion having many rooms, rooms on different levels, of different sizes and shapes, with different outlooks, with different uses. The rooms are independent, in part. Each has its own structure and interior decoration. But they are not absolutely independent and separate. They are connected by doors and arches, by corridors and stairways, by what architects call a “traffic pattern.” Because they are connected, the partial function that each performs contributes its share to the usefulness of the whole house. Otherwise the house would not be livable.\nThe analogy is almost perfect. A good book, like a good house, is an orderly arrangement of parts. Each major part has a certain amount of independence. As we will see, it may have an interior structure of its own, and it may be decorated in a different way from other parts. But it must also be connected with the other parts—that is, related to them functionally—for otherwise it would not contribute its share to the intelligibility of the whole.\nAs houses are more or less livable, so books are more or less readable. The most readable book is an architectural achievement on the part of the author. The best books are those that have the most intelligible structure. Though they are usually more complex than poorer books, their greater complexity is also a greater simplicity, because their parts are better organized, more unified.\nThat is one of the reasons why the best books are also the most readable. Lesser works are really more bothersome to read. Yet to read them well—that is, as well as they can be read—you must try to find some plan in them. They would have been better books if their authors had themselves seen the plan a little more clearly. But if they hang together at all, if they are a complex unity to any degree and not mere collections, there must be a plan and you must find it.\n◇Of Plots and Plans: Stating the Unity of a Book # Let us return now to the second rule, which requires you to state the unity of a book. A few illustrations of the rule in operation may guide you in putting it into practice.\nLet us begin with a famous case. You probably read Homer’s Odyssey in school. If not, you must know the story of Odysseus, or Ulysses, as the Romans call him, the man who took ten years to return from the siege of Troy only to find his faithful wife Penelope herself besieged by suitors. It is an elaborate story as Homer tells it, full of exciting adventures on land and sea, replete with episodes of all sorts and many complications of plot. But it also has a single unity of action, a main thread of plot that ties everything together.\nAristotle, in his Poetics, insists that this is the mark of every good story, novel, or play. To support his point, he shows how the unity of the Odyssey can be summarized in a few sentences.\nA certain man is absent from home for many years; he is jealously watched by Poseidon, and left desolate. Meanwhile his home is in a wretched plight; suitors are wasting his substance and plotting against his son. At length, tempest-tossed, he himself arrives; he makes certain persons acquainted with him; he attacks the suitors with his own hand, and is himself preserved while he destroys them.\n“This,” says Aristotle, “is the essence of the plot; the rest is episode.”\nAfter you know the plot in this way, and through it the unity of the whole narrative, you can put the parts into their proper places. You might find it a good exercise to try this with some novels you have read. Try it on some good ones, such as Fielding’s Tom Jones or Dostoevsky’s Crime and Punishment or Joyce’s modem Ulysses. The plot of Tom Jones, for instance, can be reduced to the familiar formula: Boy meets girl, boy loses girl, boy gets girl. That, indeed, is the plot of every romance. To recognize this is to learn what it means to say that there are only a small number of plots in the world. The difference between good and bad stories having the same essential plot lies in what the author does with it, how he dresses up the bare bones.\nYou do not always have to find out the unity of a book all by yourself. The author often helps you. Sometimes, the title is all you have to read. In the eighteenth century, writers had the habit of composing elaborate titles that told the reader what the whole book was about. Here is a title by Jeremy Collier, an English divine who attacked what he considered to be the obscenity—we would say pornography, perhaps—of Restoration drama much more learnedly than is customary nowadays: A Short View of the Immorality and Profaneness of the English Stage, together with the Sense of Antiquity upon this Argument. You can guess from this that Collier recites many flagrant instances of the abuse of morals and that he supports his protest by quoting texts from those ancients who argued, as Plato did, that the stage corrupts youth, or, as the early Church fathers did, that plays are seductions of the flesh and the devil.\nSometimes the author tells you the unity of his plan in his preface. In this respect, expository books differ radically from fiction. A scientific or philosophical writer has no reason to keep you in suspense. In fact, the less suspense he keeps you in, the more likely you are to sustain the effort of reading him through. Like a newspaper article, an expository book may summarize itself in its first paragraph.\n","date":"2 June 2025","externalUrl":null,"permalink":"/posts/reading-1-how-to-read-a-book/","section":"Blog","summary":"First published in 1940 and immediately a bestseller, this book was revised and expanded in 1972. Its enduring relevance makes it well worth recommending even today.","title":"How to Read a Book 1972 Edition","type":"posts"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/literature--arts/","section":"Tags","summary":"","title":"Literature \u0026 Arts","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/management/","section":"Tags","summary":"","title":"Management","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/philosophy/","section":"Tags","summary":"","title":"Philosophy","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/psychology/","section":"Tags","summary":"","title":"Psychology","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"For ease of reading, the directory of this series of posts is organized as follows:\nHow to Read a Book 1972 Edition BY MORTIMER J. ADLER AND CHARLES VAN DOREN The Wealth of Nations BY ADAM SMITH ","date":"1 June 2025","externalUrl":null,"permalink":"/posts/reading-0-overview/","section":"Blog","summary":"","title":"Book Log Overview","type":"posts"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/economics/","section":"Tags","summary":"","title":"Economics","type":"tags"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/history/","section":"Tags","summary":"","title":"History","type":"tags"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/it/","section":"Tags","summary":"","title":"IT","type":"tags"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/military/","section":"Tags","summary":"","title":"Military","type":"tags"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/politics/","section":"Tags","summary":"","title":"Politics","type":"tags"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/popular-science/","section":"Tags","summary":"","title":"Popular Science","type":"tags"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/series/how-to-master-python/","section":"Series","summary":"","title":"How to Master Python","type":"series"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"Back to the series index\n1. variables ❎ # A container for a value (string, integer, float, boolean)\nA variable behaves as if it was the value it contains\n# Strings first_name = \u0026#34;Bro\u0026#34; food = \u0026#34;pizza\u0026#34; email = \u0026#34;Bro123@gmail.com\u0026#34; print(f\u0026#34;Hello {first_name}\u0026#34;) print(f\u0026#34;You like {food}\u0026#34;) print(f\u0026#34;Your email is: {email}\u0026#34;) # Integers age = 25 quantity = 3 num_of_students =30 print(f\u0026#34;You are {age} years old\u0026#34;) print(f\u0026#34;You are buying {quantity} items\u0026#34;) print(f\u0026#34;You class has {num_of_students} students\u0026#34;) # Float price = 10.99 gpa = 3.2 distance = 5.5 print(f\u0026#34;The price is ${price}\u0026#34;) print(f\u0026#34;Your gpa is: {gpa}\u0026#34;) print(f\u0026#34;You ran {distance}km\u0026#34;) # Boolean is_student = False for_sale = False is_online = True if is_online: print(\u0026#34;You are online\u0026#34;) else: print(\u0026#34;You are offline\u0026#34;) Variable assignments\nuser_name = \u0026#34;Yuuniji\u0026#34; year = 2025 pi = 3.14 is_admin = True print(f\u0026#34;User Name: {user_name}\u0026#34;) print(f\u0026#34;Current Year: {year}\u0026#34;) # Round to two decimal places print(f\u0026#34;Pi: {pi:.2f}\u0026#34;) # Convert boolean to \u0026#39;Yes\u0026#39; or \u0026#39;No\u0026#39; print(f\u0026#34;Admin Status: {\u0026#39;Yes\u0026#39; if is_admin else \u0026#39;No\u0026#39;}\u0026#34;) 2. type casting 💱 # Typecasting = the process of converting a variable from one data type to another\nstr(), int(), float(), bool()\nname = \u0026#34;Yuuniji\u0026#34; age = 25 gpa = 3.2 is_student = True # print(type(name)) gpa = int(gpa) # 3 age = float(age) # 25.0 age = str(age) age += \u0026#34;1\u0026#34; # \u0026#34;251\u0026#34; name = bool(name) # True 3. user input ⌨️ # A function that prompts the user to enter data\nReturns the entered data as a string\nname = input(\u0026#34;What is your name?: \u0026#34;) age = int(input(\u0026#34;How old are you?: \u0026#34;)) # age = int(age) age = age + 1 print(f\u0026#34;Hello {name}!\u0026#34;) print(\u0026#34;HAPPY BIRTHDAY\u0026#34;) print(f\u0026#34;You are {age} years old\u0026#34;) Exercise 1 Rectangle Area Calc\nlength = float(intput(\u0026#34;Enter the length: \u0026#34;)) width = float(intput(\u0026#34;Enter the width: \u0026#34;)) area = length * width print(f\u0026#34;The area is: {area}cm²\u0026#34;) #Mac superscript 2: Command + Control + Space, In the search bar, type “superscript” or “2”.Or Option + v Exercise 2 Shopping Cart Program\nitem = input(\u0026#34;What item would you like to buy?: \u0026#34;) price = float(input(\u0026#34;What is the price?: \u0026#34;)) quantity = int(input(\u0026#34;How many would you like?: \u0026#34;)) total = price * quantity print(f\u0026#34;You have bought {quantity} x {item}/s\u0026#34;) print(f\u0026#34;Your total is: ${total}\u0026#34;) 4. ⭐ madlibs game # word game where you create a story\nby filling in blanks with random words\nadjective1 = input(\u0026#34;Enter an adjective (description): \u0026#34;) noun1 = input(\u0026#34;Enter a noun (person, place, thing): \u0026#34;) adjective2 = input(\u0026#34;Enter an adjective (description): \u0026#34;) verb1 = input(\u0026#34;Enter a verb ending with \u0026#39;ing\u0026#39;\u0026#34;) adjective3 = input(\u0026#34;Enter an adjective (description): \u0026#34;) print(f\u0026#34;Today I went to a {adjective1} zoo.\u0026#34;) print(f\u0026#34;In an exhibit, I saw a {noun1}\u0026#34;) print(f\u0026#34;{noun1} was {adjective2} and {verb1}\u0026#34;) print(f\u0026#34;I was {adjective3}!\u0026#34;) 5. arithmetic operators \u0026amp; math functions 📐 # friends = 10 friends = friends + 1 friends += 1 friends = friends - 2 friends -= 2 friends = friends * 3 friends *= 3 friends = friends / 2 friends /= 2 friends = friends ** 2 friends **= 2 remainder = friends % 3 x = 3.14 y = 4 z = 5 result = round(x) # 3 result = abs(y) # 4 result = pow(4, 3) # 4*4*4=64 result = max(x, y, z) # 5 result = min(x, y, z) # 3.14 import math x = 9 y = 9.1 z = 9.9 print(math.pi) # 3.141592653589793 print(math.e) # 2.718281828459045 result = math.sqrt(x) # 3.0 result = math.ceil(y) # 10 result = math.floor(z) # 9 # C = 2πr import math radius = float(input(\u0026#39;Enter the radius of a circle: \u0026#39;)) # 10.5 circumference = 2 * math.pi *radius print(f\u0026#34;The circumference is: {round(circumference, 2)}cm\u0026#34;) # 65.97 # A = πr² import math radius = float(input(\u0026#39;Enter the radius of a circle: \u0026#39;)) # 10.5 area = math.pi * pow(radius, 2) print(f\u0026#34;The area of the circle is: {round(area, 2)}cm²\u0026#34;) # 346.36 # c = √(a²+b²) import math a = float(input(\u0026#34;Enter side A: \u0026#34;)) # 3 b = float(input(\u0026#34;Enter side B: \u0026#34;)) # 4 c = math.sqrt(pow(a, 2) + pow(b, 2)) print(f\u0026#34;Side C = {c}\u0026#34;) # 5.0 6. if statements 🤔 # Do some code only IF some condition is True\nElse do something else\nage = int(input(\u0026#34;Enter your age: \u0026#34;)) if age \u0026gt;= 100: print(\u0026#34;You are too old to sign up\u0026#34;) elif age \u0026gt;= 18: print(\u0026#34;You are now signed up!\u0026#34;) elif age \u0026lt; 0: print(\u0026#34;You haven\u0026#39;t been born yet!\u0026#34;) else: print(\u0026#34;You must be 18+ to sign up\u0026#34;) resopnse = input(\u0026#34;Would you like food? (Y/N): \u0026#34;) if resopnse == \u0026#34;Y\u0026#34;: print(\u0026#34;Have some food!\u0026#34;) else: print(\u0026#34;No food for you!\u0026#34;) name = inptut(\u0026#34;Enter your name: \u0026#34;) if name === \u0026#34;\u0026#34;: print(\u0026#34;You did not type in your name!\u0026#34;) else: print(f\u0026#34;Hello {name}\u0026#34;) for_sale = True if for_sale: print(\u0026#34;This item is for sale\u0026#34;) else: print(\u0026#34;This item is NOT for sale\u0026#34;) 7. ⭐ calculator program 🧮 # # + = addition # - = subtraction # * = multiplication # / = division operator = input(\u0026#34;Enter an operator (+ - * /)\u0026#34;) num1 = float(input(\u0026#34;Enter the 1st number: \u0026#34;)) num2 = float(input(\u0026#34;Enter the 2nd number: \u0026#34;)) if operator == \u0026#34;+\u0026#34;: result =num1 + num2 print(round(result, 3)) elif operator == \u0026#34;-\u0026#34;: result =num1 - num2 print(round(result, 3)) elif operator == \u0026#34;*\u0026#34;: result =num1 * num2 print(round(result, 3)) elif operator == \u0026#34;/\u0026#34;: result =num1 / num2 print(round(result, 3)) else: print(f\u0026#34;{operator} is not a valid operator\u0026#34;) 8. ⭐ weight conversion program 🏋️ # weight = float(input(\u0026#34;Enter your weight\u0026#34;)) unit = input(\u0026#34;Kilograms or Pounds? (K or L): \u0026#34;) if unit == \u0026#34;K\u0026#34;: weight = weight * 2.205 unit = \u0026#34;Lbs.\u0026#34; print(f\u0026#34;Your weight is: {round(weight, 1)} {unit}\u0026#34;) elif unit == \u0026#34;L\u0026#34;: weight = weight / 2.205 unit = \u0026#34;Kgs.\u0026#34; print(f\u0026#34;Your weight is: {round(weight, 1)} {unit}\u0026#34;) else: print(f\u0026#34;{unit} was not valid\u0026#34;) 9. ⭐ temperature conversion program 🌡️ # # (°C x 9/5) + 32 = °F # (°F - 32) x 5/9 = °C # °(Option + Shift + 8) unit = input(\u0026#34;Is this temperature in Celsius or Fahrenheit (C/F): \u0026#34;) temp = float(input(\u0026#34;Enter the temperature: \u0026#34;)) if unit == \u0026#34;C\u0026#34;: temp = round((9 * temp) / 5 + 32, 1) print(f\u0026#34;The temperature in Fahrenheit is: {temp}°F\u0026#34;) elif unit == \u0026#34;F\u0026#34;: temp = round((temp - 32) * 5 / 9, 1) print(f\u0026#34;The temperature in Celsius is: {temp}°C\u0026#34;) else: print(f\u0026#34;{unit} is an invalid unit of measurement\u0026#34;) 10. logical operators 🌦️ # evaluate multiple conditions (or, and, not)\nor = at least one condition must be True\nand = both conditions must be True\nnot = inverts the condition (not False, not True)\ntemp = 25 is_raining = True if temp \u0026gt; 35 or temp \u0026lt; 0 or is_raining: print(\u0026#34;The outdoor event is cancelled\u0026#34;) else: print(\u0026#34;The outdoor event is still scheduled\u0026#34;) temp = 25 is_sunny = True if temp \u0026gt;= 28 and is_sunny: print(\u0026#34;It is HOT outside 🥵\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif temp \u0026lt;= 0 and is_sunny: print(\u0026#34;It is COLD outside 🥶\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif 28 \u0026gt; temp \u0026gt; 0 and is_sunny: print(\u0026#34;It is WARM outside 🙂\u0026#34;) print(\u0026#34;It is SUNNY 🌞\u0026#34;) elif temp \u0026gt;= 28 and not is_sunny: print(\u0026#34;It is HOT outside 🥵\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) elif temp \u0026lt;= 0 and not is_sunny: print(\u0026#34;It is COLD outside 🥶\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) elif 28 \u0026gt; temp \u0026gt; 0 and not is_sunny: print(\u0026#34;It is WARM outside 🙂\u0026#34;) print(\u0026#34;It is CLOUDY ☁️\u0026#34;) 11. conditional expressions ❓ # A one-line shortcut for the if-else statement (ternary operator)\nPrint or assign one of two values based on a condition\nX if condition else Y\nnum = 5 a = 6 b = 7 age = 13 temperature = 20 user_role = \u0026#34;guest\u0026#34; print(\u0026#34;Positive\u0026#34; if num \u0026gt; 0 else \u0026#34;Negative\u0026#34;) result = \u0026#34;EVEN\u0026#34; if num % 2 == 0 else \u0026#34;ODD\u0026#34; max_num = a if a \u0026gt; b else b min_num = a if a \u0026lt; b else b status = \u0026#34;Adult\u0026#34; if age \u0026gt;= 18 else \u0026#34;Child\u0026#34; weather = \u0026#34;HOT\u0026#34; if temperature \u0026gt; 20 else \u0026#34;COLD\u0026#34; access_level = \u0026#34;Full Access\u0026#34; if user_role == \u0026#34;admin\u0026#34; else \u0026#34;Limited Access\u0026#34; print(access_level) 12. string methods 〰️ # name = input(\u0026#34;Enter your full name: \u0026#34;) result = len(name) # yuunijiy -\u0026gt; 8 result = name.find(\u0026#34;n\u0026#34;) # yuunijiy -\u0026gt; 3 result = name.rfind(\u0026#34;n\u0026#34;) # yuunijiy -\u0026gt; 4 name = name.capitalize() # yuunijiy -\u0026gt; Yuunijiy name = name.upper() # yuunijiy -\u0026gt; YUUNIJIY name = name.lower() # YUUNIJIY -\u0026gt; yuunijiy result = name.isdigit() # yuunijiy,yuu123 -\u0026gt; False; 123 -\u0026gt; True result = name.isalpha() # yuunijiy -\u0026gt; True; yuu niji,yuu123,123 -\u0026gt; False phone_number = input(\u0026#34;Enter your phone #: \u0026#34;) result = phone_number.count(\u0026#34;-\u0026#34;) # 1-234-567-8901 -\u0026gt; 3 phone_number = phone_number.replace(\u0026#34;-\u0026#34;, \u0026#34; \u0026#34;) # 1-234-567-8901 -\u0026gt; 1 234 567 8901 If you want a complete list of all available string methods, use the help function:print(help(str))\nExercise:\n# validate user input exercise # 1. username is no more than 12 characters # 2. username must not contain spaces # 3. username must not contain digits username = input(\u0026#34;Enter a username: \u0026#34;) if len(username) \u0026gt; 12: print(\u0026#34;Your username can\u0026#39;t be more than 12 characters\u0026#34;) elif not username.find(\u0026#34; \u0026#34;) == -1: print(\u0026#34;Your username can\u0026#39;t contain spaces\u0026#34;) elif not username.isalpha(): print(\u0026#34;Your username can\u0026#39;t contain digits\u0026#34;) else: print(f\u0026#34;Welcome {username}\u0026#34;) 13. string indexing ✂️ # accessing elements of a sequence using [] (indexing operator)\n[start : end : step]\ncredit_number = \u0026#34;1234-5678-9012-3456\u0026#34; print(credit_number[0]) # 1 print(credit_number[:4]) # 1234 print(credit_number[5:9]) # 5678 print(credit_number[5:]) # 5678-9012-3456 print(credit_number[-1]) # 6 print(credit_number[-2]) # 5 print(credit_number[::2]) # 13-6891-46 print(credit_number[::3]) # 146-136 credit_number = \u0026#34;1234-5678-9012-3456\u0026#34; last_digits = credit_number[-4:] # 3456 print(f\u0026#34;XXXX-XXXX-XXXX-{last_digits}\u0026#34;) credit_number = \u0026#34;1234-5678-9012-3456\u0026#34; credit_number = credit_number[::-1] print(credit_number) # 6543-2109-8765-4321 14. format specifiers 💬 # {value:flags} format a value based on what\nflags are inserted\n.(number)f = round to that many decimal places (fixed point) :(number) = allocate that many spaces :03 = allocate and zero pad that many spaces :\u0026lt; = left justify :\u0026gt; = right justify :^ = center justify :+ = use a plus sign to indicate positive value := = place sign to leftmost position : = insert a space before positive numbers :, = comma separator price1 = 3.14159 price2 = -987.65 price3 = 12.34 print(f\u0026#34;Price 1 is ${price1:.3f}\u0026#34;) # 3.142 print(f\u0026#34;Price 2 is ${price2:.3f}\u0026#34;) # -987.650 print(f\u0026#34;Price 3 is ${price3:.3f}\u0026#34;) # 12.340 print(f\u0026#34;Price 1 is ${price1:10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:10}\u0026#34;) # Price 1 is $ 3.14159 # Price 2 is $ -987.65 # Price 3 is $ 12.34 print(f\u0026#34;Price 1 is ${price1:010}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:010}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:010}\u0026#34;) # Price 1 is $0003.14159 # Price 2 is $-000987.65 # Price 3 is $0000012.34 print(f\u0026#34;Price 1 is ${price1:\u0026lt;10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:\u0026lt;10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:\u0026lt;10}\u0026#34;) # Price 1 is $3.14159 | # Price 2 is $-987.65 | # Price 3 is $12.34 | print(f\u0026#34;Price 1 is ${price1:+}\u0026#34;) # +3.14159 print(f\u0026#34;Price 2 is ${price2:+}\u0026#34;) # -987.65 print(f\u0026#34;Price 3 is ${price3:+}\u0026#34;) # +12.34 print(f\u0026#34;Price 1 is ${price1:10}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:10}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:10}\u0026#34;) # Price 1 is $ 3.14159 # Price 2 is $-987.65 # Price 3 is $ 12.34 price1 = 3000.14159 price2 = -9870.65 price3 = 1200.34 print(f\u0026#34;Price 1 is ${price1:,}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:,}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:,}\u0026#34;) # Price 1 is $3,000.14159 # Price 2 is $-9,870.65 # Price 3 is $1,200.34 print(f\u0026#34;Price 1 is ${price1:+,.2f}\u0026#34;) print(f\u0026#34;Price 2 is ${price2:+,.2f}\u0026#34;) print(f\u0026#34;Price 3 is ${price3:+,.2f}\u0026#34;) # Price 1 is $+3,000.14 # Price 2 is $-9,870.65 # Price 3 is $+1,200.34 15. while loops ♾️ # execute some code WHILE some condition remains true\nage = int(input(\u0026#34;Enter your age: \u0026#34;)) while age \u0026lt; 0: print(\u0026#34;Age can\u0026#39;t be negative\u0026#34;) age = int(input(\u0026#34;Enter your age: \u0026#34;)) print(f\u0026#34;You are {age} years old\u0026#34;) food = input(\u0026#34;Enter a food you like (q to quit): \u0026#34;) while not food == \u0026#34;q\u0026#34;: print(f\u0026#34;You like {food}\u0026#34;) food = input(\u0026#34;Enter another food you like (q to quit): \u0026#34;) print(\u0026#34;bye\u0026#34;) num = int(input(\u0026#34;Enter a # between 1 - 10: \u0026#34;)) while num \u0026lt; 1 or num \u0026gt; 10: print(f\u0026#34;{num} is not valid\u0026#34;) num = int(input(\u0026#34;Enter a # between 1 - 10: \u0026#34;)) print(f\u0026#34;Your number is {num}\u0026#34;) 16. ⭐ compound interest calculator 💵 # # A = P (1 + r/n)ᵗ # A = final amount # P = initial principal balance # r = interest rate # t = number of time periods elapsed principle = 0 rate = 0 time = 0 while principle \u0026lt;= 0: principle = float(input(\u0026#34;Enter the principle aount: \u0026#34;)) if principle \u0026lt;= 0: print(\u0026#34;Principle can\u0026#39;t be less than or equal to zero\u0026#34;) while rate \u0026lt;= 0: rate = float(input(\u0026#34;Enter the interest rate: \u0026#34;)) if rate \u0026lt;= 0: print(\u0026#34;Interest rate can\u0026#39;t be less than or equal to zero\u0026#34;) while time \u0026lt;= 0: time = int(input(\u0026#34;Enter the time in years: \u0026#34;)) if time \u0026lt;= 0: print(\u0026#34;Time can\u0026#39;t be less than or equal to zero\u0026#34;) print(principle) print(rate) print(time) total = principle * pow((1 + rate / 100), time) print(f\u0026#34;Balance after {time} year/s: ${total:.2f}\u0026#34;) principle = 0 rate = 0 time = 0 while True: principle = float(input(\u0026#34;Enter the principle aount: \u0026#34;)) if principle \u0026lt; 0: print(\u0026#34;Principle can\u0026#39;t be less than zero\u0026#34;) else: break while True: rate = float(input(\u0026#34;Enter the interest rate: \u0026#34;)) if rate \u0026lt; 0: print(\u0026#34;Interest rate can\u0026#39;t be less than zero\u0026#34;) else: break while True: time = int(input(\u0026#34;Enter the time in years: \u0026#34;)) if time \u0026lt; 0: print(\u0026#34;Time can\u0026#39;t be less than zero\u0026#34;) else: break total = principle * pow((1 + rate / 100), time) print(f\u0026#34;Balance after {time} year/s: ${total:.2f}\u0026#34;) 17. for loops 🔁 # execute a block of code a fixed number of times.\nYou can iterate over a range, string, sequence, etc.\nfor x in range(1, 6): print(x) # 1 # 2 # 3 # 4 # 5 for x in reversed(range(1, 6)): print(x) print(\u0026#34;HAPPY NEW YEAR!\u0026#34;) # 1 # 2 # 3 # 4 # 5 # HAPPY NEW YEAR! for x in range(1, 6, 3): print(x) # 1 # 4 credit_card = \u0026#34;12-34\u0026#34; for x in credit_card: print(x) # 1 # 2 # - # 3 # 4 for x in range(1, 6): if x == 3: continue else: print(x) # 1 # 2 # 4 # 5 for x in range(1, 6): if x == 3: break else: print(x) # 1 # 2 18. ⭐ countdown timer program ⌛ # import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3 for x in range(0, my_time): print(x) time.sleep(1) # 0 # 1 # 2 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3 for x in range(my_time, 0, -1): print(x) time.sleep(1) # 3 # 2 # 1 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) import time my_time = int(input(\u0026#34;Enter the time in seconds: \u0026#34;)) # 3605 for x in range(my_time, 0, -1): seconds = x % 60 minutes = int(x / 60) % 60 hours = int(x / 3600) print(f\u0026#34;{hours:02}:{minutes:02}:{seconds:02}\u0026#34;) time.sleep(1) # 01:00:05 # 01:00:04 # 01:00:03 # 01:00:02 # 01:00:01 # 01:00:00 # 00:59:59 # 00:59:58 print(\u0026#34;TIME\u0026#39;S UP!\u0026#34;) 19. nested loops ➿ # A loop within another loop (outer, inner)\nouter loop: inner loop: for x in range(1, 10): print(x, end=\u0026#34;\u0026#34;) # 123456789 for x in range(3): for y in range(1, 10): print(y, end=\u0026#34;\u0026#34;) # 123456789123456789123456789 for x in range(3): for y in range(1, 10): print(y, end=\u0026#34;\u0026#34;) print() # 123456789 # 123456789 # 123456789 rows = int(input(\u0026#34;Enter the # of rows: \u0026#34;)) # 3 columns = int(input(\u0026#34;Enter the # of rows: \u0026#34;)) # 5 symbol = input(\u0026#34;Enter a symbol to use: \u0026#34;) # * for x in range(rows): for y in range(columns): print(symbol, end=\u0026#34;\u0026#34;) print() # ***** # ***** # ***** 20. lists, sets, and tuples 🍎 # collection = single \u0026ldquo;variable\u0026rdquo; used to store multiple values List = [] ordered and changeable. Duplicates OK Set = {} unordered and immutable, but Add/Remove OK. NO duplicates Tuple = () ordered and unchangeable. Duplicates OK. FASTER fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] # print(help(fruits)) print(dir(fruits)) # [\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__iadd__\u0026#39;, \u0026#39;__imul__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__reversed__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;append\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;extend\u0026#39;, \u0026#39;index\u0026#39;, \u0026#39;insert\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;reverse\u0026#39;, \u0026#39;sort\u0026#39;] print(\u0026#34;apple\u0026#34; in fruits) # True print(fruits[0]) # apple print(fruits[0:3]) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;] print(fruits[::2]) # [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;] print(fruits[::-1]) # [\u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.append(\u0026#34;pineapple\u0026#34;) # fruits.remove(\u0026#34;pineapple\u0026#34;) print(fruits) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.insert(0, \u0026#34;pineapple\u0026#34;) print(fruits) # [\u0026#34;pineapple\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.sort() print(fruits) # [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;orange\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.reverse() print(fruits) # [\u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.sort() fruits.reverse() print(fruits) # [\u0026#34;orange\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;apple\u0026#34;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits.clear() print(fruits) # [] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] print(fruits.index(\u0026#34;apple\u0026#34;)) # 0 fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;} print(len(fruits)) # 4 print(dir(fruits)) # [\u0026#39;__and__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__iand__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__ixor__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__or__\u0026#39;, \u0026#39;__rand__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__ror__\u0026#39;, \u0026#39;__rxor__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;__xor__\u0026#39;, \u0026#39;add\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;difference\u0026#39;, \u0026#39;difference_update\u0026#39;, \u0026#39;discard\u0026#39;, \u0026#39;intersection\u0026#39;, \u0026#39;intersection_update\u0026#39;, \u0026#39;isdisjoint\u0026#39;, \u0026#39;issubset\u0026#39;, \u0026#39;issuperset\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;symmetric_difference\u0026#39;, \u0026#39;symmetric_difference_update\u0026#39;, \u0026#39;union\u0026#39;, \u0026#39;update\u0026#39;] print(fruits[0]) # TypeError: \u0026#39;set\u0026#39; object is not subscriptable print(fruits) # {\u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} fruits.pop() # {\u0026#34;orange\u0026#34;, \u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;} # OR {\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} # OR {\u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} # OR ... fruits.clear() # set() fruits = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;) print(dir(fruits)) # [\u0026#39;__add__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__getnewargs__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__mul__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__rmul__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;count\u0026#39;, \u0026#39;index\u0026#39;] print(fruits) # (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;coconut\u0026#34;) 21. ⭐ shopping cart program 🛒 # foods = [] prices = [] total = 0 while True: food = input(\u0026#34;Enter a food to buy (q to quit): \u0026#34;) if food.lower() == \u0026#34;q: break else: price = float(input(f\u0026#34;Enter the price of a {food}: $\u0026#34;)) foods.append(food) prices.append(price) print(\u0026#34;----- YOUR CART -----\u0026#34;) for food in foods: print(food, end=\u0026#34; \u0026#34;) for price in prices: total += price print() print(f\u0026#34;Your total is: ${total}\u0026#34;) 22. 2D collections ⬜ # fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] vegetables = [\u0026#34;celery\u0026#34;, \u0026#34;carrots\u0026#34;, \u0026#34;potatoes\u0026#34;] meats = [\u0026#34;chicken\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;turkey\u0026#34;] groceries = [fruits, vegetables, meats] print(groceries[0]) # [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] print(groceries[0][3]) # coconut print(groceries[2][3]) # IndexError: list index out of range groceries = [[\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;], [\u0026#34;celery\u0026#34;, \u0026#34;carrots\u0026#34;, \u0026#34;potatoes\u0026#34;], [\u0026#34;chicken\u0026#34;, \u0026#34;fish\u0026#34;, \u0026#34;turkey\u0026#34;]] for collection in groceries: for food in collection: print(food, end=\u0026#34; \u0026#34;) print() # apple orange banana coconut # celery carrots potatoes # chicken fish turkey num_pad = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\u0026#34;*\u0026#34;, 0, \u0026#34;#\u0026#34;)) for row in num_pad: for num in row: print(num, end=\u0026#34; \u0026#34;) print() # 1 2 3 # 4 5 6 # 7 8 9 # * 0 # 23. ⭐ quiz game 💯 # question = (\u0026#34;How many elements are in the periodic table?: \u0026#34;, \u0026#34;Which animal lays the largest eggs?: \u0026#34;, \u0026#34;What is the most abundant gas in Earth\u0026#39;s atmosphere?: \u0026#34;, \u0026#34;How many bones are in the human body?: \u0026#34;, \u0026#34;Which planet in the solar system is the hottest?: \u0026#34;) options = ((\u0026#34;A. 116\u0026#34;, \u0026#34;B. 117\u0026#34;, \u0026#34;C. 118\u0026#34;, \u0026#34;D. 119\u0026#34;), (\u0026#34;A. Whale\u0026#34;, \u0026#34;B. Crocodile\u0026#34;, \u0026#34;C. Elephant\u0026#34;, \u0026#34;D. Ostrich\u0026#34;), (\u0026#34;A. Nitrogen\u0026#34;, \u0026#34;B. Oxygen\u0026#34;, \u0026#34;C. Carbon-Dioxide\u0026#34;, \u0026#34;D. Hydrogen\u0026#34;), (\u0026#34;A. 206\u0026#34;, \u0026#34;B. 207\u0026#34;, \u0026#34;C. 208\u0026#34;, \u0026#34;D. 209\u0026#34;), (\u0026#34;A. Mercury\u0026#34;, \u0026#34;B. Venus\u0026#34;, \u0026#34;C. Earth\u0026#34;, \u0026#34;D. Mars\u0026#34;)) answers = (\u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34; ) guesses = [] score = 0 question_num = 0 for question in questions: print(\u0026#34;-----------------------\u0026#34;) print(question) for option in options[question_num]: print(option) guess = input(\u0026#34;Enter (A, B, C, D): \u0026#34;).upper() guesses.append(guess) if guess == answers[question_num]: score += 1 print(\u0026#34;CORRECT!\u0026#34;) else: print(\u0026#34;INCORRECT!\u0026#34;) print(f\u0026#34;{answers[question_num]} is the correct answer\u0026#34;) question_num += 1 print(\u0026#34;-----------------------\u0026#34;) print(\u0026#34; RESULTS \u0026#34;) print(\u0026#34;-----------------------\u0026#34;) print(\u0026#34;answers: \u0026#34;, end=\u0026#34;\u0026#34;) for answer in answers: print(answer, end=\u0026#34; \u0026#34;) print() print(\u0026#34;guesses: \u0026#34;, end=\u0026#34;\u0026#34;) for guesse in guesses: print(guesse, end=\u0026#34; \u0026#34;) print() score = int(score / len(questions) * 100) print(f\u0026#34;Your score is: {score}%\u0026#34;) 24. dictionaries 📙 # a collection of {key:value} pairs ordered and changeable. No duplicates\ncapitals = {\u0026#34;USA\u0026#34;: \u0026#34;Washington D.C.\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;China\u0026#34;: \u0026#34;Beijing\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;} print(dir(capitals)) # print(help(capitals)) # [\u0026#39;__class__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;fromkeys\u0026#39;, \u0026#39;get\u0026#39;, \u0026#39;items\u0026#39;, \u0026#39;keys\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;popitem\u0026#39;, \u0026#39;setdefault\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;values\u0026#39;] print(capitals.get(\u0026#34;USA\u0026#34;)) # Washington D.C. print(capitals.get(\u0026#34;Japan\u0026#34;)) # None capitals.update({\u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;}) capitals.update({\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;}) # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;China\u0026#34;: \u0026#34;Beijing\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;, \u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;} capitals.pop(\u0026#34;China\u0026#34;) # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;, \u0026#34;Germany\u0026#34;: \u0026#34;Berlin\u0026#34;} capitals.popitem() # {\u0026#34;USA\u0026#34;: \u0026#34;Detroit\u0026#34;, \u0026#34;India\u0026#34;: \u0026#34;New Delhi\u0026#34;, \u0026#34;Russia\u0026#34;: \u0026#34;Moscow\u0026#34;} # capitals.clear() # {} keys = capitals.keys() # dict_keys([\u0026#39;USA\u0026#39;, \u0026#39;India\u0026#39;, \u0026#39;Russia\u0026#39;]) for keys in capitals.keys(): print(key) # USA # India # Russia values = capitals.values() # dict_values([\u0026#39;Detroit\u0026#39;, \u0026#39;New Delhi\u0026#39;, \u0026#39;Moscow\u0026#39;]) for value in capitals.values(): print(value) # Detroit # New Delhi # Moscow items = capitals.items() print(items) # dict_items([(\u0026#39;USA\u0026#39;, \u0026#39;Detroit\u0026#39;), (\u0026#39;India\u0026#39;, \u0026#39;New Delhi\u0026#39;), (\u0026#39;Russia\u0026#39;, \u0026#39;Moscow\u0026#39;)]) for key, value in capitals.items(): print(f\u0026#34;{key}: {value}\u0026#34;) # USA: Detroit # India: New Delhi # Russia: Moscow 25. ⭐ concession stand program 🍿 # menu = {\u0026#34;pizza\u0026#34;: 3.00, \u0026#34;nachos\u0026#34;: 4.50, \u0026#34;popcorn\u0026#34;: 6.00, \u0026#34;fries\u0026#34;: 2.50, \u0026#34;chips\u0026#34;: 1.00, \u0026#34;pretzel\u0026#34;: 3.50, \u0026#34;soda\u0026#34;: 3.00, \u0026#34;lemonade\u0026#34;: 4.25} cart = [] total = 0 print(\u0026#34;----- MENU -----\u0026#34;) for key, value in menu.items(): print(f\u0026#34;{key:10}: ${value:.2f}\u0026#34;) print(\u0026#34;----------------\u0026#34;) while True: food = input(\u0026#34;Select an item (q to quit): \u0026#34;).lower() if food == \u0026#34;q\u0026#34;: break elif menu.get(food) is not None: cart.append(food) print(\u0026#34;-- YOUR ORDER --\u0026#34;) for food in cart: total += menu.get(food) print(food, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;Total is: ${total:.2f}\u0026#34;) 26. random numbers 🎲 # import random # print(help random) low = 1 high = 100 options = (\u0026#34;rock\u0026#34;, \u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;) cards = [\u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;10\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;A\u0026#34;] # number = random.randint(1, 6) # number = random.randint(low, high) # number = random.random() # option = random.choice(options) # random.shuffle(cards) 27. ⭐ number guessing game 🔢 # import random lowest_num = 1 highest_num = 100 answer = random.randint(lowest_num, highest_num) guesses = 0 is_running = True print(\u0026#34;Python Number Guessing Game\u0026#34;) print(f\u0026#34;Select a number between {lowest_num} and {highest_num}\u0026#34;) while is_running: guess = input(\u0026#34;Enter your guess: \u0026#34;) if guess.isdigit(): guess = int(guess) guesses += 1 if guess \u0026lt; lowest_num or guess \u0026gt; highest_num: print(\u0026#34;That number is out of range\u0026#34;) print(f\u0026#34;Please select a number between {lowest_num} and {highest_num}\u0026#34;) elif guess \u0026lt; answer: print(\u0026#34;Too low! Try again!\u0026#34;) elif guess \u0026gt; answer: print(\u0026#34;Too high! Try again!\u0026#34;) else: print(f\u0026#34;CORRECT! The answer was {answer}\u0026#34;) print(f\u0026#34;Number of guesses: {guesses}\u0026#34;) is_running = False else: print(\u0026#34;Invalid guess\u0026#34;) print(f\u0026#34;Please select a number between {lowest_num} and {highest_num}\u0026#34;) 28. ⭐ rock, paper, scissors game 🗿 # import random options = (\u0026#34;rock\u0026#34;, \u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;) playing = True while playing: player = None computer = random.choice(options) while player not in options: player = input(\u0026#34;Enter a choice (rock, paper, scissors):\u0026#34;) print(f\u0026#34;Player: {player}\u0026#34;) print(f\u0026#34;Computer: {computer}\u0026#34;) if player == computer: print(\u0026#34;It\u0026#39;s a tie!\u0026#34;) elif player == \u0026#34;rock\u0026#34; and computer == \u0026#34;scissors\u0026#34;: print(\u0026#34;You win!\u0026#34;) elif player == \u0026#34;paper\u0026#34; and computer == \u0026#34;rock\u0026#34;: print(\u0026#34;You win!\u0026#34;) elif player == \u0026#34;scissors\u0026#34; and computer == \u0026#34;paper\u0026#34;: print(\u0026#34;You win!\u0026#34;) else: print(\u0026#34;You lose!\u0026#34;) play_again = input(\u0026#34;Play again? (y/n): \u0026#34;).lower() if not play_again == \u0026#34;y\u0026#34;: playing = False print(\u0026#34;Thanks for playing!\u0026#34;) 29. ⭐ dice roller program ⚂ # import random print(\u0026#34;\\u25CF \\u250C \\u2500 \\u2510 \\u2502 \\u2514 \\u2518\u0026#34;) # ● ┌ ─ ┐ │ └ ┘ \u0026#34;┌─────────┐\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;│ │\u0026#34; \u0026#34;└─────────┘\u0026#34; dice_art = { 1: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 2: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 3: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 4: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 5: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), 6: (\u0026#34;┌─────────┐\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;│ ● ● │\u0026#34;, \u0026#34;└─────────┘\u0026#34;), } dice = [] total = 0 num_of_dice = int(input(\u0026#34;How many dice?: \u0026#34;)) for die in range(num_of_dice): dice.append(random.randint(1, 6)) print(dice) # for die in range(num_of_dice): # for line in dice_art.get(dice[die]): # print(line) for line in range(5): # 外部循环，按行打印 for die in dice: # 内部循环，遍历每个骰子的点数 print(dice_art.get(die)[line], end=\u0026#34;\u0026#34;) # 打印当前骰子图案的当前行 print() # 每打印完一行后换行 for die in dice: total += die print(f\u0026#34;total: {total}\u0026#34;) 30. functions 📞 # # function = A block of reusable code # place () after the function name to invoke it def happy_birthday(name, age): print(f\u0026#34;Happy birthday to {name}!\u0026#34;) print(\u0026#34;You are {age}!\u0026#34;) print(\u0026#34;Happy birthday to you!\u0026#34;) print() happy_birthday(\u0026#34;Bro\u0026#34;, 20) happy_birthday(\u0026#34;Steve\u0026#34;, 30) happy_birthday(\u0026#34;Joe\u0026#34;, 40) -------- def display_invoice(username, amount, due_date): print(f\u0026#34;Hello {username}\u0026#34;) print(f\u0026#34;Your bill of ${amount:.2f} is due: {due_date}\u0026#34;) display_invoice(\u0026#34;YuuNiji\u0026#34;, 100.01, \u0026#34;01/02\u0026#34;) -------- # return = statement used to end a function # and send a result back to the caller def add(x, y): z = x + y return z def subtract(x, y): z = x - y return z def multiply(x, y): z = x * y return z def divide(x, y): z = x / y return z print(add(1, 2)) # 3 print(subtract(1, 2)) # -1 print(multiply(1, 2)) # 2 print(divide(1, 2)) # 0.5 -------- def create_name(first, last): first = first.capitalize() last = last.capitalize() return first + \u0026#34; \u0026#34; + last full_name = create_name(\u0026#34;yuuniji\u0026#34;, \u0026#34;code\u0026#34;) print(full_name) # Yuuniji Code 31. default arguments 👍 # # default arguments = A default value for certain parameters # default is used when that argument is omitted # make your functions more flexible, reduces # of arguments # 1. positional, 2. DEFAULT, 3. keyword, 4. arbitrary def net_price(list_price, discount=1, tax=0.05): return list_price * (1 - discount) * (1 + tax) print(net_price(500)) # 525.0 print(net_price(500, 0.1)) # 472.5 print(net_price(500, 0.1, 0)) # 450 -------- import time def count(start, end): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(0, 10) # 0 # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10 # DONE! -------- import time def count(start=0, end): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(10) # SyntaxError: non-default argument follows default argument -------- import time def count(end, start=0): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(10) # 0 # 1 # 2 # 3 # 4 # 5 # 6 # 7 # 8 # 9 # 10 # DONE! -------- import time def count(end, start=0): for x in range(start, end+1): print(x) time.sleep(1) print(\u0026#34;DONE!\u0026#34;) count(30, 15) # 15 # 16 # 17 # 18 # 19 # 20 # 21 # 22 # 23 # 24 # 25 # 26 # 27 # 28 # 29 # 30 # DONE! 32. keyword arguments 🗝️ # # keyword arguments = an argument preceded by an identifier # helps with readability # order of arguments doesn\u0026#39;t matter # 1. positional 2. default 3. KEYWORD 4. arbitrary def hello(greeting, title, first, last): print(f\u0026#34;{greeting} {title}{first} {last}\u0026#34;) hello(\u0026#34;Hello\u0026#34;, \u0026#34;Mr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;) # Hello Mr.Spongebob Squarepants hello(\u0026#34;Hello\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;Mr.\u0026#34;) # Hello SpongebobSquarepants Mr. hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, first=\u0026#34;Spongebob\u0026#34;, last=\u0026#34;Squarepants\u0026#34;) # Hello Mr.Spongebob Squarepants hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;Squarepants\u0026#34;, first=\u0026#34;Spongebob\u0026#34;) # Hello Mr.Spongebob Squarepants hello(title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;Squarepants\u0026#34;, first=\u0026#34;Spongebob\u0026#34;, \u0026#34;Hello\u0026#34;) # SyntaxError: positional argument follows keyword argument hello(\u0026#34;Hello\u0026#34;, \u0026#34;Mr.\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;James\u0026#34;) # Hello Mr.John James hello(\u0026#34;Hello\u0026#34;, title=\u0026#34;Mr.\u0026#34;, last=\u0026#34;John\u0026#34;, first=\u0026#34;James\u0026#34;) # Hello Mr.James John -------- for x in range(1, 11): print(x, end=\u0026#34; \u0026#34;) # 1 2 3 4 5 6 7 8 9 10 -------- print(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, sep=\u0026#34;-\u0026#34;) # 1-2-3-4-5 -------- def get_phone(country, area, first, last): return f\u0026#34;{country}-{area}-{first}-{last}\u0026#34; phone_num = get_phone(country=1, area=123, first=456, last=7890) print(phone_num) # 1-123-456-7890 33. *args \u0026amp; **kwargs 📦 # # *args = allows you to pass multiple non-key arguments # **kwargs = allows you to pass multiple keyword-arguments # * unpacking operator # 1. positional 2. default 3. keyword 4. ARBITRARY def add(a, b): return a + b print(add(1, 2)) # 3 print(add(1, 2, 3)) # TypeError: add() takes 2 positional arguments but 3 were given -------- def add(*args): print(type(args)) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; total = 0 for arg in args: total += arg return total print(add(1, 2, 3, 4, 5)) # 15 -------- def display_name(*args): for arg in args: print(arg, end=\u0026#34; \u0026#34;) display_name(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Harold\u0026#34;, \u0026#34;Squarepants\u0026#34;) # Dr. Spongebob Harold Squarepants -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for value in kwargs.values(): print(value) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # 123 Fake St. # Detroit # MI # 54321 -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for key in kwargs.keys(): print(key) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # street # city # state # zip -------- def print_address(**kwargs): print(type(kwargs)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; for key, value in kwargs.items(): print(f\u0026#34;{key}: {value}\u0026#34;) print_address(street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # street: 123 Fake St. # city: Detroit # state: MI # zip: 54321 -------- # def shipping_label(**kwargs, *args): # SyntaxError: invalid syntax def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;III\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants III -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() for value in kwargs.values(): print(value, end=\u0026#34; \u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, \u0026#34;III\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants III # 123 Fake St. 100 Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, apt=\u0026#34;#100\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. #100 # Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. None # Detroit MI 54321 -------- def shipping_label(*args, **kwargs): for arg in args: print(arg, end=\u0026#34; \u0026#34;) print() if \u0026#34;apt\u0026#34; in kwargs: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)} {kwargs.get(\u0026#39;apt\u0026#39;)}\u0026#34;) elif \u0026#34;pobox\u0026#34; in kwargs: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;pobox\u0026#39;)}\u0026#34;) else: print(f\u0026#34;{kwargs.get(\u0026#39;street\u0026#39;)}\u0026#34;) print(f\u0026#34;{kwargs.get(\u0026#39;city\u0026#39;)} {kwargs.get(\u0026#39;state\u0026#39;)}, {kwargs.get(\u0026#39;zip\u0026#39;)}\u0026#34;) shipping_label(\u0026#34;Dr.\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Squarepants\u0026#34;, street=\u0026#34;123 Fake St.\u0026#34;, pobox=\u0026#34;PO box #1001\u0026#34;, city=\u0026#34;Detroit\u0026#34;, state=\u0026#34;MI\u0026#34;, zip=\u0026#34;54321\u0026#34;) # Dr. Spongebob Squarepants # 123 Fake St. # PO box #1001 # Detroit MI 54321 34. iterables 🔂 # # Iterables = An object/collection that can return its elements one at a time, # allowing it to be iterated over in a loop numbers = [1, 2, 3, 4, 5] for number in numbers: print(number) # 1 # 2 # 3 # 4 # 5 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number) # 5 # 4 # 3 # 2 # 1 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34; \u0026#34;) # 5 4 3 2 1 numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34;-\u0026#34;) # 5-4-3-2-1- numbers = [1, 2, 3, 4, 5] for number in reversed(numbers): print(number, end=\u0026#34; - \u0026#34;) # 5 - 4 - 3 - 2 - 1 - numbers = (1, 2, 3, 4, 5) for number in numbers: print(number) # 1 # 2 # 3 # 4 # 5 fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} for fruit in fruits: print(fruit) # apple # orange # banana # coconut fruits = {\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;} for fruit in reversed(fruits): print(fruit) # TypeError: \u0026#39;set\u0026#39; object is not reversible name =\u0026#34;Yuu Niji\u0026#34; for character in name: print(character) # Y # u # u # N # i # j # i name =\u0026#34;Yuu Niji\u0026#34; for character in name: print(character, end=\u0026#34; \u0026#34;) # Y u u N i j i my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key in my_dictionary: print(key) # A # B # C my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for value in my_dictionary.value(): print(value) # 1 # 2 # 3 my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key, value in my_dictionary.items(): print(key, value) # A 1 # B 2 # C 3 my_dictionary = {\u0026#34;A\u0026#34;: 1, \u0026#34;B\u0026#34;: 2, \u0026#34;C\u0026#34;: 3} for key, value in my_dictionary.items(): print(f\u0026#34;{key} = {value}\u0026#34;) # A = 1 # B = 2 # C = 3 35. membership operators 🔎 # # Membership operators = used to test whether a value or variable is found in a sequence # (string, list, tuple, set, or dictionary) # 1. in # 1. not in word = \u0026#34;APPLE\u0026#34; letter = input(\u0026#34;Guess a letter in the secret word: \u0026#34;) if letter in word: print(f\u0026#34;There is a {letter}\u0026#34;) else: print(f\u0026#34;{letter} was not found\u0026#34;) # Guess a letter in the secret word: A # There is a A # Guess a letter in the secret word: Z # Z was not found word = \u0026#34;APPLE\u0026#34; letter = input(\u0026#34;Guess a letter in the secret word: \u0026#34;) if letter not in word: print(f\u0026#34;{letter} was not found\u0026#34;) else: print(f\u0026#34;There is a {letter}\u0026#34;) # Guess a letter in the secret word: E # There is a E # Guess a letter in the secret word: Q # Q was not found students = {\u0026#34;Spongbob\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;Sandy\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student in students: print(f\u0026#34;{student} is a student\u0026#34;) else: print(f\u0026#34;{student} was not found\u0026#34;) # Enter the name of a student: Spongbob # Spongbob is a student # Enter the name of a student: Yuuniji # Yuuniji was not found students = {\u0026#34;Spongbob\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;Sandy\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student not in students: print(f\u0026#34;{student} was not found\u0026#34;) else: print(f\u0026#34;{student} is a student\u0026#34;) # Enter the name of a student: Sandy # Sandy is a student # Enter the name of a student: Github # Github was not found grades = {\u0026#34;Sandy\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;Squidward\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;Spongbob\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;Patrick\u0026#34;: \u0026#34;D\u0026#34;} student = input(\u0026#34;Enter the name of a student: \u0026#34;) if student in grades: print(f\u0026#34;{student}\u0026#39;s grade is {grades[student]}\u0026#34;) else: print(f\u0026#34;{student} was not found\u0026#34;) # Enter the name of a student: Spongbob # Spongbobs grade is C # Enter the name of a student: Sandy # Sandy grade is A # Enter the name of a student: Squidward # Squidward grade is B # Enter the name of a student: Patrick # Patrick grade is D # Enter the name of a student: Yuuniji # Yuuniji was not found email = \u0026#34;yuuniji81@gmail.com\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Valid email email = \u0026#34;yuuniji81gmail.com\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Invalid email email = \u0026#34;yuuniji81@gmailcom\u0026#34; if \u0026#34;@\u0026#34; in email and \u0026#34;.\u0026#34; in email: print(\u0026#34;Valid email\u0026#34;) else: print(\u0026#34;Invalid email\u0026#34;) # Invalid email 36. list comprehensions 📃 # # List comprehension = A concise way to create lists in Python # Compact and easier to read than traditional loops # [expression for value in iterable if condition] doubles = [] for x in range(1, 11): doubles.append(x * 2) print(doubles) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] doubles = [x * 2 for x in range(1, 11)] print(doubles) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] triples = [y * 3 for y in range(1, 11)] print(triples) # [3, 6, 9, 12, 15, 18, 21, 24, 27, 30] squares = [z * z for z in range(1, 11)] print(squares) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruits = [fruit.upper() for fruit in fruits] print(fruits) # [\u0026#39;APPLE\u0026#39;, \u0026#39;ORANGE\u0026#39;, \u0026#39;BANANA\u0026#39;, \u0026#39;COCONUT\u0026#39;] fruits = [fruit.upper() for fruit in [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;]] print(fruits) # [\u0026#39;APPLE\u0026#39;, \u0026#39;ORANGE\u0026#39;, \u0026#39;BANANA\u0026#39;, \u0026#39;COCONUT\u0026#39;] fruits = [\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;] fruit_chars = [fruit[0] for fruit in fruits] print(fruit_chars) # [\u0026#39;a\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] numbers = [1, -2, 3, -4, 5, -6, 8, -7] positive_nums = [num for num in numbers if num \u0026gt;= 0] negative_nums = [num for num in numbers if num \u0026lt; 0] even_nums = [num for num in numbers if num % 2 == 0] odd_nums = [num for num in numbers if num % 2 == 1] print(positive_nums) # [1, 3, 5, 8] print(negative_nums) # [-2, -4, -6, -7] print(even_nums) # [-2, -4, -6, 8] print(odd_nums) # [1, 3, 5, -7] grades = [85, 42, 79, 90, 56, 61, 30] passing_grades = [grade for grade in grades if grade \u0026gt;= 60] print(passing_grades) # [85, 79, 90, 61] 37. match-case statements 📆 # # Match-case statement (switch): An alternative to using many \u0026#39;elif\u0026#39; statements # Execute some code if a value matches a \u0026#39;case\u0026#39; # Benefits: cleaner and syntax is more readable def day_of_week(day): if day == 1: return \u0026#34;It is Sunday\u0026#34; elif day == 2: return \u0026#34;It is Monday\u0026#34; elif day == 3: return \u0026#34;It is Tuesday\u0026#34; elif day == 4: return \u0026#34;It is Wednesday\u0026#34; elif day == 5: return \u0026#34;It is Thursday\u0026#34; elif day == 6: return \u0026#34;It is Friday\u0026#34; elif day == 7: return \u0026#34;It is Saturday\u0026#34; else: return \u0026#34;Not a valid day\u0026#34; print(day_of_week(1)) # It is Sunday def day_of_week(day): match day: case 1: return \u0026#34;It is Sunday\u0026#34; case 2: return \u0026#34;It is Monday\u0026#34; case 3: return \u0026#34;It is Tuesday\u0026#34; case 4: return \u0026#34;It is Wednesday\u0026#34; case 5: return \u0026#34;It is Thursday\u0026#34; case 6: return \u0026#34;It is Friday\u0026#34; case 7: return \u0026#34;It is Saturday\u0026#34; case _: # _ = wild card return \u0026#34;Not a valid day\u0026#34; print(day_of_week(1)) # It is Sunday def is_weekend(day): match day: case \u0026#34;Sunday\u0026#34;: return True case \u0026#34;Monday\u0026#34;: return False case \u0026#34;Tuesday\u0026#34;: return False case \u0026#34;Wednesday\u0026#34;: return False case \u0026#34;Thursday\u0026#34;: return False case \u0026#34;Friday\u0026#34;: return False case \u0026#34;Saturday\u0026#34;: return True case _: # _ = wild card return False print(is_weekend(\u0026#34;Sunday\u0026#34;)) # True def is_weekend(day): match day: case \u0026#34;Saturday\u0026#34; | \u0026#34;Sunday\u0026#34;: # | = or return True case \u0026#34;Monday\u0026#34; | \u0026#34;Tuesday\u0026#34; | \u0026#34;Wednesday\u0026#34; | \u0026#34;Thursday\u0026#34; | \u0026#34;Friday\u0026#34;: return False case _: # _ = wild card return False print(is_weekend(\u0026#34;Sunday\u0026#34;)) # True 38. modules 📨 # # Module = a file containing code you want to include in your program # use \u0026#39;import\u0026#39; to include a module (built-in or your own) # useful to break up a large program reusable separate files # print(help(\u0026#34;modules\u0026#34;)) # print(help(\u0026#34;math\u0026#34;)) import math print(math.pi) # 3.141592653589794 import math as m print(math.pi) # NameError: name \u0026#39;math\u0026#39; is not defined import math as m print(m.pi) # 3.141592653589794 from math import pi print(pi) # 3.141592653589794 from math import e print(e) # 2.718281828459045 from math import e a, b, c, d = 1, 2, 3, 4 print(e ** a) print(e ** b) print(e ** c) print(e ** d) # 2.718281828459045 # 7.3890560989306495 # 20.085536923187664 # 54.5915003314423 from math import e a, b, c, d, e = 1, 2, 3, 4, 5 print(e ** a) print(e ** b) print(e ** c) print(e ** d) print(e ** e) # 5 # 25 # 125 # 625 # 3125 import math a, b, c, d, e = 1, 2, 3, 4, 5 print(math.e ** a) print(math.e ** b) print(math.e ** c) print(math.e ** d) print(math.e ** e) # 2.718281828459045 # 7.3890560989306495 # 20.085536923187664 # 54.5915003314423 # 148.41315910257657 # example.py pi = 3.14159 def square(x): return x ** 2 def cube(x): return x ** 3 def circumference(radius): return 2 * pi * radius def area(radius): return pi * radius ** 2 # main.py import example result = example.pi print(result) # 3.14159 import example result = example.square(3) print(result) # 9 import example result = example.cube(3) print(result) # 27 import example result = example.circumference(3) print(result) # 18.849539999999998 import example result = example.area(3) print(result) # 28.27431 39. scope resolution 🔬 # # variable scope = where a variable is visible and accessible # scope resolution = (LEGB) Local -\u0026gt; Enclosed -\u0026gt; Global -\u0026gt; Built-in def func1(): a = 1 print(a) def func2(): b = 2 print(b) func1() # 1 func2() # 2 def func1(): a = 1 print(b) def func2(): b = 2 print(a) func1() func2() # NameError: name \u0026#39;b\u0026#39; is not defined def happy_birthday(name, age): print(f\u0026#34;Happy birthday dear {name}\u0026#34;) print(f\u0026#34;You are {age} years old\u0026#34;) def main(): name = \u0026#34;Yuuniji\u0026#34; age = 21 happy_birthday(name, age) main() def func1(): x = 1 print(x) def func2(): x = 2 print(x) func1() # 1 func2() # 2 def func1(): x = 1 def func2(): x = 2 print(x) func2() func1() # 2 def func1(): x = 1 def func2(): print(x) func2() func1() # 1 def func1(): print(x) def func2(): print(x) x = 3 func1() # 3 func2() # 3 def func1(): x = 1 print(x) def func2(): x = 2 print(x) x = 3 func1() # 1 func2() # 2 from math import e print(e) # 2.718281828459045 from math import e def func1(): print(e) func1() # 2.718281828459045 from math import e def func1(): print(e) e = 3 func1() # 3 40. if name == \u0026lsquo;main\u0026rsquo;: 📥 # # if __name__ == __main__: (this script can be imported OR run standalone) # Functions and classes in this module can be reused without the main block of code executing # Good practice (code is modular, # helps readability, # leaves no global variables, # avoid unintended execution) # Ex. library = Import library for functionality # When running library directly, display a help page def main(): # Your program goes here if __name__ == \u0026#39;__main__\u0026#39;: main() # script1.py # print(dir()) print(__name__) # __main__ # script1.py from script2 import * # When script2.py is imported by script1.py, it is treated as a module, not the main script. Therefore, Python sets its __name__ to the name of the module, which is \u0026#34;script2\u0026#34; (the name of the file without the .py extension). # The print(__name__) statement in script2.py executes during the import process, printing \u0026#34;script2\u0026#34;. print(__name__) # script2 # __main__ -------- # script2.py print(__name__) # script1.py print(__name__) # script2 # __main__ -------- # script2.py from script1 import * print(__name__) # script1 # __main__ # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # This is script1 # Your favorite food is pizza # Goodbye! -------- # script2.py from script1 import * # # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) -------- # script2.py from script1 import * # This is script1 # Your favorite food is pizza # Goodbye! # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() -------- # script2.py from script1 import * def favorite_drink(drink): print(f\u0026#34;Your favorite drink is {drink}\u0026#34;) print(\u0026#34;This is script2\u0026#34;) favorite_food(\u0026#34;sushi\u0026#34;) favorite_drink(\u0026#34;coffee\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) # This is script2 # Your favorite food is sushi # Your favorite drink is coffee # Goodbye! # script1.py def favorite_food(food): print(f\u0026#34;Your favorite food is {food}\u0026#34;) def main(): print(\u0026#34;This is script1\u0026#34;) favorite_food(\u0026#34;pizza\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() -------- # script2.py from script1 import * def favorite_drink(drink): print(f\u0026#34;Your favorite drink is {drink}\u0026#34;) def main(): print(\u0026#34;This is script2\u0026#34;) favorite_food(\u0026#34;sushi\u0026#34;) favorite_drink(\u0026#34;coffee\u0026#34;) print(\u0026#34;Goodbye!\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # This is script2 # Your favorite food is sushi # Your favorite drink is coffee # Goodbye! 41. ⭐ banking program 💰 # # Python Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw def show_balance(): pass def deposit(): pass def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 4 # Thank you! Have a nice day! def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) else: return amount def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $0.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 100 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $100.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: -420.69 # That\u0026#39;s not a valid amount # TypeError: unsupported operand type(s) for +=: \u0026#39;float\u0026#39; and \u0026#39;NoneType\u0026#39; def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) return 0 else: return amount def withdraw(): pass balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: -420.69 # That\u0026#39;s not a valid amount # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 50.01 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $50.01 def show_balance(): print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) def deposit(): amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) if amount \u0026lt; 0: print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) return 0 else: return amount def withdraw(): amount = input(\u0026#34;Enter amount to be withdrawn: \u0026#34;) if amount \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) return 0 elif amount \u0026lt; 0: print(\u0026#34;Amount must be greater than 0\u0026#34;) return 0 else: return amount balance = 0 is_running = True while is_running: print(\u0026#34;Banking Program\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance() elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: balance -= withdraw() elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $0.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 2 # Enter an amount to be deposited: 100 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $100.00 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 1000000000000000000000 # Insufficient funds # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: -420.69 # Amount must be greater than 0 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 3 # Enter amount to be withdrawn: -49.99 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 1 # Your balance is $50.01 # Banking Program # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # Enter your choice (1-4): 4 # Thank you! Have a nice day! def show_balance(balance): print(\u0026#34;*********************\u0026#34;) print(f\u0026#34;Your balance is ${balance:.2f}\u0026#34;) print(\u0026#34;*********************\u0026#34;) def deposit(): print(\u0026#34;*********************\u0026#34;) amount = float(input(\u0026#34;Enter an amount to be deposited: \u0026#34;)) print(\u0026#34;*********************\u0026#34;) if amount \u0026lt; 0: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;That\u0026#39;s not a valid amount\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 else: return amount def withdraw(balance): print(\u0026#34;*********************\u0026#34;) amount = input(\u0026#34;Enter amount to be withdrawn: \u0026#34;) print(\u0026#34;*********************\u0026#34;) if amount \u0026gt; balance: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Insufficient funds\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 elif amount \u0026lt; 0: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Amount must be greater than 0\u0026#34;) print(\u0026#34;*********************\u0026#34;) return 0 else: return amount def main(): balance = 0 is_running = True while is_running: print(\u0026#34;*********************\u0026#34;) print(\u0026#34; Banking Program \u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;1. Show Balance\u0026#34;) print(\u0026#34;2. Deposit\u0026#34;) print(\u0026#34;3. Withdraw\u0026#34;) print(\u0026#34;4. Exit\u0026#34;) print(\u0026#34;*********************\u0026#34;) choice = input(\u0026#34;Enter your choice (1-4): \u0026#34;) if choice == \u0026#39;1\u0026#39;: show_balance(balance) elif choice == \u0026#39;2\u0026#39;: balance += deposit() elif choice == \u0026#39;3\u0026#39;: balance -= withdraw(balance) elif choice == \u0026#39;4\u0026#39;: is_running = False else: print(\u0026#34;*********************\u0026#34;) print(\u0026#34;That is not valid choice\u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;*********************\u0026#34;) print(\u0026#34;Thank you! Have a nice day!\u0026#34;) print(\u0026#34;*********************\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $0.00 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 2 # ********************* # Enter an amount to be deposited: 100.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $100.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 1000 # ********************* # Insufficient funds # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 3 # Enter amount to be withdrawn: 50 # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 1 # ********************* # Your balance is $50.01 # ********************* # ********************* # Banking Program # ********************* # 1. Show Balance # 2. Deposit # 3. Withdraw # 4. Exit # ********************* # Enter your choice (1-4): 4 # ********************* # Thank you! Have a nice day! # ********************* 42. ⭐ slot machine 🎰 # # Python Slot Machine def spin_row(): pass def print_row(): pass def get_payout(): pass def main(): pass if __name__ == \u0026#39;__main__\u0026#39;: main() def spin_row(): pass def print_row(): pass def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: pizza # Please enter a valid number # Current balance: $100 # Place your bet amount: 10000000000000000 # Insufficient funds # Current balance: $100 # Place your bet amount: 0 # Bet must be greater than 0 # Current balance: $100 # Place your bet amount: 1 # Current balance: $99 # Place your bet amount: 10 # Current balance: $89 # Place your bet amount: 90 # Insufficient funds # Current balance: $89 # Place your bet amount: 89 import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(): pass def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # [\u0026#39;⭐️\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🍋\u0026#39;] # Current balance: $99 # Place your bet amount: 1 # [\u0026#39;🍉\u0026#39;, \u0026#39;🍒\u0026#39;, \u0026#39;⭐️\u0026#39;] # Current balance: $98 # Place your bet amount: 1 # [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍒\u0026#39;] # Current balance: $97 # Place your bet amount: 1 # [\u0026#39;⭐️\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;⭐️\u0026#39;] # Current balance: $96 # Place your bet amount: 1 # [\u0026#39;🍋\u0026#39;, \u0026#39;🍒\u0026#39;, \u0026#39;🍋\u0026#39;] # Current balance: $95 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34; \u0026#34;.join(row)) def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # 🍋 ⭐️ 🔔 # Current balance: $99 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(): pass def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Current balance: $99 # Place your bet amount: 2 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Current balance: $97 # Place your bet amount: 3 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Current balance: $94 # Place your bet amount: 4 # Spinning... # # ************* # 🍉 | 🍉 | 🍉 # ************* # Current balance: $90 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(row, bet): if row[0] == row[1] == row[2]: if row[0] == \u0026#39;🍒\u0026#39;: return bet * 3 elif row[0] == \u0026#39;🍉\u0026#39;: return bet * 4 elif row[0] == \u0026#39;🍋\u0026#39;: return bet * 5 elif row[0] == \u0026#39;🔔\u0026#39;: return bet * 10 elif row[0] == \u0026#39;⭐️\u0026#39;: return bet * 20 return 0 def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) payout = get_payout(row, bet) if payout \u0026gt; 0: print(f\u0026#34;You won ${payout}\u0026#34;) else: print(\u0026#34;Sorry you lost this round\u0026#34;) balance += payout if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Sorry you lost this round # Current balance: $99 # Place your bet amount: 2 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Sorry you lost this round # Current balance: $97 # Place your bet amount: 3 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Sorry you lost this round # Current balance: $94 # Place your bet amount: 1 # Spinning... # # ************* # 🍉 | 🍉 | 🍉 # ************* # You won $4 # Current balance: $93 # Place your bet amount: import random def spin_row(): symbols = [\u0026#39;🍒\u0026#39;, \u0026#39;🍉\u0026#39;, \u0026#39;🍋\u0026#39;, \u0026#39;🔔\u0026#39;, \u0026#39;⭐️\u0026#39;] # results =[] # for symbols in range(3): # results.append(random.choice(symbols)) # return results return [random.choice(symbols) for _ in range(3)] # return [random.choice(symbols) for symbols in range(3)] def print_row(row): print(\u0026#34;*************\u0026#34;) print(\u0026#34; | \u0026#34;.join(row)) print(\u0026#34;*************\u0026#34;) def get_payout(row, bet): if row[0] == row[1] == row[2]: if row[0] == \u0026#39;🍒\u0026#39;: return bet * 3 elif row[0] == \u0026#39;🍉\u0026#39;: return bet * 4 elif row[0] == \u0026#39;🍋\u0026#39;: return bet * 5 elif row[0] == \u0026#39;🔔\u0026#39;: return bet * 10 elif row[0] == \u0026#39;⭐️\u0026#39;: return bet * 20 return 0 def main(): balance = 100 print(\u0026#34;*************************\u0026#34;) print(\u0026#34;Welcome to Python Slots \u0026#34;) print(\u0026#34;Symbols: 🍒 🍉 🍋 🔔 ⭐️\u0026#34;) print(\u0026#34;*************************\u0026#34;) while balance \u0026gt; 0: print(f\u0026#34;Current balance: ${balance}\u0026#34;) bet = input(\u0026#34;Place your bet amount: \u0026#34;) if not bet.isdigit(): print(\u0026#34;Please enter a valid number\u0026#34;) continue bet = int(bet) if bet \u0026gt; balance: print(\u0026#34;Insufficient funds\u0026#34;) continue if bet \u0026lt; 0: print(\u0026#34;Bet must be greater than 0\u0026#34;) continue balance -= bet row = spin_row() print(\u0026#34;Spinning...\\n\u0026#34;) print_row(row) payout = get_payout(row, bet) if payout \u0026gt; 0: print(f\u0026#34;You won ${payout}\u0026#34;) else: print(\u0026#34;Sorry you lost this round\u0026#34;) balance += payout play_again = input(\u0026#34;Do you want to spin again? (Y/N): \u0026#34;).upper() if play_again != \u0026#39;Y\u0026#39;: break print(\u0026#34;*******************************************\u0026#34;) print(f\u0026#34;Game over! Your final balance is ${balance}\u0026#34;) print(\u0026#34;*******************************************\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() # ************************* # Welcome to Python Slots # Symbols: 🍒 🍉 🍋 🔔 ⭐️ # ************************* # Current balance: $100 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🍉 | ⭐️ # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $99 # Place your bet amount: 5 # Spinning... # # ************* # 🍒 | 🍒 | 🔔 # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $94 # Place your bet amount: 90 # Spinning... # # ************* # 🍒 | ⭐️ | ⭐️ # ************* # Sorry you lost this round # Do you want to spin again? (Y/N): y # Current balance: $4 # Place your bet amount: 1 # Spinning... # # ************* # 🔔 | 🔔 | 🔔 # ************* # You won $10 # Do you want to spin again? (Y/N): n # ****************************************** # Game over! Your final balance is $14 # ****************************************** 43. ⭐ encryption program 🔐 # import string # chars = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34; chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters print(chars) # !\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./:;\u0026lt;=\u0026gt;?@[\\]^_`{|}~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) print(chars) # [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39;k\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;T\u0026#39;] import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) print(f\u0026#34;chars: {chars}\u0026#34;) print(f\u0026#34;key : {key}\u0026#34;) # ENCRYPT plain_text = input(\u0026#34;Enter a message to encrypt: \u0026#34;) cipher_text = \u0026#34;\u0026#34; for letter in plain_text: index = chars.index(letter) cipher_text += key[index] print(f\u0026#34;original message : {plain_text}\u0026#34;) print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) # Enter a message to encrypt: I like pizza! # chars: [\u0026#39; \u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;%\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;+\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;.\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;^\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;|\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # key : [\u0026#39;k\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;z\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;j\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;x\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;q\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;v\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;y\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;] # Enter a message to encrypt: I like pizza! # original message : I like pizza! # encrypted message: D Liye piJJa9 import random import string chars = \u0026#34; \u0026#34; + string.punctuation + string.digits + string.ascii_letters chars = list(chars) key = chars.copy() random.shuffle(key) # print(f\u0026#34;chars: {chars}\u0026#34;) # print(f\u0026#34;key : {key}\u0026#34;) # ENCRYPT plain_text = input(\u0026#34;Enter a message to encrypt: \u0026#34;) cipher_text = \u0026#34;\u0026#34; for letter in plain_text: index = chars.index(letter) cipher_text += key[index] print(f\u0026#34;original message : {plain_text}\u0026#34;) print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) # DECRYPT cipher_text = input(\u0026#34;Enter a message to decrypt: \u0026#34;) plain_text = \u0026#34;\u0026#34; for letter in cipher_text: index = key.index(letter) plain_text += chars[index] print(f\u0026#34;encrypted message: {cipher_text}\u0026#34;) print(f\u0026#34;original message : {plain_text}\u0026#34;) # Enter a message to encrypt: I like pizza! # original message : I like pizza! # encrypted message: NkLiyekpiJJa9 # Enter a message to decrypt: NkLiyekpiJJa9 # encrypted message: NkLiyekpiJJa9 # original message : I like pizza! 44. ⭐ hangman game 🕺 # # Hangman in Python import random words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} # print(hangman_art[3]) # (\u0026#39; o \u0026#39;, \u0026#39;/| \u0026#39;, \u0026#39; \u0026#39;) for line in hangman_art[3]: print(line) # o # /| # import random words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} def display_man(wrong_guesses): print(\u0026#34;**********\u0026#34;) for line in hangman_art[wrong_guesses]: print(line) print(\u0026#34;**********\u0026#34;) def display_hint(hint): pass def display_answer(answer): pass def main(): answer = random.choice(words) # print(answer) # apple hint = [\u0026#34;_\u0026#34;] * len(answer) # print(hint) # [\u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;_\u0026#39;] wrong_guesses = 6 guessed_letters = set() is_running = True while is_running: display_man(wrong_guesses) display_hint(hint) guess = input(\u0026#34;Enter a letter: \u0026#34;).lower() if __name__ == \u0026#39;__main__\u0026#39;: main() # ********** # o # /|\\ # / \\ # ********** # Enter a letter: # wordslist.py words = (\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;coconut\u0026#34;, \u0026#34;pineapple\u0026#34;) # main.py from wordslist import words import random # dictionary of key:() hangman_art = {0: (\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 1: (\u0026#34; o \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;), 2: (\u0026#34; o \u0026#34;, \u0026#34; | \u0026#34;, \u0026#34; \u0026#34;), 3: (\u0026#34; o \u0026#34;, \u0026#34;/| \u0026#34;, \u0026#34; \u0026#34;), 4: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34; \u0026#34;), 5: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \u0026#34;), 6: (\u0026#34; o \u0026#34;, \u0026#34;/|\\\\\u0026#34;, \u0026#34;/ \\\\\u0026#34;)} def display_man(wrong_guesses): print(\u0026#34;**********\u0026#34;) for line in hangman_art[wrong_guesses]: print(line) print(\u0026#34;**********\u0026#34;) def display_hint(hint): print(\u0026#34; \u0026#34;.join(hint)) def display_answer(answer): print(\u0026#34; \u0026#34;.join(answer)) def main(): answer = random.choice(words) hint = [\u0026#34;_\u0026#34;] * len(answer) wrong_guesses = 0 guessed_letters = set() is_running = True while is_running: display_man(wrong_guesses) display_hint(hint) guess = input(\u0026#34;Enter a letter: \u0026#34;).lower() if len(guess) != 1 or not guess.isalpha(): print(\u0026#34;Invalid input\u0026#34;) continue if guess in guessed_letters: print(f\u0026#34;{guess} is already guessed\u0026#34;) continue guessed_letters.add(guess) if guess in answer: for i in range(len(answer)): if answer[i] == guess: hint[i] = guess else: wrong_guesses += 1 if \u0026#34;_\u0026#34; not in hint: display_man(wrong_guesses) display_answer(answer) print(\u0026#34;YOU WIN!\u0026#34;) is_running = False elif wrong_guesses \u0026gt;= len(hangman_art) - 1: display_man(wrong_guesses) display_answer(answer) print(\u0026#34;YOU LOSE!\u0026#34;) is_running = False if __name__ == \u0026#39;__main__\u0026#39;: main() # ********** # # # # ********** # _ _ _ _ _ _ _ _ _ # Enter a letter: p # ********** # # # # ********** # p _ _ _ _ p p _ _ # Enter a letter: \u0026amp; # Invalid input # ********** # # # # ********** # p _ _ _ _ p p _ _ # Enter a letter: i # ********** # # # # ********** # p i _ _ _ p p _ _ # Enter a letter: n # ********** # # # # ********** # p i n _ _ p p _ _ # Enter a letter: p # p is already guessed # ********** # # # # ********** # p i n _ _ p p _ _ # Enter a letter: x # ********** # o # # # # ********** # p i n _ _ p p _ _ # Enter a letter: z # ********** # o # | # # ********** # p i n _ _ p p _ _ # Enter a letter: e # ********** # o # | # # ********** # p i n e _ p p _ e # Enter a letter: a # ********** # o # | # # ********** # p i n e a p p _ e # Enter a letter: l # ********** # o # | # # ********** # p i n e a p p l e # YOU WIN! 45. python object oriented programming 🚗 # object = A \u0026ldquo;bundle\u0026rdquo; of related attributes (variables) and methods (functions) Ex. phone, cup, book You need a \u0026ldquo;class\u0026rdquo; to create many objects\nclass = (blueprint) used to design the structure and layout of an object\nclass Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) print(car1) # \u0026lt;__main__.Car object at 0x000001AE490AE610\u0026gt; print(car1.model) # Mustang print(car1.year) # 2024 print(car1.color) # red print(car1.for_sale) # False # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) print(car1.model) # Mustang print(car1.year) # 2024 print(car1.color) # red print(car1.for_sale) # False # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale def drive(self): print(\u0026#34;You drive the car\u0026#34;) def stop(self): print(\u0026#34;You stop the car\u0026#34;) # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) car1.drive() # You drive the car car2.drive() # You drive the car car1.stop() # You stop the car car2.stop() # You stop the car # car.py class Car: def __init__(self, model, year, color, for_sale): self.model = model self.year = year self.color = color self.for_sale = for_sale def drive(self): print(f\u0026#34;You drive the {self.color} {self.model}\u0026#34;) def stop(self): print(f\u0026#34;You stop the {self.color} {self.model}\u0026#34;) def describe(self): print(f\u0026#34;{self.year} {self.color} {self.model}\u0026#34;) # main.py from car import Car car1 = Car(\u0026#34;Mustang\u0026#34;, 2024, \u0026#34;red\u0026#34;, False) car2 = Car(\u0026#34;Corvette\u0026#34;, 2025, \u0026#34;blue\u0026#34;, True) car3 = Car(\u0026#34;Charger\u0026#34;, 2026, \u0026#34;yellow\u0026#34;, True) car1.drive() # You drive the red Mustang car1.stop() # You stop the red Mustang car1.describe() # 2024 red Mustang 46. class variables 🎓 # class variables = Shared among all instances of a class Defined outside the constructor Allow you to share data among all objects created from that class\nclass Car: wheels = 4 # class variables def __init__(self, model, year): self.model = model # instance variable self.year = year # instance variables class Student: class_year = 2024 def __init__(self, name, age): self.name = name self.age = age student1 = Student(\u0026#34;Spongebob\u0026#34;, 30) student2 = Student(\u0026#34;Patrick\u0026#34;, 35) print(student1.name) print(student1.age) # Spongebob # 30 print(student1.class_year) print(student2.class_year) print(Student.class_year) # 2024 # 2024 # 2024 class Student: class_year = 2024 num_students = 0 def __init__(self, name, age): self.name = name self.age = age Student.num_students += 1 student1 = Student(\u0026#34;Spongebob\u0026#34;, 30) student2 = Student(\u0026#34;Patrick\u0026#34;, 35) student3 = Student(\u0026#34;Squidward\u0026#34;, 35) student4 = Student(\u0026#34;Sandy\u0026#34;, 35) print(Student.num_students) # 4 print(f\u0026#34;My graduating class of {Student.class_year} has {Student.num_students} students\u0026#34;) print(student1.name) print(student2.name) print(student3.name) print(student4.name) # My graduating class of 2024 has 4 students # Spongebob # Patrick # Squidward # Sandy 47. inheritance 👨‍👦‍👦 # Inheritance = Allows a class to inherit attributes and methods from another class\nHelps with code reusability and extensibility\nclass Child(Parent)\nclass Sub(Super)\nclass Father: height = 182 color = \u0026#34;pink\u0026#34; class Son(Father): pass class Animal: def __init__(self, name): self.name = name self.is_alive = True def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is asleep\u0026#34;) class Dog(Animal): pass class Cat(Animal): pass class Mouse(Animal): pass dog = Dog(\u0026#34;Scooby\u0026#34;) cat = Cat(\u0026#34;Garfield\u0026#34;) mouse = Mouse(\u0026#34;Mickey\u0026#34;) print(dog.name) print(dog.is_alive) dog.eat() dog.sleep() # Scooby # True # Scooby is eating # Scooby is asleep class Animal: def __init__(self, name): self.name = name self.is_alive = True def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is sleeping\u0026#34;) class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Mouse(Animal): def speak(self): print(\u0026#34;SQUEEK!\u0026#34;) dog = Dog(\u0026#34;Scooby\u0026#34;) cat = Cat(\u0026#34;Garfield\u0026#34;) mouse = Mouse(\u0026#34;Mickey\u0026#34;) dog.speak() # WOOF! 48. multiple inheritance 🐟 # multiple inheritance = inherit from more than one parent class\nC(A, B)\nmultiple inheritance = inherit from a parent which inherits from another parent\nC(B) \u0026lt;- B(A) \u0026lt;- A\nclass Prey: pass class Predator: pass class Rabbit: pass class Hawk: pass class Fish: pass class Prey: def flee(self): print(\u0026#34;This animal is fleeing\u0026#34;) class Predator: def hunt(self): print(\u0026#34;This animal is hunting\u0026#34;) class Rabbit(Prey): pass class Hawk(Predator): pass class Fish(Prey, Predator): pass rabbit = Rabbit() hawk = Hawk() fish = Fish() rabbit.flee() # This animal is fleeing rabbit.hunt() # AttributeError: \u0026#39;Rabbit\u0026#39; object has no attribute \u0026#39;hunt\u0026#39; hawk.hunt() # This animal is hunting hawk.flee() # AttributeError: \u0026#39;Hawk\u0026#39; object has no attribute \u0026#39;flee\u0026#39; fish.flee() # This animal is fleeing fish.hunt() # This animal is hunting class Animal: def __init__(self, name): self.name = name def eat(self): print(f\u0026#34;{self.name} is eating\u0026#34;) def sleep(self): print(f\u0026#34;{self.name} is sleeping\u0026#34;) class Prey(Animal): def flee(self): print(f\u0026#34;{self.name} is fleeing\u0026#34;) class Predator(Animal): def hunt(self): print(f\u0026#34;{self.name} is hunting\u0026#34;) class Rabbit(Prey): pass class Hawk(Predator): pass class Fish(Prey, Predator): pass rabbit = Rabbit(\u0026#34;Bugs\u0026#34;) hawk = Hawk(\u0026#34;Tony\u0026#34;) fish = Fish(\u0026#34;Nemo\u0026#34;) rabbit.eat() # Bugs is eating rabbit.sleep() # Bugs is sleeping rabbit.flee() # Bugs is fleeing hawk.flee() # AttributeError: \u0026#39;Hawk\u0026#39; object has no attribute \u0026#39;flee\u0026#39; hawk.eat() # Tony is eating hawk.hunt() # Tony is hunting fish.eat() fish.sleep() fish.flee() fish.hunt() # Nemo is eating # Nemo is sleeping # Nemo is fleeing # Nemo is hunting 49. super() 🔴 # super() = Function used in a child class to call methods from a parent class (superclass).\nAllows you to extend the functionality of the inherited methods\nclass Super: # 👨🏻 pass class Sub(Super): # 👶🏻 pass class super\nclass super(type, object_or_type=None)\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class.\nThe object_or_type determines the method resolution order to be searched. The search starts from the class right after the type.\nclass Circle: def __init__(self, color, is_filled, radius): self.color = color self.is_filled = is_filled self.radius = radius class Square: def __init__(self, color, is_filled, width): self.color = color self.is_filled = is_filled self.width = width class Triangle: def __init__(self, color, is_filled, width, height): self.color = color self.is_filled = is_filled self.width = width self.height = height class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) print(circle.color) print(circle.is_filled) print(f\u0026#34;{circle.radius}cm\u0026#34;) # red # True # 5cm print(square.color) print(square.is_filled) print(f\u0026#34;{square.width}cm\u0026#34;) # blue # False # 6cm print(triangle.color) print(triangle.is_filled) print(f\u0026#34;{triangle.width}cm\u0026#34;) print(f\u0026#34;{triangle.height}cm\u0026#34;) # yellow # True # 7cm # 8cm class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled def describe(self): print(f\u0026#34;It is {self.color} and {\u0026#39;filled\u0026#39; if self.is_filled else \u0026#39;not filled\u0026#39;}\u0026#34;) class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) circle.describe() # It is red and filled square.describe() # It is blue and not filled triangle.describe() # It is yellow and filled class Shape: def __init__(self, color, is_filled): self.color = color self.is_filled = is_filled def describe(self): print(f\u0026#34;It is {self.color} and {\u0026#39;filled\u0026#39; if self.is_filled else \u0026#39;not filled\u0026#39;}\u0026#34;) class Circle(Shape): def __init__(self, color, is_filled, radius): super().__init__(color, is_filled) self.radius = radius def describe(self): super().describe() print(f\u0026#34;It is a circle with an area of {3.14 * self.radius * self.radius}cm^2\u0026#34;) class Square(Shape): def __init__(self, color, is_filled, width): super().__init__(color, is_filled) self.width = width def describe(self): super().describe() print(f\u0026#34;It is a square with an area of {self.width * self.width}cm^2\u0026#34;) class Triangle(Shape): def __init__(self, color, is_filled, width, height): super().__init__(color, is_filled) self.width = width self.height = height def describe(self): super().describe() print(f\u0026#34;It is a triangle with an area of {self.width * self.height / 2}cm^2\u0026#34;) circle = Circle(color=\u0026#34;red\u0026#34;, is_filled=True, radius=5) square = Square(color=\u0026#34;blue\u0026#34;, is_filled=False, width=6) triangle = Triangle(color=\u0026#34;yellow\u0026#34;, is_filled=True, width=7, height=8) circle.describe() # It is red and filled # It is a circle with an area of 78.5cm^2 square.describe() # It is blue and not filled # It is a square with an area of 36cm^2 triangle.describe() # It is yellow and filled # It is a triangle with an area of 28.0cm^2 50. polymorphism 🎭 # Polymorphism = Greek word that means to \u0026ldquo;have many forms or faces\u0026rdquo;\nPoly = Many\nMorphe = Form\nTWO WAYS TO ACHIEVE POLYMORPHISM\nInheritance = An object could be treated of the same type as a parent class \u0026ldquo;Duck typing\u0026rdquo; = Object must have necessary attributes/methods class Shape: pass class Circle(Shape): pass class Square(Shape): pass class Triangle(Shape): pass circle = Circle() square = Square() triangle = Triangle() shapes = [Circle(), Square(), Triangle()] from abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 shapes = [Circle(4), Square(5), Triangle(6, 7)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # 50.24cm² # 25cm² # 21.0cm² (How to add superscript ²):\nWindows: Alt + 0178\nMac: Control + Command + Space\nfrom abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 class Pizza: def __init__(self, topping, radius): self.topping = topping self.radius = radius shapes = [Circle(4), Square(5), Triangle(6, 7), Pizza(\u0026#34;pepperoni\u0026#34;, 15)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # AttributeError: \u0026#39;Pizza\u0026#39; object has no attribute \u0026#39;area\u0026#39; # 50.24cm² # 25cm² # 21.0cm² from abc import ABC, abstractmethod class Shape: @abstractmethod def area(self): pass class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius ** 2 class Square(Shape): def __init__(self, side): self.side = side def area(self): return self.side ** 2 class Triangle(Shape): def __init__(self, base, height): self.base = base self.height = height def area(self): return self.base * self.height * 0.5 class Pizza(Circle): def __init__(self, topping, radius): super().__init__(radius) self.topping = topping shapes = [Circle(4), Square(5), Triangle(6, 7), Pizza(\u0026#34;pepperoni\u0026#34;, 15)] for shape in shapes: print(f\u0026#34;{shape.area()}cm²\u0026#34;) # 50.24cm² # 25cm² # 21.0cm² # 706.5cm² 51. duck typing 🦆 # \u0026ldquo;Duck typing\u0026rdquo; = Another way to achieve polymorphism besides Inheritance\nObject must have the minimum necessary attributes/methods\n\u0026ldquo;If it looks like a duck and quacks like a duck, it must be a duck.\u0026rdquo;\nclass Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): def horn(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() # AttributeError: \u0026#39;Car\u0026#39; object has no attribute \u0026#39;speak\u0026#39; # WOOF! # MEOW! class Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): def speak(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() print(animal.alive) # AttributeError: \u0026#39;Car\u0026#39; object has no attribute \u0026#39;alive\u0026#39; # WOOF! # True # MEOW! # True # HONK! class Animal: alive = True class Dog(Animal): def speak(self): print(\u0026#34;WOOF!\u0026#34;) class Cat(Animal): def speak(self): print(\u0026#34;MEOW!\u0026#34;) class Car(): alive = False def speak(self): print(\u0026#34;HONK!\u0026#34;) animals = [Dog(), Cat(), Car()] for animal in animals: animal.speak() print(animal.alive) # WOOF! # True # MEOW! # True # HONK! # False 52. static methods ⚡ # Static methods = A method that belong to a class rather than any object from that class (instance)\nUsually used for general utility functions\nInstance methods = Best for operations on instances of the class (objects)\n# INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; Static methods = Best for utility functions that do not need access to class data\n@staticmethod def km_to_miles(kilometers): return kilometers * 0.621371 class Employee: def __init__(self, name, position): self.name = name self.position = position def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; @staticmethod def is_valid_position(): valid_positions = [\u0026#34;Manager\u0026#34;, \u0026#34;Cashier\u0026#34;, \u0026#34;Cook\u0026#34;, \u0026#34;Janitor\u0026#34;] return position in valid_positions print(Employee.is_valid_position(\u0026#34;Cook\u0026#34;)) # True print(Employee.is_valid_position(\u0026#34;Rocket Scientist\u0026#34;)) # False class Employee: def __init__(self, name, position): self.name = name self.position = position def get_info(self): return f\u0026#34;{self.name} = {self.position}\u0026#34; @staticmethod def is_valid_position(): valid_positions = [\u0026#34;Manager\u0026#34;, \u0026#34;Cashier\u0026#34;, \u0026#34;Cook\u0026#34;, \u0026#34;Janitor\u0026#34;] return position in valid_positions employee1 = Employee(\u0026#34;Eugune\u0026#34;, \u0026#34;Manager\u0026#34;) employee2 = Employee(\u0026#34;Squidward\u0026#34;, \u0026#34;Cashier\u0026#34;) employee3 = Employee(\u0026#34;Spongebob\u0026#34;, \u0026#34;Cook\u0026#34;) print(Employee.is_valid_position(\u0026#34;Rocket Scientist\u0026#34;)) # False print(employee1.get_info()) print(employee2.get_info()) print(employee3.get_info()) # Eugune = Manager # Squidward = Cashier # Spongebob = Cook 53. class methods 🏫 # Class methods = Allow operations related to the class itself\nTake (cls) as the first parameter, which represents the class itself.\nInstance methods = Best for operations on instances of the class (objects)\nStatic methods = Best for utility functions that do not need access to class data\nClass methods = Best for class-level data or require access to the class itself\nclass Student: count = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; print(Student.get_count()) # Total # of students: 0 class Student: count = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) student3 = Student(\u0026#34;Sandy\u0026#34;, 4.0) print(Student.get_count()) # Total # of students: 3 class Student: count = 0 total_gpa = 0 def __init__(self, name, gpa): self.name = name self.gpa = gpa Student.count += 1 Student.total_gpa = gpa # INSTANCE METHOD def get_info(self): return f\u0026#34;{self.name} {self.gpa}\u0026#34; @classmethod def get_count(cls): return f\u0026#34;Total # of students: {cls.count}\u0026#34; @classmethod def get_average_gpa(cls): if cls.count == 0: return 0 else: return f\u0026#34;Average gpa: {cls.total_gpa / cls.count.2f}\u0026#34; student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) student3 = Student(\u0026#34;Sandy\u0026#34;, 4.0) print(Student.get_count()) # Total # of students: 3 print(Student.get_average_gpa()) # Average gpa: 3.07 54. magic methods 🌟 # Magic methos = Dunder methods (double underscore) init, str, eq\nThey are automatically called by many of Python\u0026rsquo;s built-in operations.\nThey allow developers to define or customize the behavior of objects\nclass Student: def __init__(self, name, gpa): self.name = name self.gpa = gpa def __str__(self): return f\u0026#34;name: {self.name} gpa: {self.gpa}\u0026#34; def __eq__(self, other): return self.name == other.name def __gt__(self, other): return self.gpa \u0026gt; other.gpa student1 = Student(\u0026#34;Spongebob\u0026#34;, 3.2) student2 = Student(\u0026#34;Patrick\u0026#34;, 2.0) print(student1) print(student1 == student2) print(student1 \u0026gt; student2) # name: Spongebob gpa: 3.2 # False # True class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1) # \u0026lt;__main__.Book object at 0x000001E78F76EE50\u0026gt; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1) # \u0026#39;The Hobbit\u0026#39; by J.R.R. Tolkien print(book3 == book4) # False class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book1) # \u0026#39;The Hobbit\u0026#39; by J.R.R. Tolkien print(book3 == book4) # True print(book2 \u0026lt; book3) # TypeError: \u0026#39;\u0026lt;\u0026#39; not supported between instances of \u0026#39;Book\u0026#39; and \u0026#39;Book\u0026#39; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book2 \u0026lt; book3) # False print(book2 \u0026gt; book3) # True print(book2 + book3) # TypeError: unsupported operand type(s) for +: \u0026#39;Book\u0026#39; and \u0026#39;Book\u0026#39; class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) book4 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 17222) print(book2 + book3) # 395 pages print(\u0026#34;Lion\u0026#34; in book3) # TypeError: argument of type \u0026#39;Book\u0026#39; is not iterable class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(\u0026#34;Lion\u0026#34; in book3) # True print(\u0026#34;Lion\u0026#34; in book1) # False print(\u0026#34;Rowling\u0026#34; in book2) # True print(\u0026#34;Rowling\u0026#34; in book3) # False print(book1[\u0026#39;title\u0026#39;]) # TypeError: \u0026#39;Book\u0026#39; object is not subscriptable class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1[\u0026#39;title\u0026#39;]) # The Hobbit print(book2[\u0026#39;title\u0026#39;]) # Harry Potter and The Philosopher\u0026#39;s Stone print(book3[\u0026#39;title\u0026#39;]) # The Lion, the Witch and the Wardrobe print(book3[\u0026#39;author\u0026#39;]) # None class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title elif key == \u0026#34;author\u0026#34;: return self.author book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book3[\u0026#39;author\u0026#39;]) # C.S. Lewis print(book2[\u0026#39;author\u0026#39;]) # J.K. Rowling print(book1[\u0026#39;author\u0026#39;]) # J.R.R. Tolkien print(book1[\u0026#39;num_pages\u0026#39;]) # None class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __str__(self): return f\u0026#34;\u0026#39;{self.title}\u0026#39; by {self.author}\u0026#34; def __eq__(self, other): return self.title == other.title and self.author == other.author def __lt__(self, other): return self.num_pages \u0026lt; other.num_pages def __gt__(self, other): return self.num_pages \u0026gt; other.num_pages def __add__(self, other): return f\u0026#34;{self.num_pages + other.num_pages} pages\u0026#34; def __contains__(self, keyword): return keyword in self.title or keyword in self.author def __getitem__(self, key): if key == \u0026#34;title\u0026#34;: return self.title elif key == \u0026#34;author\u0026#34;: return self.author elif key == \u0026#34;num_pages\u0026#34;: return self.num_pages else: return f\u0026#34;Key \u0026#39;{key}\u0026#39; was not found\u0026#34; book1 = Book(\u0026#34;The Hobbit\u0026#34;, \u0026#34;J.R.R. Tolkien\u0026#34;, 310) book2 = Book(\u0026#34;Harry Potter and The Philosopher\u0026#39;s Stone\u0026#34;, \u0026#34;J.K. Rowling\u0026#34;, 223) book3 = Book(\u0026#34;The Lion, the Witch and the Wardrobe\u0026#34;, \u0026#34;C.S. Lewis\u0026#34;, 172) print(book1[\u0026#39;num_pages\u0026#39;]) # 310 print(book2[\u0026#39;num_pages\u0026#39;]) # 223 print(book3[\u0026#39;num_pages\u0026#39;]) # 172 print(book3[\u0026#39;audio\u0026#39;]) # Key \u0026#39;audio\u0026#39; was not found 55. @property ⚙️ # property = Decorator used to define a method as a property (it can be accessed like an attribute)\nBenefit: Add additional logic when read, write, or delete attributes\nGives you getter, setter, and deleter method\nclass Rectangle: def __init__(self, width, height): self.width = width self.height = height rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): pass @property def height(self): pass rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; rectangle = Rectangle(3, 4) print(rectangle.width) print(rectangle.height) # 3.0cm # 4.0cm print(rectangle._width) print(rectangle._height) # 3 # 4 class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 0 rectangle.height = -1 print(rectangle.width) print(rectangle.height) # Width must be greater than zero # Height must be greater than zero # 3.0cm # 4.0cm class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 5 rectangle.height = 6 print(rectangle.width) print(rectangle.height) # 5.0cm # 6.0cm class Rectangle: def __init__(self, width, height): self._width = width self._height = height @property def width(self): return f\u0026#34;{self._width:.1f}cm\u0026#34; @property def height(self): return f\u0026#34;{self._height:.1f}cm\u0026#34; @width.setter def width(self, new_width): if new_width \u0026gt; 0: self._width = new_width else: print(\u0026#34;Width must be greater than zero\u0026#34;) @height.setter def height(self, new_height): if new_height \u0026gt; 0: self._height = new_height else: print(\u0026#34;Height must be greater than zero\u0026#34;) @width.deleter def width(self): del self._width print(\u0026#34;Width has been deleted\u0026#34;) @height.deleter def height(self): del self._height print(\u0026#34;Height has been deleted\u0026#34;) rectangle = Rectangle(3, 4) rectangle.width = 5 rectangle.height = 6 del rectangle.width def rectangle.height # Width has been deleted # Height has been deleted 56. decorators 🎊 # Decorator = A function that extends the behavior of another function\nw/o modifying the base function\nPass the base function as an argument to the decorator\n@add_sprinkles\nget_ice_cream(\u0026ldquo;vanilla\u0026rdquo;)\ndef get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): func() # print(\u0026#34;Here is your ice cream 🍨\u0026#34;) return wrapper @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # *You add sprinkles 🎊* # Here is your ice cream 🍨 def add_sprinkles(func): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() @add_sprinkles def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) # *You add sprinkles 🎊* # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper def add_fudge(func): def wrapper(): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func() return wrapper @add_sprinkles @add_fudge def get_ice_cream(): print(\u0026#34;Here is your ice cream 🍨\u0026#34;) get_ice_cream() # *You add sprinkles 🎊* # *You add fudge 🍫* # Here is your ice cream 🍨 def add_sprinkles(func): def wrapper(): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func() return wrapper def add_fudge(func): def wrapper(): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func() return wrapper @add_sprinkles @add_fudge def get_ice_cream(flavo): print(f\u0026#34;Here is your {flavo}ice cream 🍨\u0026#34;) get_ice_cream(\u0026#34;vanilla\u0026#34;) # TypeError: add_sprinkles.\u0026lt;locals\u0026gt;.wrapper() takes 0 positional arguments bet 1 was given def add_sprinkles(func): def wrapper(*args, **kwargs): print(\u0026#34;*You add sprinkles 🎊*\u0026#34;) func(*args, **kwargs) return wrapper def add_fudge(func): def wrapper(*args, **kwargs): print(\u0026#34;*You add fudge 🍫*\u0026#34;) func(*args, **kwargs) return wrapper @add_sprinkles @add_fudge def get_ice_cream(flavo): print(f\u0026#34;Here is your {flavo}ice cream 🍨\u0026#34;) get_ice_cream(\u0026#34;vanilla\u0026#34;) # *You add sprinkles 🎊* # *You add fudge 🍫* # Here is your vanilla ice cream 🍨 57. exception handling 🚦 # exception = An event that interrupts the flow of a program\n(ZeroDivisionError, TypeError, ValueError)\n1.try, 2.except, 3.finally\n1 / 0 # ZeroDivisionError: division by zero 1 + \u0026#34;1\u0026#34; # TypeError: unsupported operand type(s) for +: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; int(\u0026#34;pizza\u0026#34;) # ValueError: invalid literal for int() with base 10: \u0026#39;pizza\u0026#39; try: # Try some code except Exception: # Handle an Exception finally: # Do some clean up number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) # Enter a number: 0 # ZeroDivisionError: division by zero # Enter a number: pizza # ValueError: invalid literal for int() with base 10: \u0026#39;pizza\u0026#39; try: number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) except ZeroDivisionError: print(\u0026#34;You can\u0026#39;t divide by zero IDIOT!\u0026#34;) except ValueError: print(\u0026#34;Enter only numbers please!\u0026#34;) # Enter a number: 0 # You can\u0026#39;t divide by zero IDIOT! # Enter a number: pizza # Enter only numbers please! try: number = int(input(\u0026#34;Enter a number: \u0026#34;)) print(1 / number) except ZeroDivisionError: print(\u0026#34;You can\u0026#39;t divide by zero IDIOT!\u0026#34;) except ValueError: print(\u0026#34;Enter only numbers please!\u0026#34;) except Exception: # Too broad exception clause print(\u0026#34;Something went wrong!\u0026#34;) finally: print(\u0026#34;Do some cleanup here\u0026#34;) # Enter a number: 0 # You can\u0026#39;t divide by zero IDIOT! # Do some cleanup here # Enter a number: 1 # 1.0 # Do some cleanup here There are many different types of exceptions, you can always look under the official python documentation for an extensive list and well everybody that\u0026rsquo;s exception handling in Python.\n58. file detection 🕵️‍♂️ # \u0026lt;!-- test.txt --\u0026gt; like pizza # main.py import os file_path = \u0026#34;test.txt\u0026#34; if os.path.exists(file_path): print(f\u0026#34;The location \u0026#39;{file_path}\u0026#39; exists\u0026#34;) else: print(\u0026#34;That location doesn\u0026#39;t exist\u0026#34;) # The location \u0026#39;test.txt\u0026#39; exists # main.py import os file_path = \u0026#34;test.txt\u0026#34; if os.path.exists(file_path): print(f\u0026#34;The location \u0026#39;{file_path}\u0026#39; exists\u0026#34;) if os.path.isfile(file_path): print(\u0026#34;That is a file\u0026#34;) elif os.path.isdir(file_path): print(\u0026#34;That is a directory\u0026#34;) else: print(\u0026#34;That location doesn\u0026#39;t exist\u0026#34;) # The location \u0026#39;test.txt\u0026#39; exists # That is a file 59. writing files ✍ # Python writing files (.txt, .json, .csv)\ntxt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; with open(file_path, \u0026#34;w\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;x\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # That file already exists! \u0026lt;!-- output.txt --\u0026gt; I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza!I like pizza! \u0026lt;!-- output.txt --\u0026gt; I like pizza!I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! \u0026lt;!-- output.txt --\u0026gt; I like pizza! txt_data = \u0026#34;I like pizza!\u0026#34; file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;a\u0026#34;) as file: file.write(\u0026#34;\\n\u0026#34; + txt_data) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # I like pizza! # I like pizza! employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: file.write(employees) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # TypeError: write() argument must be str, not list employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: for employee in employees: file.write(employee) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # EugeneSquidwardSpongebobPatrick employees = [\u0026#34;Eugene\u0026#34;, \u0026#34;Squidward\u0026#34;, \u0026#34;Spongebob\u0026#34;, \u0026#34;Patrick\u0026#34;] file_path = \u0026#34;output.txt\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: for employee in employees: file.write(employee + \u0026#34;\\n\u0026#34;) print(f\u0026#34;txt file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # txt file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.txt --\u0026gt; # Eugene # Squidward # Spongebob # Patrick import json employee = { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } file_path = \u0026#34;output.json\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: json.dump(employee, file) print(f\u0026#34;json file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # json file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.json --\u0026gt; # {\u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34;} import json employee = { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } file_path = \u0026#34;output.json\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: json.dump(employee, file, indent=4) print(f\u0026#34;json file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # json file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.json --\u0026gt; # { # \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, # \u0026#34;age\u0026#34;: 30, # \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; # } import json import csv employees = [[\u0026#34;Name\u0026#34;, \u0026#34;Age\u0026#34;, \u0026#34;Job\u0026#34;], [\u0026#34;Spongebob\u0026#34;, 30, \u0026#34;Cook\u0026#34;], [\u0026#34;Patrick\u0026#34;, 37, \u0026#34;Unemployed\u0026#34;], [\u0026#34;Sandy\u0026#34;, 27, \u0026#34;Scientist\u0026#34;]] file_path = \u0026#34;output.csv\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;) as file: writer = csv.writer(file) for row in employees: writer.writerow(row) print(f\u0026#34;csv file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # csv file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.csv --\u0026gt; # Name,Age,Job # # Spongebob,30,Cook # # Patrick,37,Unemployed # # Sandy,27,Scientist import json import csv employees = [[\u0026#34;Name\u0026#34;, \u0026#34;Age\u0026#34;, \u0026#34;Job\u0026#34;], [\u0026#34;Spongebob\u0026#34;, 30, \u0026#34;Cook\u0026#34;], [\u0026#34;Patrick\u0026#34;, 37, \u0026#34;Unemployed\u0026#34;], [\u0026#34;Sandy\u0026#34;, 27, \u0026#34;Scientist\u0026#34;]] file_path = \u0026#34;output.csv\u0026#34; try: with open(file_path, \u0026#34;w\u0026#34;, newline=\u0026#34;\u0026#34;) as file: writer = csv.writer(file) for row in employees: writer.writerow(row) print(f\u0026#34;csv file \u0026#39;{file_path}\u0026#39; was created\u0026#34;) except FileExistsError: print(\u0026#34;That file already exists!\u0026#34;) # csv file \u0026#39;output.txt\u0026#39; was created # \u0026lt;!-- output.csv --\u0026gt; # Name,Age,Job # Spongebob,30,Cook # Patrick,37,Unemployed # Sandy,27,Scientist 60. reading files 🔍 # Python reading files (.txt, .json, csv)\n\u0026lt;!-- input.txt --\u0026gt; I like pizza! It\u0026#39;s really good! // input.json { \u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34; } \u0026lt;!-- input.csv --\u0026gt; Name,Age,Job Spongebob,30,Cook Patrick,37,Unemployed Sandy,27,Scientist file_path = \u0026#34;input.txt\u0026#34; with open(file_path, \u0026#34;r\u0026#34;) as file: content = file.read() print(content) # I like pizza! # It\u0026#39;s really good! The with statement is used to wrap the execution of a block with methods defined by a context manager (see section With Statement Context Managers). This allows common try\u0026hellip;except..finally usage patterns to be encapsulated for convenient reuse.\nimport json file_path = \u0026#34;input.json\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = json.load(file) print(content) print(content[\u0026#34;name\u0026#34;]) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # {\u0026#34;name\u0026#34;: \u0026#34;Spongebob\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;job\u0026#34;: \u0026#34;cook\u0026#34;} # Spongebob import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) print(content) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # \u0026lt;_csv.reader object at 0x0000017D81C4EAA0\u0026gt; import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) for line in content: print(line) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # [\u0026#39;Name\u0026#39;, \u0026#39;Age\u0026#39;, \u0026#39;Job\u0026#39;] # [\u0026#39;Spongebob\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;Cook\u0026#39;] # [\u0026#39;Patrick\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;Unemployed\u0026#39;] # [\u0026#39;Sandy\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;Scientist\u0026#39;] import csv file_path = \u0026#34;input.csv\u0026#34; try: with open(file_path, \u0026#34;r\u0026#34;) as file: content = csv.reader(file) for line in content: print(line[0]) except FileNotFoundError: print(\u0026#34;That file was not found\u0026#34;) except PermissionError: print(\u0026#34;You do not have permission to read that file\u0026#34;) # Name # Spongebob # Patrick # Sandy 61. dates \u0026amp; times 📅 # import datetime date = datetime.date(2025, 1, 2) print(date) # 2025-01-02 today = datetime.date.today() print(today) # 2025-05-02 time = datetime.time(12, 30, 0) print(time) # 12:30:00 now = datetime.datetime.now() print(now) # 2025-05-02 09:41:55.409676 now = now.strftime(\u0026#34;%H %M %S\u0026#34;) print(now) # 09 41 55 now = now.strftime(\u0026#34;%H:%M:%S\u0026#34;) print(now) # 09:41:55 now = now.strftime(\u0026#34;%H:%M:%S %m-%d-%Y\u0026#34;) print(now) # 09:41:55 05-02-2025 Directive Meaning Example Notes %a Weekday as locale\u0026rsquo;s abbreviated name. Sun, Mon, \u0026hellip;, Sat (en_US); So, Mo, \u0026hellip;, Sa (de_DE) (1) %A Weekday as locale\u0026rsquo;s full name. Sunday, Monday, \u0026hellip;, Saturday (en_US); Sonntag, Montag, \u0026hellip;, Samstag (de_DE) (1) %w Weekday as a decimal number, where 0 is Sunday and 6 is Saturday. 0, 1, \u0026hellip;, 6 %d Day of the month as a zero-padded decimal number. 01, 02, \u0026hellip;, 31 (9) %b Month as locale\u0026rsquo;s abbreviated name. Jan, Feb, \u0026hellip;, Dec (en_US); Jan, Feb, \u0026hellip;, Dez (de_DE) (1) %B Month as locale\u0026rsquo;s full name. January, February, \u0026hellip;, December (en_US); Januar, Februar, \u0026hellip;, Dezember (de_DE) (1) %m Month as a zero-padded decimal number. 01, 02, \u0026hellip;, 12 (9) %y Year without century as a zero-padded decimal number. 00, 01, \u0026hellip;, 99 (9) %Y Year with century as a decimal number. 0001, 0002, \u0026hellip;, 2013, 2014, \u0026hellip;, 9998, 9999 (2) There are many different format codes you can use with strftime. You can always look under the Python strftime Documentation for a comprehensive list and explanations.\nimport datetime date = datetime.date(2025, 1, 2) today = datetime.date.today() time = datetime.time(12, 30, 0) now = datetime.datetime.now() now = now.strftime(\u0026#34;%H:%M:%S %m-%d-%Y\u0026#34;) target_datetime = datetime.datetime(2030, 1, 2, 12, 12, 30, 1) curren_datetime = datetime.datetime.now() if target_datetime \u0026lt; curren_datetime: print(\u0026#34;Target date has passed\u0026#34;) else: print(\u0026#34;Target date has NOT passed\u0026#34;) # Target date has NOT passed 62. ⭐ alarm clock ⏰ # # Python Alarm Clock import time import datetime import pygame # pip install pygame def set_alarm(alarm_time): # ex. \u0026#34;23:00:00\u0026#34; pass if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # pygame 2.6.0 (SDL 2.28.4, Python 3.12.5) # Hello from the pygame community. https://www.pygame.org/contribute.html 👆\u0026#34;This functionality implementation can be found in the pygame library\u0026#39;s initialization file (/.venv/Lib/site-packages/pygame/init.py lines 338-342).\u0026#34; # Enter the alarm time (HH:MM:SS): 09:00:00 # Alarm set for 09:00:00 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) is_running = False if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 10:00:00 # Alarm set for 10:00:00 # 09:42:16 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 10:00:00 # Alarm set for 10:00:00 # 09:42:16 # 09:42:17 # 09:42:18 # ... # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 # Process finished with exit code 0 # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) pygame.mixer.init() pygame.mixer.music.load(sound_file) pygame.mixer.music.play() is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 # Process finished with exit code 0 Module pygame.mixer: pygame module for loading and playing sounds\n# pygame.mixer def init(frequency: int = 44100, size: int = -16, channels: int = 2, buffer: int = 512, devicename: str | None = None, allowedchanges: int = 5) -\u0026gt; None # Python Alarm Clock import time import datetime import pygame def set_alarm(alarm_time): print(f\u0026#34;Alarm set for {alarm_time}\u0026#34;) sound_file = \u0026#34;my_music.mp3\u0026#34; is_running = True while is_running: curren_datetime = datetime.datetime.now().strftime(\u0026#34;%H:%M:%S\u0026#34;) print(curren_datetime) if curren_datetime == alarm_time: print(\u0026#34;WAKE UP! 🫩\u0026#34;) pygame.mixer.init() pygame.mixer.music.load(sound_file) pygame.mixer.music.play() while pygame.mixer.music.get_busy(): time.sleep(1) is_running = False time.sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: alarm_time = input(\u0026#34;Enter the alarm time (HH:MM:SS): \u0026#34;) set_alarm(alarm_time) # Enter the alarm time (HH:MM:SS): 09:45:00 # Alarm set for 09:45:00 # ... # 09:44:58 # 09:44:59 # 09:45:00 # WAKE UP! 🫩 👆That\u0026rsquo;s how to create an alarm clock in Python.\n63. multithreading 🧵 # multithreading = Used to perform multiple tasks concurrently (multithreading)\nGood for I/O bound tasks like reading files or fetching data from APIs\nthreading.Thread(target=my_function)\nimport threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) walk_dog() take_out_trash() get_mail() # You finish walking the dog # You take out the trash # You get the mail import threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) chore1 = threading.Thread(target=walk_dog) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) # All chores are complete! # You take out the trash # You get the mail # You finish walking the dog import threading import time def walk_dog(): time.sleep(8) print(\u0026#34;You finish walking the dog\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) chore1 = threading.Thread(target=walk_dog) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking the dog # All chores are complete! import threading import time def walk_dog(first): time.sleep(8) print(f\u0026#34;You finish walking {first}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;,)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking Scooby # All chores are complete! import threading import time def walk_dog(first): time.sleep(8) print(f\u0026#34;You finish walking {first}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # TypeError: walk_dog() takes 1 positional argument but 6 were given # You take out the trash # You get the mail # You finish walking Scooby # All chores are complete! import threading import time def walk_dog(first, last): time.sleep(8) print(f\u0026#34;You finish walking {first} {last}\u0026#34;) def take_out_trash(): time.sleep(2) print(\u0026#34;You take out the trash\u0026#34;) def get_mail(): time.sleep(4) print(\u0026#34;You get the mail\u0026#34;) # interpreted as a string enclosed in parentheses chore1 = threading.Thread(target=walk_dog, args=(\u0026#34;Scooby\u0026#34;, \u0026#34;Doo\u0026#34;)) chore1.start() chore2 = threading.Thread(target=take_out_trash) chore2.start() chore3 = threading.Thread(target=get_mail) chore3.start() print(\u0026#34;All chores are complete!\u0026#34;) chore1.join() chore2.join() chore3.join() # You take out the trash # You get the mail # You finish walking Scooby Doo # All chores are complete! 64. request API data ↩️ # PokéAPI\nex. https://pokeapi.co/api/v2/pokemon/pikachu\n# How to connect to an API using Python import requests # pip install requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): pass pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) print(response) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # \u0026lt;Response [200]\u0026gt; HTTP response status codes\nimport requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: print(\u0026#34;Data retrieved!\u0026#34;) else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # Data retrieved! import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: pokemon_data = response.json() print(pokemon_data) else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; get_pokemon_info(pokemon_name) # { # \u0026#34;abilities\u0026#34;: [ # { # \u0026#34;ability\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;static\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/ability/9/\u0026#34; # }, # \u0026#34;is_hidden\u0026#34;: false, # \u0026#34;slot\u0026#34;: 1 # }, # { # \u0026#34;ability\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;lightning-rod\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/ability/31/\u0026#34; # }, # \u0026#34;is_hidden\u0026#34;: true, # \u0026#34;slot\u0026#34;: 3 # } # ], # \u0026#34;base_experience\u0026#34;: 112, # \u0026#34;height\u0026#34;: 4, # \u0026#34;id\u0026#34;: 25, # \u0026#34;name\u0026#34;: \u0026#34;pikachu\u0026#34;, # \u0026#34;types\u0026#34;: [ # { # \u0026#34;slot\u0026#34;: 1, # \u0026#34;type\u0026#34;: { # \u0026#34;name\u0026#34;: \u0026#34;electric\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;https://pokeapi.co/api/v2/type/13/\u0026#34; # } # } # ], # \u0026#34;weight\u0026#34;: 60 # } import requests base_url = \u0026#34;https://pokeapi.co/api/v2/\u0026#34; def get_pokemon_info(name): url = f\u0026#34;{base_url}/pokemon/{name}\u0026#34; response = requests.get(url) if response.status_code == 200: pokemon_data = response.json() return pokemon_data else: print(f\u0026#34;Failed to retrieve data {response.status_code}\u0026#34;) pokemon_name = \u0026#34;pikachu\u0026#34; pokemon_info = get_pokemon_info(pokemon_name) if pokemon_info: print(f\u0026#34;Name: {pokemon_info[\u0026#39;name\u0026#39;].capitalize()}\u0026#34;) print(f\u0026#34;Id: {pokemon_info[\u0026#39;id\u0026#39;]}\u0026#34;) print(f\u0026#34;Height: {pokemon_info[\u0026#39;height\u0026#39;]}\u0026#34;) print(f\u0026#34;Weight: {pokemon_info[\u0026#39;weight\u0026#39;]}\u0026#34;) # Name: Pikachu # Id: 25 # Height: 4 # Weight: 60 65. PyQt5 GUI intro 🖥️ # Graphical User Interface\n# PyQt5 introduction import sys # pip install PyQt5 from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() def main(): pass if __name__ == \u0026#39;__main__\u0026#39;: main() sys — System-specific parameters and functions\nThis module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available.\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() def main(): app = QApplication(sys.argv) window = MainWindow() window.show() if __name__ == \u0026#39;__main__\u0026#39;: main() # # Process finished with exit code 0 sys.argv\nThe list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter, argv[0] is the empty string.\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow from PyQt5.QtGui import QIcon class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setWindowTitle(\u0026#34;My cool first GUI\u0026#34;) self.setGeometry(700, 300, 500, 500) # self.setGeometry(x, y, width, height) self.setWindowIcon(QIcon(\u0026#34;profile_pic.jpg\u0026#34;)) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 66. PyQt5 labels 🏷️ # # PyQt5 QLabels import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) # (window will be a parent widget) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QFont class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) label.setFont(QFont(\u0026#34;Arial\u0026#34;, 40)) label.setGeometry(0, 0, 500, 100) label.setStyleSheet(\u0026#34;color: #1fff5a;\u0026#34; \u0026#34;background-color: #6fdcf7;\u0026#34; \u0026#34;font-weight: bold;\u0026#34; \u0026#34;font-style: italic;\u0026#34; \u0026#34;text-decoration: underline;\u0026#34;) # Google search for \u0026#34;color picker\u0026#34; def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QFont from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(\u0026#34;Hello\u0026#34;, self) label.setFont(QFont(\u0026#34;Arial\u0026#34;, 40)) label.setGeometry(0, 0, 500, 100) label.setStyleSheet(\u0026#34;color: #1fff5a;\u0026#34; \u0026#34;background-color: #6fdcf7;\u0026#34; \u0026#34;font-weight: bold;\u0026#34; \u0026#34;font-style: italic;\u0026#34; \u0026#34;text-decoration: underline;\u0026#34;) # label.setAlignment(Qt.AlignTop) # VERTICALLY TOP # label.setAlignment(Qt.AlignBottom) # VERTICALLY BOTTOM # label.setAlignment(Qt.AlignVCenter) # VERTICALLY CENTER # label.setAlignment(Qt.AlignRight) # HORIZONTALLY RIGHT # label.setAlignment(Qt.AlignHCenter) # HORIZONTALLY CENTER # label.setAlignment(Qt.AlignLeft) # HORIZONTALLY LEFT # label.setAlignment(Qt.AlignHCenter | Qt.AlignTop) # CENTER \u0026amp; TOP # label.setAlignment(Qt.AlignHCenter | Qt.AlignBottom) # CENTER \u0026amp; BOTTOM # label.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter) # CENTER \u0026amp; CENTER label.setAlignment(Qt.AlignCenter) # CENTER \u0026amp; CENTER def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 67. PyQt5 images 📷 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QPixmap class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(self) label.setGeometry(0, 0, 250, 250) # label.setGeometry(x, y, width, height) pixmap = QPixmap(\u0026#34;profile_pic.jpg\u0026#34;) label.setPixmap(pixmap) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel from PyQt5.QtGui import QPixmap class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) label = QLabel(self) label.setGeometry(0, 0, 250, 250) # label.setGeometry(x, y, width, height) pixmap = QPixmap(\u0026#34;profile_pic.jpg\u0026#34;) label.setPixmap(pixmap) label.setScaledContents(True) label.setGeometry((self.width() - label.width()) // 2, (self.height() - label.height()) // 2, label.width(), label.height()) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 68. PyQt5 layout managers 🧲 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() import sys from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout) class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) label1 = QLabel(\u0026#34;#1\u0026#34;, self) label2 = QLabel(\u0026#34;#2\u0026#34;, self) label3 = QLabel(\u0026#34;#3\u0026#34;, self) label4 = QLabel(\u0026#34;#4\u0026#34;, self) label5 = QLabel(\u0026#34;#5\u0026#34;, self) label1.setStyleSheet(\u0026#34;background-color: red;\u0026#34;) label2.setStyleSheet(\u0026#34;background-color: yellow;\u0026#34;) label3.setStyleSheet(\u0026#34;background-color: green;\u0026#34;) label4.setStyleSheet(\u0026#34;background-color: blue;\u0026#34;) label5.setStyleSheet(\u0026#34;background-color: purple;\u0026#34;) # vbox = QVBoxLayout() # vbox.addWidget(label1) # vbox.addWidget(label2) # vbox.addWidget(label3) # vbox.addWidget(label4) # vbox.addWidget(label5) # central_widget.setLayout(vbox) # hbox = QHBoxLayout() # hbox.addWidget(label1) # hbox.addWidget(label2) # hbox.addWidget(label3) # hbox.addWidget(label4) # hbox.addWidget(label5) # central_widget.setLayout(hbox) grid = QGridLayout() grid.addWidget(label1, 0, 0) grid.addWidget(label2, 0, 1) grid.addWidget(label3, 1, 0) grid.addWidget(label4, 1, 1) grid.addWidget(label5, 2, 2) central_widget.setLayout(grid) def main(): app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) if __name__ == \u0026#39;__main__\u0026#39;: main() 69. PyQt5 buttons 🛎️ # import sys from PyQt5.QtWidgets import QMainWindow, QApplication class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.button = QPushButton(\u0026#34;Click me!\u0026#34;, self) self.initUI() def initUI(self): self.button.setGeometry(150, 200, 200, 100) self.button.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.button.clicked.connect(self.on_click) def on_click(self): print(\u0026#34;Button clicked!\u0026#34;) self.button.setText(\u0026#34;Clicked!\u0026#34;) self.button.setDisabled(True) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.button = QPushButton(\u0026#34;Click me!\u0026#34;, self) self.label = QLabel(\u0026#34;Hello\u0026#34;, self) self.initUI() def initUI(self): self.button.setGeometry(150, 200, 200, 100) self.button.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.button.clicked.connect(self.on_click) self.label.setGeometry(150, 300, 200, 100) self.label.setStyleSheet(\u0026#34;font-size: 50px;\u0026#34;) def on_click(self): self.label.setText(\u0026#34;Goodbye\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 70. PyQt5 checkboxes ✅ # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.checkbox = QCheckBox(\u0026#34;Do you like food?\u0026#34;, self) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox from PyQt5.QtCore import Qt class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.checkbox = QCheckBox(\u0026#34;Do you like food?\u0026#34;, self) self.initUI() def initUI(self): self.checkbox.setGeometry(10, 0, 500, 100) self.checkbox.setStyleSheet(\u0026#34;font-size; 30px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34;) self.checkbox.setChecked(False) # checkbox.*signal*.connect(*slot*) self.checkbox.stateChanged.connect(self.checkbox_changed) def checkbox_changed(self, state): # print(state) # 2 # if state == 2: if state == Qt.Checked: print(\u0026#34;You like food\u0026#34;) else: print(\u0026#34;You DO NOT like food\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 71. PyQt5 radio buttons 🔘 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() self.radio4 = QRadioButton(\u0026#34;In-Store\u0026#34;, self) self.radio5 = QRadioButton(\u0026#34;Online\u0026#34;, self) self.button_group1 = QButtonGroup(self) self.button_group2 = QButtonGroup(self) self.initUI() def initUI(self): self.radio1.setGeometry(0, 0, 300, 50) self.radio2.setGeometry(0, 50, 300, 50) self.radio3.setGeometry(0, 100, 300, 50) self.radio4.setGeometry(0, 150, 300, 50) self.radio5.setGeometry(0, 200, 300, 50) self.setStyleSheet(\u0026#34;QRadioButton{\u0026#34; \u0026#34;font-size: 40px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;padding: 10px;\u0026#34; \u0026#34;}\u0026#34;) self.button_group1.addButton(self.radio1) self.button_group1.addButton(self.radio2) self.button_group1.addButton(self.radio3) self.button_group2.addButton(self.radio4) self.button_group2.addButton(self.radio5) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QRadioButton, QButtonGroup class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.radio1 = QRadioButton(\u0026#34;Visa\u0026#34;, self) self.radio2 = QRadioButton(\u0026#34;Mastercard\u0026#34;, self) self.radio3 = QRadioButton(\u0026#34;Gift Card\u0026#34;, self) self.initUI() self.radio4 = QRadioButton(\u0026#34;In-Store\u0026#34;, self) self.radio5 = QRadioButton(\u0026#34;Online\u0026#34;, self) self.button_group1 = QButtonGroup(self) self.button_group2 = QButtonGroup(self) self.initUI() def initUI(self): self.radio1.setGeometry(0, 0, 300, 50) self.radio2.setGeometry(0, 50, 300, 50) self.radio3.setGeometry(0, 100, 300, 50) self.radio4.setGeometry(0, 150, 300, 50) self.radio5.setGeometry(0, 200, 300, 50) self.setStyleSheet(\u0026#34;QRadioButton{\u0026#34; \u0026#34;font-size: 40px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;padding: 10px;\u0026#34; \u0026#34;}\u0026#34;) self.button_group1.addButton(self.radio1) self.button_group1.addButton(self.radio2) self.button_group1.addButton(self.radio3) self.button_group2.addButton(self.radio4) self.button_group2.addButton(self.radio5) self.radio1.toggled.connect(self.radio_button_changed) self.radio2.toggled.connect(self.radio_button_changed) self.radio3.toggled.connect(self.radio_button_changed) self.radio4.toggled.connect(self.radio_button_changed) self.radio5.toggled.connect(self.radio_button_changed) def radio_button_changed(self): radio_button = self.sender() if radio_button.isChecked(): print(f\u0026#34;{radio_button.text()} is selected\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 72. PyQt5 line edits 💬 # import sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLineEdit class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.line_edit = QLineEdit(self) self.initUI() def initUI(self): self.line_edit.setGeometry(10, 10, 200, 40) self.line_edit.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QLineEdit, QPushButton class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.line_edit = QLineEdit(self) self.button = QPushButton(\u0026#34;Submit\u0026#34;, self) self.initUI() def initUI(self): self.line_edit.setGeometry(10, 10, 200, 40) self.button.setGeometry(210, 10, 100, 40) self.line_edit.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) self.button.setStyleSheet(\u0026#34;font-size: 25px;\u0026#34; \u0026#34;font-family: Arial\u0026#34;) self.line_edit.setPlaceholderText(\u0026#34;Enter your name\u0026#34;) self.button.clicked.connect(self.submit) def submit(self): text = self.line_edit.text() print(f\u0026#34;Hello {text}\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 73. PyQt5 CSS styles 🎨 # CSS: Cascading Style Sheets\nimport sys from PyQt5.QtWidgets import QApplication, QMainWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setGeometry(700, 300, 500, 500) self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) # PyQt5 setStyleSheet() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QWidget, QHBoxLayout class MainWindow(QMainWindow): def __init__(self): super().__init__() self.button1 = QPushButton(\u0026#34;#1\u0026#34;) self.button2 = QPushButton(\u0026#34;#2\u0026#34;) self.button3 = QPushButton(\u0026#34;#3\u0026#34;) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) hbox = QHBoxLayout() hbox.addWidget(self.button1) hbox.addWidget(self.button2) hbox.addWidget(self.button3) central_widget.setLayout(hbox) self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton{ font-size: 40px; font-family: Arial; padding: 15px 75px; margin: 25px; border: 3px solid; border-radius: 15px; } \u0026#34;\u0026#34;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) # PyQt5 setStyleSheet() import sys from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QWidget, QHBoxLayout class MainWindow(QMainWindow): def __init__(self): super().__init__() self.button1 = QPushButton(\u0026#34;#1\u0026#34;) self.button2 = QPushButton(\u0026#34;#2\u0026#34;) self.button3 = QPushButton(\u0026#34;#3\u0026#34;) self.initUI() def initUI(self): central_widget = QWidget() self.setCentralWidget(central_widget) hbox = QHBoxLayout() hbox.addWidget(self.button1) hbox.addWidget(self.button2) hbox.addWidget(self.button3) central_widget.setLayout(hbox) self.button1.setObjectName(\u0026#34;button1\u0026#34;) self.button2.setObjectName(\u0026#34;button2\u0026#34;) self.button3.setObjectName(\u0026#34;button3\u0026#34;) # Google search for \u0026#34;color picker\u0026#34; self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton{ font-size: 40px; font-family: Arial; padding: 15px 75px; margin: 25px; border: 3px solid; border-radius: 15px; } QPushButton#button1{ background-color: hsl(0, 100%, 64%); } QPushButton#button2{ background-color: hsl(122, 100%, 64%); } QPushButton#button3{ background-color: hsl(204, 100%, 64%); } QPushButton#button1:hover{ background-color: hsl(0, 100%, 84%); } QPushButton#button2:hover{ background-color: hsl(122, 100%, 84%); } QPushButton#button3:hover{ background-color: hsl(204, 100%, 84%); } \u0026#34;\u0026#34;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_()) 74. ⭐ digital clock program 🕒 # # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.initUI() def initUI(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(\u0026#34;12:00:00\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(\u0026#34;12:00:00\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) # Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;font-family: Arial;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) self.timer.timeout.connect(self.update_time) self.timer.start(1000) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) Google search for \u0026ldquo;ds digital\u0026rdquo;: Download DS-DIGIT.TTF(TrueType Font(.TTF)), move \u0026ldquo;DS-DIGIT.TTF\u0026rdquo; to your project folder\n# Python PyQt5 Digital Clock import sys from PyQt5.QtWidgets import QApplication, QtWidget, QLabel, QVBoxLayout from PyQt5.QtCore import QTimer, QTime, Qt from PyQt5.QtGui import QFont, QFontDatabase class DigitalClock(QtWidgets): def __init__(self): super().__init__() self.time_label = QLabel(self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Digital Clock\u0026#34;) self.setGeometry(600, 400, 300, 100) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) # .AlignCenter is a flag # Google search for \u0026#34;color picker\u0026#34; self.time_label.setStyleSheet(\u0026#34;font-size: 150px;\u0026#34; \u0026#34;color: hsl(111, 100%, 50%);\u0026#34;) self.setStyleSheet(\u0026#34;background-color: black;\u0026#34;) font_id = QFontDatabase.addApplicationFont(\u0026#34;DS-DIGIT.TTF\u0026#34;) font_family = QFontDatabase.applicationFontFamilies(font_id)[0] my_font = QFont(font_family, 150) self.time_label.setFont(my_font) self.timer.timeout.connect(self.update_time) self.timer.start(1000) self.update_time() def update_time(self): current_time = QTime.currentTime().toString(\u0026#34;hh:mm:ss AP\u0026#34;) # (hh mm ss are format specifiers) self.time_label.setText(current_time) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) clock = DigitalClock() clock.show() sys.exit(app.exec_()) 75. ⭐ stopwatch program ⏱ # # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() self.time = QTime(0, 0, 0, 0) self.time_label = QLabel(\u0026#34;00:00:00.00\u0026#34;, self) self.start_button = QPushButton(\u0026#34;Start\u0026#34;, self) self.stop_button = QPushButton(\u0026#34;Stop\u0026#34;, self) self.reset_button = QPushButton(\u0026#34;Reset\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): pass def start(self): pass def stop(self): pass def reset(self): pass def format_time(self, time): pass def update_display(self): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method # Python PyQt5 Stopwatch import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QHBoxLayout) from PyQt5.QtCore import QTimer, QTime, Qt class Stopwatch(QWidget): def __init__(self): super().__init__() self.time = QTime(0, 0, 0, 0) self.time_label = QLabel(\u0026#34;00:00:00.00\u0026#34;, self) self.start_button = QPushButton(\u0026#34;Start\u0026#34;, self) self.stop_button = QPushButton(\u0026#34;Stop\u0026#34;, self) self.reset_button = QPushButton(\u0026#34;Reset\u0026#34;, self) self.timer = QTimer(self) self.initUI() def initUI(self): self.setWindowTitle(\u0026#34;Stopwatch\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.time_label) self.setLayout(vbox) self.time_label.setAlignment(Qt.AlignCenter) hbox = QHBoxLayout() hbox.addWidget(self.start_button) hbox.addWidget(self.stop_button) hbox.addWidget(self.reset_button) vbox.addLayout(hbox) # Google search for \u0026#34;color picker\u0026#34; self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QPushButton, QLabel{ padding: 20px; font-weight: bold; font-family: calibri; } QPushButton{ font-size: 50px; } QLabel{ font-size: 120px; background-color: hsl(200, 100%, 85%); border-radius: 20px; } \u0026#34;\u0026#34;\u0026#34;) self.start_button.clicked.connect(self.start) self.stop_button.clicked.connect(self.stop) self.reset_button.clicked.connect(self.reset) self.timer.timeout.connect(self.update_display) def start(self): self.timer.start(10) def stop(self): self.timer.stop() def reset(self): self.timer.stop() self.time = QTime(0, 0, 0, 0) self.time_label.setText(self.format_time(self.time)) def format_time(self, time): hours = time.hour() minutes = time.minute() seconds = time.second() milliseconds = time.msec() // 10 # // = integer division return f\u0026#34;{hours:02}:{minutes:02}:{seconds:02}.{milliseconds:02}\u0026#34; def update_display(self): self.time = self.time.addMSecs(10) # We are updating the time with +10 milliseconds self.time_label.setText(self.format_time(self.time)) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) stopwatch = Stopwatch() stopwatch.show() sys.exit(app.exec_()) # This is the execute() method 76. ⭐ weather API app ☀️ # This is a fairly useful API to get real-time weather data.\nThe website is openweathermap.org.\nYou will need your own API key, but signing up for an account is free.\nimport sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(\u0026#34;70°F\u0026#34;, self) self.emoji_label = QLabel(\u0026#34;☀️\u0026#34;, self) self.description_label = QLabel(\u0026#34;Sunny\u0026#34;, self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): print(\u0026#34;You get the weather\u0026#34;) def display_error(self, message): pass def display_weather(self, data): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; response = requests.get(url) data = response.json() print(data) def display_error(self, message): pass def display_weather(self, data): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) Current Weather Data API doc: Built-in API request by city name\nSuccessful responses\n200 OK\nThe request succeeded. The result meaning of \u0026ldquo;success\u0026rdquo; depends on the HTTP method:\nGET: The resource has been fetched and transmitted in the message body. HEAD: The representation headers are included in the response without any message body. PUT or POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server. import sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; try: response = requests.get(url) response.raise_for_status() data = response.json() if data[\u0026#34;cod\u0026#34;] == 200: self.display_weather(data) except requests.exceptions.HTTPError as http_error: match response.status_code: case 400: print(\u0026#34;Bad request\\nPlease check your input\u0026#34;) case 401: print(\u0026#34;Unauthorized\\nIncorrect API key\u0026#34;) case 403: print(\u0026#34;Forbidden\\nAccess is denied\u0026#34;) case 404: print(\u0026#34;Not found\\nCity not found\u0026#34;) case 500: print(\u0026#34;Internal Server Error\\nPlease try again later\u0026#34;) case 502: print(\u0026#34;Bad Gateway\\nInvalid response from the server\u0026#34;) case 503: print(\u0026#34;Service Unavailable\\nServer is down\u0026#34;) case 504: print(\u0026#34;Gateway Timeout\\nNo response from the server\u0026#34;) case _: print(f\u0026#34;HTTP error occurred\\n{http_error}\u0026#34;) except requests.exceptions.ConnectionError: pass except requests.exceptions.Timeout: pass except requests.exceptions.TooManyRedirects: pass except requests.exceptions.RequestException: pass def display_error(self, message): pass def display_weather(self, data): print(data) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) HTTP response status codes\nHTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:\nInformational responses (100 – 199) Successful responses (200 – 299) Redirection messages (300 – 399) Client error responses (400 – 499) Server error responses (500 – 599) 400 Bad Request\nThe server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n401 Unauthorized\nAlthough the HTTP standard specifies \u0026ldquo;unauthorized\u0026rdquo;, semantically this response means \u0026ldquo;unauthenticated\u0026rdquo;. That is, the client must authenticate itself to get the requested response.\n403 Forbidden\nThe client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client\u0026rsquo;s identity is known to the server.\n404 Not Found\nThe server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Server may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.\nServer error responses\n500 Internal Server Error\nThe server has encountered a situation it doesn\u0026rsquo;t know how to handle.\n502 Bad Gateway\nThis error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.\n503 Service Unavailable\nThe server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This response should be used for temporary conditions and the Retry-After HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.\n504 Gateway Timeout\nThis error response is given when the server is acting as a gateway and cannot get a response in time.\nexception requests.ConnectionError(*args, **kwargs)\nA Connection error occurred.\nexception requests.Timeout(*args, **kwargs)\nThe request timed out.\nCatching this error will catch both ConnectTimeout and ReadTimeout errors.\nexception requests.TooManyRedirects(*args, **kwargs)\nToo many redirects.\nexception requests.RequestException(*args, **kwargs)\nThere was an ambiguous exception that occurred while handling your request.\nimport sys from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout) from PyQt5.QtCore import Qt class WeatherApp(QWidget): def __init__(self): super().__init__() self.city_label = QLabel(\u0026#34;Enter city name: \u0026#34;, self) self.city_input = QLineEdit(self) self.get_weather_button = QPushButton(\u0026#34;Get Weather\u0026#34;, self) self.temperature_label = QLabel(self) self.emoji_label = QLabel(self) self.description_label = QLabel(self) self.initUI() # Mac: Control + Command + Space # Windows: NumLock Alt + 0176 def initUI(self): self.setWindowTitle(\u0026#34;Weather App\u0026#34;) vbox = QVBoxLayout() vbox.addWidget(self.city_label) vbox.addWidget(self.city_input) vbox.addWidget(self.get_weather_button) vbox.addWidget(self.temperature_label) vbox.addWidget(self.emoji_label) vbox.addWidget(self.description_label) self.setLayout(vbox) self.city_label.setAlignment(Qt.AlignCenter) self.city_input.setAlignment(Qt.AlignCenter) self.temperature_label.setAlignment(Qt.AlignCenter) self.emoji_label.setAlignment(Qt.AlignCenter) self.description_label.setAlignment(Qt.AlignCenter) self.city_label.setObjectName(\u0026#34;city_label\u0026#34;) self.city_input.setObjectName(\u0026#34;city_input\u0026#34;) self.get_weather_button.setObjectName(\u0026#34;get_weather_button\u0026#34;) self.temperature_label.setObjectName(\u0026#34;temperature_label\u0026#34;) self.emoji_label.setObjectName(\u0026#34;emoji_label\u0026#34;) self.description_label.setObjectName(\u0026#34;description_label\u0026#34;) # *px not xp self.setStyleSheet(\u0026#34;\u0026#34;\u0026#34; QLabel, QPushButton{ font-family: Arial; } QLabel#city_label{ font-size: 40px; font-style: italic; } QLineEdit#city_input{ font-size: 40px; } QPushButton#get_weather_button{ font-size:30px; font-weight: bold; } QLabel#temperature_label{ font-size: 75px; } QLabel#emoji_label{ font-size: 100px; font-family: Segoe UI Emoji; } QLabel#description_label{ font-size: 50px; } \u0026#34;\u0026#34;\u0026#34;) self.get_weather_button.clicked.connect(self.get_weather) def get_weather(self): api_key = \u0026#34;d498fc58320ff0935a20ad97ac54674a\u0026#34; city = self.city_input.text() url = f\u0026#34;https://api.openweathermap.org/data/2.5/weather?q={city}\u0026amp;appid={api_key}\u0026#34; try: response = requests.get(url) response.raise_for_status() data = response.json() if data[\u0026#34;cod\u0026#34;] == 200: self.display_weather(data) except requests.exceptions.HTTPError as http_error: match response.status_code: case 400: self.display_error(\u0026#34;Bad request:\\nPlease check your input\u0026#34;) case 401: self.display_error(\u0026#34;Unauthorized:\\nIncorrect API key\u0026#34;) case 403: self.display_error(\u0026#34;Forbidden:\\nAccess is denied\u0026#34;) case 404: self.display_error(\u0026#34;Not found:\\nCity not found\u0026#34;) case 500: self.display_error(\u0026#34;Internal Server Error:\\nPlease try again later\u0026#34;) case 502: self.display_error(\u0026#34;Bad Gateway:\\nInvalid response from the server\u0026#34;) case 503: self.display_error(\u0026#34;Service Unavailable:\\nServer is down\u0026#34;) case 504: self.display_error(\u0026#34;Gateway Timeout:\\nNo response from the server\u0026#34;) case _: self.display_error(f\u0026#34;HTTP error occurred:\\n{http_error}\u0026#34;) except requests.exceptions.ConnectionError: self.display_error(\u0026#34;Connection Error:\\nCheck your internet connection\u0026#34;) except requests.exceptions.Timeout: self.display_error(\u0026#34;Timeout Error:\\nThe request timed out\u0026#34;) except requests.exceptions.TooManyRedirects: self.display_error(\u0026#34;Too many Redirects:\\nCheck the URL\u0026#34;) except requests.exceptions.RequestException as req_errror: self.display_error(f\u0026#34;Request Error:\\n{req_errror}\u0026#34;) def display_error(self, message): self.temperature_label.setStyleSheet(\u0026#34;font-size: 30px;\u0026#34;) self.temperature_label.setText(message) self.emoji_label.clear() self.description_label.clear() def display_weather(self, data): self.temperature_label.setStyleSheet(\u0026#34;font-size: 75px;\u0026#34;) temperature_k = data[\u0026#34;main\u0026#34;][\u0026#34;temp\u0026#34;] # *main is a dictionary* temperature_c = temperature_k - 273.15 temperature_f = (temperature_k * 9/5) - 459.67 weather_id = data[\u0026#34;weather\u0026#34;][0][\u0026#34;id\u0026#34;] # *weather is a dictionary* weather_description = data[\u0026#34;weather\u0026#34;][0][\u0026#34;description\u0026#34;] self.temperature_label.setText(f\u0026#34;{temperature_f:.0f}°F\u0026#34;) self.emoji_label.setText(self.get_weather_emoji(weather_id)) self.description_label.setText(weather_description) @staticmethod def get_weather_emoji(weather_id): if 200 \u0026lt;= weather_id \u0026lt;= 232: return \u0026#34;🌩️\u0026#34; elif 300 \u0026lt;= weather_id \u0026lt;= 321: return \u0026#34;🌦️\u0026#34; elif 500 \u0026lt;= weather_id \u0026lt;= 531: return \u0026#34;🌧️\u0026#34; elif 600 \u0026lt;= weather_id \u0026lt;= 622: return \u0026#34;❄️\u0026#34; elif 701 \u0026lt;= weather_id \u0026lt;= 741: return \u0026#34;🌫️\u0026#34; elif weather_id == 762: return \u0026#34;🌋\u0026#34; elif weather_id == 771: return \u0026#34;💨“ elif weather_id == 781: return \u0026#34;🌪️\u0026#34; elif weather_id == 800: return \u0026#34;☀️\u0026#34; elif 801 \u0026lt;= weather_id \u0026lt;= 804: return \u0026#34;☁️\u0026#34; else: return \u0026#34;\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) weather_app = WeatherApp() weather_app.show() sys.exit(app.exec_()) Weather condition codes\nBack to the series index\n","date":"5 April 2025","externalUrl":null,"permalink":"/posts/python-2-learn/","section":"Blog","summary":"A complete Python tutorial for beginners","title":"Python Learning","type":"posts"},{"content":"Back to the series index\n1. Learn the Basics # Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.\nofficial Python Website article Python - Wiki article Tutorial Series: How to Code in Python article Google’s Python Class article W3Schools - Python Tutorial video Learn Python - Full Course feed Explore top posts about Python ◇Basics Syntax # Setup the environment for python and get started with the basics.\narticle W3Schools - Python article Python Basics article Learn X in Y Minutes / Python video Python for Beginners - Learn Python in 1 Hour ◇Variables and Data Types # Variables are used to store information to be referenced and manipulated in a computer program. They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory. This data can then be used throughout your program.\narticle Variables in Python article W3Schools — Python Variables article Python Data Types article Python for Beginners: Data Types video Python Variables and Data Types ◇Conditionals # Conditional Statements in Python perform different actions depending on whether a specific condition evaluates to true or false. Conditional Statements are handled by if-elif-else statements and MATCH-CASE statements in Python.\narticle Conditional Statements in Python article Python Conditional Statements article How to Use a Match Statement in Python ◇Loops # Loops are used to execute a block of code repeatedly.\narticle Loops in Python article Python “while” Loops (Indefinite Iteration) article Python “for” Loops (Definite Iteration) video Python For Loops ◇Type Casting # The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion: Implicit and Explicit.\narticle Type Conversion and Casting ◇Exceptions # Python exceptions are events that occur during the execution of a program and disrupt the normal flow of the program’s instructions. When an exception is raised, it indicates that an error has occurred. Python provides a way to handle these exceptions using try-except blocks, allowing developers to manage errors gracefully and ensure the program can continue or exit smoothly.\nofficial Exceptions Documentation article Python Exceptions: An Introduction article Errors and Exceptions article Python Exception Handling video Exception Handling in Python ◇Functions, Builtin Functions # Functions In programming, a function is a reusable block of code that executes a certain functionality when it is called. Functions are integral parts of every programming language because they help make your code more modular and reusable. In Python, we define a function with the def keyword, then write the function identifier (name) followed by parentheses and a colon.\nExample\ndef greet(name): print(f\u0026#34;Hello, {name}!\u0026#34;) greet(\u0026#34;World\u0026#34;) official Built-in Functions in Python\narticle Python Functions - W3Schools\narticle Defining Python Functions\n◇Lists, Tuples, Sets, and Dictionaries # Lists: A list is just like dynamic sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python.\nTuple: A Tuple is a collection of Python objects separated by commas. In some ways, a tuple is similar to a list in terms of indexing, nested objects, and repetition but a tuple is immutable, unlike lists that are mutable.\nSet: A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python’s set class represents the mathematical notion of a set.\nDictionary: In python, Dictionary is an ordered (since Py 3.7) [unordered (Py 3.6 \u0026amp; prior)] collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.\narticle Tuples vs. Lists vs. Sets in Python\narticle Python for Beginners: Lists\narticle Python for Beginners: When and How to Use Tuples\nvideo Difference Between List, Tuple, Set and Dictionary in Python\n◇Tuples # Tuples are immutable sequences, meaning that once a tuple is created, its elements cannot be changed. Tuples are often used to store related pieces of information. They are defined by placing the elements inside parentheses () separated by commas.\nofficial Tuples Documentation article When and How to Use Tuples article Python’s tuple Data Type: A Deep Dive With Examples video why are Tuples even a thing? ◇Sets # Python Set is an unordered collection of data types that is iterable, mutable, and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.\narticle An In-Depth Guide to Working with Python Sets article An W3Schools - Python Sets video Python Sets tutorial for Beginners ◇Dictionaries # In Python, a dictionary is a built-in data type that allows you to store key-value pairs. Each key in the dictionary is unique, and each key is associated with a value. Starting from Python 3.7, dictionaries maintain the order of items as they were added.\nofficial Dictionaries in Python article W3 Schools - Dictionaries article Dictionaries in Python 2. Data Structures \u0026amp; Algorithms # A data structure is a named location that can be used to store and organize data. And, an algorithm is a collection of steps to solve a particular problem. Learning data structures and algorithms allow us to write efficient and optimized computer programs.\nroadmap Visit Dedicated DSA Roadmap article Learn DS \u0026amp; Algorithms video Data Structures Illustrated feed Explore top posts about Algorithms ◇Arrays and Linked Lists # Arrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.\narticle Arrays in Python article Linked List Python video Array Data Structure | Illustrated Data Structures video Linked List Data Structure | Illustrated Data Structures ◇Hash Tables # Hash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.\narticle Build a Hash Table in Python article Hash Tables and Hashmaps in Python video Hash Table Data Structure | Illustrated Data Structures ◇Heaps, Stacks and Queues # Stacks: Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it’s called a stack overflow.\nQueue: Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.\nHeap: A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).\narticle Heaps, Stacks, Queues\narticle How to Implement Python Stack?\narticle Python Stacks, Queues, and Priority Queues in Practice\narticle Heap Implementation in Python\nvideo Stack Data Structure | Illustrated Data Structures\nvideo Queue Data Structure | Illustrated Data Structures\n◇Binary Search Tree # A binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node’s left subtree and less than the ones in its right subtree.\narticle How to Implement Binary Search Tree in Python article Binary Search Tree in Python video Tree Data Structure | Illustrated Data Structures ◇Recursion # Recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.\narticle Recursion in Python: An Introduction feed Explore top posts about Recursion ◇Sorting Algorithms # Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order. The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner.\narticle Sorting Algorithms in Python article Python - Sorting Algorithms feed Explore top posts about Algorithms 3. Modules # Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: example.py, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.\nofficial Python Modules article Modules in Python ◇Builtin Modules # Python has a rich standard library of built-in modules that provide a wide range of functionality. Some of the most commonly used built-in modules include: sys, os, math, datetime, random, re, itertools, etc.\nofficial Python Module Index article Python Modules article Python - Built-In Modules ◇Custom Modules # Modules refer to a file containing Python statements and definitions. A file containing Python code, for example: example.py, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.\nofficial Python Modules article Modules in Python article Python Modules and Packages 4. Lambdas # Python Lambda Functions are anonymous function means that the function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python.\narticle Lambdas in Python article How to use Lambda functions video Python Lambda Functions 5. Decorators # Decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate.\narticle Learn Decorators in Python article Python Decorators video Decorators in Python video Python Decorators in 1 Minute 6. Iterators # An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods iter() and next() .\narticle Iterators in Python article Python Iterators article Iterators and Iterables in Python 7. Regular Expressions # A regular expression is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-searching algorithms for “find” or “find and replace” operations on strings, or for input validation.\nofficial Regular Expressions in Python article Python Regular Expressions article Python - Regular Expressions 8. Object Oriented Programming # In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphism, encapsulation, etc., in programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.\narticle Object Oriented Programming in Python ivideo Object Oriented Programming (OOP) In Python - Beginner Crash Course video OOP in Python One Shot video Python OOP Tutorial ◇Classes # A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.\nofficial Classes in Python article Python Classes and Objects video Python OOP Tutorial ◇Inheritance # Inheritance is a fundamental concept in object-oriented programming (OOP) that allows one class to inherit the properties and behavior of another class.\narticle Python Inheritance article Inheritance in Python ◇Methods, Dunder # A method in python is somewhat similar to a function, except it is associated with object/classes. Methods in python are very similar to functions except for two major differences.\nThe method is implicitly used for an object for which it is called. The method is accessible to data that is contained within the class. Dunder or magic methods in Python are the methods that have two prefix and suffix underscores in the method name. Dunder here means “Double Under (Underscores)”. These are commonly used for operator overloading. Few examples for magic methods are: __init__, __add__, __len__, __repr__ etc.\narticle Method vs Function in Python article Python - Magic or Dunder Methods 9. Paceage Managers # Package managers allow you to manage the dependencies (external code written by you or someone else) that your project needs to work correctly.\nPyPI and Pip are the most common contenders but there are some other options available as well.\nOpenSource pypa/pipx feed Explore top posts about Python ◇Poetry # Poetry is a dependency management and packaging tool for Python that runs on Windows, macOS, and Linux. Poetry efficiently installs, manages, and updates packages and their dependencies. Poetry seamlessly creates, saves, loads, and switches between project environments on your local computer. It is designed specifically for Python projects, providing a streamlined workflow for managing dependencies, virtual environments, and building packages.\nPoetry as a package manager helps you find and install packages. If you need a specific version of a package or a different version of Python, Poetry handles both dependency management and virtual environments effortlessly. With just a few commands, you can set up a completely isolated environment to run a different version of Python or package configuration, while maintaining your usual development environment. Poetry’s lock file ensures consistent installs across different environments, enhancing reproducibility and stability of your projects.\nofficial Poetry Docs ◇Conda # Conda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.\nofficial Conda Documentation ◇uv # uv is an “extremely fast” python package installer and resolver.\nOpenSource astral-sh/uv ◇PyPI # PyPI, typically pronounced pie-pee-eye, is a repository containing several hundred thousand packages. These range from trivial Hello, World implementations to advanced deep learning libraries.\nofficial PyPI Website article How to Publish an Open-Source Python Package to PyPI video Getting Started with Pip and PyPI in Python feed Explore top posts about Python ◇Pip # The standard package manager for Python is pip. It allows you to install and manage packages that aren’t part of the Python standard library.\nofficial pip Documentation article Using Pythons pip to Manage Your Projects Dependencies article Python PIP Introduction feed Explore top posts about PIP 10. Common Packages # Python has a rich ecosystem of packages and modules that can be used to get the most out of the language. A package is essentially a directory that contains multiple modules and subpackages. A module is a single file that contains a collection of related functions, classes, and variables. Modules are the basic building blocks of Python code organization. A module can be thought of as a container that holds a set of related code.\nofficial requests official pathlib official asyncio official dataclasses official python-dotenv official numpy iofficial pandas ◇Configuration: pyproject.toml # This file is used to define the project configuration and dependencies. It is a configuration file that contains metadata about the project, such as its name, version, dependencies, and build settings. The pyproject.toml file is used by tools like poetry and flit to manage Python projects and their dependencies.\nofficial Writing pyproject.toml files\n11. List Comprehensions # List comprehensions are a concise way to create a list using a single line of code in Python. They are a powerful tool for creating and manipulating lists, and they can be used to simplify and shorten code.\nofficial Python List Comprehensions article Python - List Comprehension article What Exactly are List Comprehensions in Python? - CodeGuage article Python List Comprehensions Quiz - CodeGuage 12. Generator Expressions # Generator expressions are a concise way to create a generator using a single line of code in Python. They are similar to list comprehensions, but instead of creating a list, they create a generator object that produces the values on-demand, as they are needed. Generator expressions are a useful tool for efficiently producing large sequence of values, as they allow you to create the generator without creating the entire sequence in memory at once. This tends to use less memory, especially for large sequences.\narticle Python Generator Expressions article List Comprehensions in Python and Generator Expressions 13. Paradigms # Python is a multi-paradigm programming language, which means that it supports several programming paradigms. Some of the main paradigms supported by Python are:\nImperative programming: This paradigm focuses on telling the computer what to do, step by step. Python supports imperative programming with features such as variables, loops, and control structures.\nObject-oriented programming (OOP): This paradigm is based on the idea of objects and their interactions. Python supports OOP with features such as classes, inheritance, and polymorphism.\nFunctional programming: This paradigm is based on the idea of functions as first-class citizens, and it emphasizes the use of pure functions and immutable data. Python supports functional programming with features such as higher-order functions, lambda expressions, and generators.\nAspect-oriented programming: This paradigm is based on the idea of separating cross-cutting concerns from the main functionality of a program. Python does not have built-in support for aspect-oriented programming, but it can be achieved using libraries or language extensions.\narticle Python Paradigms\nvideo Learn Functional Programming - Python Course\n14. Context Manager # Context Managers are a construct in Python that allows you to set up context for a block of code, and then automatically clean up or release resources when the block is exited. It is most commonly used with the with statement.\nofficial Context Libraries article Context Managers in Python article Context Managers 15. Python Frameworks # Frameworks automate the common implementation of common solutions which gives the flexibility to the users to focus on the application logic instead of the basic routine processes. Frameworks make the life of web developers easier by giving them a structure for app development. They provide common patterns in a web application that are fast, reliable and easily maintainable.\narticle Pyscript: A Browser-Based Python Framework feed Explore top posts about Python ◇Plotly Dash(Synchronous) # Plotly Dash is a Python framework that allows you to build analytical web applications. It’s a high-level library that enables you to create interactive, web-based data visualization dashboards without requiring extensive knowledge of web development.\nofficial Plotly Dash Documentation official 20 Minutes Tutorial ◇Pyramid(Synchronous) # Pyramid is a general, open source, web application development framework built in python. It allows python developer to create web applications with ease. Pyramid is backed by the enterprise knowledge Management System KARL (a George Soros project).\nofficial Pyramid Website official Pyramid Documentation article Pyramid Framework Introduction ◇gevent(Asynchronous) # gevent is a Python library that provides a high-level interface to the event loop. It is based on non-blocking IO (libevent/libev) and lightweight greenlets. Non-blocking IO means requests waiting for network IO won’t block other requests; greenlets mean we can continue to write code in synchronous style.\nofficial gevent Website OpenSource gevent/gevent article gevent For the Working Python Developer ◇aiohttp(Asynchronous) # aiohttp is a Python 3.5+ library that provides a simple and powerful asynchronous HTTP client and server implementation.\nofficial aiohttp docs article Creating a RESTful API with Python and aiohttp video Python Asyncio, Requests, Aiohttp | Make faster API Calls ◇Tornado(Asynchronous) # Tornado is a scalable, non-blocking web server and web application framework written in Python. It was developed for use by FriendFeed; the company was acquired by Facebook in 2009 and Tornado was open-sourced soon after.\nofficial Tornado Website article A Step-by-Step Tutorial on Python Tornado video Tornado Python Framework ◇Sanic(Asynchronous) # Sanic is a Python 3.7+ web server and web framework that’s written to go fast. It allows the usage of the async/await syntax added in Python 3.5, which makes your code non-blocking and speedy.\nofficial Sanic Website\n◇Fast API(Synchronous + Asynchronous) # FastAPI is a Web framework for developing RESTful APIs in Python. FastAPI is based on Pydantic and type hints to validate, serialize, and deserialize data and automatically auto-generate OpenAPI documents.\nofficial FastAPI Documentation video Create an API with Fast-API (Full 19 Hour Course) feed Explore top posts about FastAPI ◇Django(Synchronous + Asynchronous) # Django is a free and open-source, Python-based web framework that follows the model–template–views architectural pattern. It is maintained by the Django Software Foundation, an independent organization established in the US as a 501 non-profit.\nofficial Django Website official Getting Started article Is Django Synchronous or Asynchronous? video Python Django Tutorial for Beginners feed Explore top posts about Django ◇Flask(Synchronous + Asynchronous) # Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. Instead, it provides flexibility by requiring you to choose and integrate the best libraries for your project’s needs.\nofficial Flask Website official Flask Tutorial feed Explore top posts about Flask 16. Concurrency # Concurrency in Python allows multiple tasks to be executed simultaneously using different approaches. GIL (Global Interpreter Lock) limits thread execution, making multithreading less efficient for computational tasks, but suitable for I/O. Multiprocessing, using the multiprocessing module, allows multiple cores to be utilized, providing true parallelism. Asynchrony via asyncio is optimal for I/O operations, allowing thousands of connections to be processed simultaneously without blocking. The choice of approach depends on the nature of the task.\nofficial Concurrent Execution article Python Concurrency ◇Multiprocessing # Multiprocessing utilizes multiple processes, each with its own GIL. This allows full utilization of multiple processor cores, which is effective for computationally intensive tasks. Python’s multiprocessing module supports creating processes and exchanging data between them.\nofficial Python Documentation article Multiprocessing in Python with Example article Multiprocessing in Python ◇Asynchrony # Asynchronous programming, supported by asyncio, allows code to be executed without blocking, using async and await. This is especially useful for I/O tasks such as networking or file manipulation, allowing thousands of connections to be handled without blocking the main thread.\nofficial Python AsyncIO library article Async IO in Python: A Complete Walkthrough ◇GIL # GIL is a mechanism that allows only one thread to execute Python code at a time. This limitation is related to memory management in CPython and can reduce the efficiency of multithreaded applications on multi-core systems.\narticle What is GIL? ◇Threading # Multithreading allows multiple threads within a single process. However, because of GIL, threads cannot run in parallel on different cores, which makes multithreading suitable for I/O tasks (e.g., network requests) but not for computational tasks.\nofficial Python Threading Library article Introduction to Threading in Python 17. Environments # ◇Pipenv # Pipeline Environment (pipenv) is a tool that aims to bring the best of all packaging worlds (bundled, requirements.txt, setup.py, setup.cfg, etc.) to the Python world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds.\nofficial Pipenv Documentation ◇virtualenv # virtualenv is a tool to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\nofficial Virtual Environments ◇pyenv # pyenv is a tool for managing multiple versions of the Python programming language on Unix-like systems. It works by setting environment variables to point to the directory where the desired version of Python is installed. This allows you to switch between different versions of Python without having to modify your system’s default Python installation.\nOpenSource pyenv/pyenv 18. Static Typing # Static typing can be a powerful tool to help you catch bugs before they happen. It can also help you understand the code you’re working with, and make it easier to maintain and refactor.\nofficial Static Typing in Python ◇Pydantic # Pydantic is a python library for data validation and settings management using python type annotations.\nofficial Pydantic Documentation ◇pyre # pyre is a static type checker for Python. It is a tool that helps you find type errors in your Python code. Pyre is designed to be fast, scalable, and easy to use. It is used at Facebook to help developers catch type errors before they make it to production.\nofficial pyre Documentation ◇pyright # pyright is a static type checker for Python. It is a Microsoft product and is written in TypeScript. It is a language server that uses the Language Server Protocol (LSP) to communicate with the editor. It is a good alternative to mypy and pytype.\nofficial Pyright Documentation ◇mypy # mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or “duck”) typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking. Mypy type checks standard Python programs; run them using any Python VM with basically no runtime overhead.\nofficial mypy documentation OpenSource python/mypy ◇typing # Typing is a module in Python that provides runtime support for type hints. The typing module defines a standard set of names that can be used to describe types in the Python language. The typing module was added to the standard library in Python 3.5.\nofficial Typing Module 19. Code Formatting # Python code formatting is crucial for maintaining readability, consistency, and reducing errors. Black is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.\nofficial Pylint for Python official Black Documentation ◇yapf # yapf is a formatter for Python files. It is a tool that automatically formats Python code to conform to the PEP 8 style guide. It is similar to black but has more configuration options.\nOpenSource google/yapf ◇black # black is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.\nofficial Getting Started with Black official Black Documentation ◇ruff # An extremely fast Python linter and code formatter, written in Rust.\nofficial Ruff documentation 20. Documentation # ◇Sphinx # Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and licensed under the BSD license.\nofficial Sphinx Website 21. Testing # Testing in programming means checking if your code works as expected. It’s a systematic way to find and fix errors (bugs) before your code goes live. Imagine building a beautiful house without checking if the walls are straight or the roof doesn’t leak—that’s what coding without testing can feel like!\nofficial Unit Testing in Python article Python Testing Tutorial ◇tox # Tox is a tool for automating test environment management and testing against multiple interpreter configurations. It is particularly useful for Python codebase that need to support multiple versions of Python.\nofficial Tox Documentation ◇nose # Nose is another opensource testing framework that extends unittest to provide a more flexible testing framework. Note that Nose is no longer maintained and pytest is considered the replacement.\nofficial Introduction to Nose article Getting Started With Nose In Python ◇unittest / pyUnit # PyUnit is an easy way to create unit testing programs and UnitTests with Python. (Note that docs.python.org uses the name “unittest”, which is also the module name.)\nofficial PyUnit Docs article How To Use unittest to Write a Test Case for a Function in Python article A Gentle Introduction to Unit Testing in Python ◇doctest # Python’s standard library comes equipped with a test framework module called doctest. The doctest module programmatically searches Python code for pieces of text within comments that look like interactive Python sessions. Then, the module executes those sessions to confirm that the code referenced by a doctest runs as expected.\nofficial Doctest Module article How To Write Doctests in Python ◇pytest # pytest is a mature full-featured Python testing tool that helps you write better programs.\nofficial Pytest Docs article Pytest Tutorial article Effective Python Testing With Pytest feed Explore top posts about Python Back to the series index\n","date":"8 March 2025","externalUrl":null,"permalink":"/posts/python-1-roadmap/","section":"Blog","summary":"Python Roadmap","title":"Python Roadmap","type":"posts"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/tags/roadmap/","section":"Tags","summary":"","title":"Roadmap","type":"tags"},{"content":"As for why Python is recommended, I suggest reading Eric Raymond\u0026rsquo;s evaluation of several major programming languages, as well as his article \u0026ldquo;Why Python?\u0026rdquo;.\n","date":"2 March 2025","externalUrl":null,"permalink":"/posts/python-0-overview/","section":"Blog","summary":"Python Series","title":"Python Overview","type":"posts"},{"content":"","date":"2 March 2025","externalUrl":null,"permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology","type":"categories"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/series/how-to-master-japanese/","section":"Series","summary":"","title":"How to Master Japanese","type":"series"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/japanese/","section":"Tags","summary":"","title":"Japanese","type":"tags"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/resources/","section":"Tags","summary":"","title":"Resources","type":"tags"},{"content":"Back to the series index\n★Learning Resources # The Resources ★📖 Dictionaries # Jisho.org: Japanese Dictionary Takoboto | Japanese dictionary and Nihongo learning tool How to Pronounce Japanese Like a Native | Youglish ★📖 Reading Resources # Aozora Bunko Aozora Bunko Assistant National Diet Library Search (NDL Search) Z-library Project - eBook Library Z. Download free Books Let\u0026rsquo;s Become a Novelist - A Novel Posting Site for Everyone ★🎧 Listening Practice # ◇Bilingual Subtitled Videos # Kamigami Subtitle Group: Documentaries and Anime NHK High School Lectures: Online short videos for Japanese high school students ◇News # NEWS WEB EASY: A slower version of NHK, but it sounds like machine-generated audio, suitable for interpreting practice. Aozora Reading: Some works from Aozora Bunko are read by Japanese people. You can find articles of interest to listen to. ANNnewsCH: Each video comes with a transcript (subtitles) in the description, perfect for intensive listening. TV Tokyo BIZ: Mainly economic news, each video also comes with a transcript in the description, highly recommended. ABC TV News: The first sentence in the description is a summary of the news, followed by the transcript. Great for summarization practice. ★📚 Grammar Explanations # Basic Verb Handbook | Always something new to learn Onomatopoeia Compound Verb Lexicon | Comprehensive but scattered in textbooks Learn Japanese – Tae Kim\u0026rsquo;s Guide to Learning Japanese IMABI Today – Guided Japanese Mastery ★📊 Text Difficulty Assessment # Chuta\u0026rsquo;s Toolbox: Assesses the difficulty of vocabulary in a text, categorized by JLPT levels. Japanese Text Difficulty Discrimination System: Also assesses vocabulary difficulty but not by JLPT levels, providing more data. Learning Item Analysis System: Assesses grammar difficulty in a text, not categorized by JLPT levels. ★📜 Miscellaneous # Japanese webpage furigana OJAD - Suzuki-kun\u0026rsquo;s Prosodic Tutor: This webpage can mark the pitch accent of a sentence and provide machine-generated audio. Kanbun HTML: Achieves beautiful Kanbun typesetting through HTML syntax. ★🎓 Thesis Related # J-STAGE: Allows free downloads of papers without login. CiNii: Use Detailed Search - Full Text Link - Full Text Available to search for downloadable papers. Academic Institutional Repository Database: Download papers and other data under Files. National Institute for Japanese Language and Linguistics: Japanese Research and Japanese Education Literature Database: Papers marked with Full Text Available can be downloaded. ★✍️ Practice Resources # ◇Kana Tests # learn kana ◇Writing Practice: # Children\u0026rsquo;s Character Table Hiragana/Katakana Practice Grid Paper Hiragana/Katakana Chart Hiragana Writing Practice Sheet 1 2 3 Blank Writing Practice Sheet Self-Introduction Katakana (including Hiragana) Website Mnemonic jpg1 jpg2 jpg3 jpg4 jpg5 jpg6 pdf Mnemonic Website 1 2 3 4 Hiragana Blank Fill-in Printables 1 2 NHK Japanese Hiragana NHK Japanese Learning Platform 1000 Kanji List ◇Pronunciation Practice # Downloadable audio files for comparison practice (basic_sounds.zip). Recommended Ancient Poem \u0026ldquo;Iroha\u0026rdquo;: Contains all Hiragana (except 「ん」), suitable as practice material. Back to the series index\n","date":"1 March 2025","externalUrl":null,"permalink":"/posts/japanese-6-resources/","section":"Blog","summary":"A curated collection of recommended Japanese learning resources, tools, and practice materials for learners at all levels.","title":"Some Resources for Learning Japanese","type":"posts"},{"content":"","date":"28 February 2025","externalUrl":null,"permalink":"/tags/textbook/","section":"Tags","summary":"","title":"Textbook","type":"tags"},{"content":"Back to the series index\n★Features of the Textbook # Irodori, developed by the Japan Foundation, is a Japanese language textbook series designed specifically for foreigners, aiming to help learners acquire basic communication skills for daily life and work in Japan.\nThe core philosophy of Irodori is to foster mutual understanding through communication and cultural awareness. The textbook not only focuses on language knowledge but also emphasizes practical application in real-life scenarios. Its learning objectives are based on the JF Standard for Japanese-Language Education (Can-do), enabling learners to handle various everyday situations in Japan, such as shopping, work, and social interactions.\nKey features of Irodori:\nExpands what learners \u0026ldquo;can do\u0026rdquo; in Japanese living scenarios Covers Japanese proficiency at AI–A2 levels Aligns with the \u0026ldquo;JF Can-do for Life in Japan\u0026rdquo; framework Promotes mutual understanding through communication and cultural exchange Includes diverse topics closely related to daily life Utilizes rich audio and authentic materials for practical Japanese learning Solidifies grammar and kanji knowledge Freely downloadable from the official website Loosely connected to the Marugoto series ★Textbook Structure # The IRODORI series consists of three volumes: Starter (A1), Elementary 1 (A2), and Elementary 2 (A2). Each volume is organized as follows:\nTextbook (PDF) Audio Files (MP3) Supplementary Materials ※ 【Cover】 【Lessons 1–18】 【Answer Key】 【Preface】【How to Use This Textbook】 【Vocabulary List】 【Table of Contents】 【Teaching Guide】 【Lessons 1–18】\nExercises, Listening Scripts, Kanji Vocabulary, Grammar Notes, Japanese Life \u0026amp; Culture 【Can-do Self-Assessment Sheet】 【Copyright Page】 ★How to Use the Textbook # ◇Lesson Structure # Each volume (Starter, Elementary 1, Elementary 2) comprises 9 themes and 18 lessons. Each lesson is designed for 150–180 minutes of instruction, though timing may vary based on exercise volume.\n【Theme \u0026amp; Lesson Title】 【Warm-up Questions】 Helps learners contextualize the lesson’s topic through personal reflection or group discussion. 【Exercises】 Core component for achieving Can-do goals. Each lesson includes 3–6 exercises to master practical Japanese. 【Listening Scripts】 【Kanji Vocabulary】 Introduces kanji encountered in exercises. 【Grammar Notes】 Explains sentence patterns and expressions from the lesson. 【Japanese Life \u0026amp; Culture】 Provides insights into cultural or situational contexts from the exercises. ◇Exercise Types and Goals # Each lesson includes Listening, Speaking, Reading, and Writing exercises. While each exercise is standalone, they are thematically linked within a lesson. Speaking exercises are emphasized across the series.\nSpeaking Ask/answer questions about familiar topics; give simple descriptions about oneself or surroundings. Listening Grasp key points in daily conversations; extract essential information from announcements or simple news. Reading Understand notices, signs, menus, or pamphlets written in plain Japanese. Writing Fill out forms, send messages, or post simple updates on social media. ◇Universal Learning Flow # All exercises follow this sequence: ➊ Confirm Can-do Review the exercise’s goal. ➋ Exercise Practice listening/speaking/reading/writing. ➌ Self-Assessment Use the Can-do sheet to evaluate progress and jot down reflections. 🟢 Step-by-Step Guide: 1. Review Can-do Goal 2. Preview Vocabulary 3. Listen/Read (Model Dialogue) 4. Focus on Form ↓ Fill in blanks to observe patterns. ↓ Analyze usage via Grammar Notes. ↓ Reinforce with the Grammar Workbook (optional). 5. Speaking Practice Shadowing or role-play after mastering forms. 6. Can-do Check Reflect and plan next steps. IRODORI prioritizes input-first learning: noticing forms, deducing rules, then applying them. Avoid starting with grammar drills—contextual practice is key.\n❌ Ineffective Approach:\nTeach grammar → Explain via Grammar Notes → Drill with Workbook → Begin exercises. The Grammar Workbook supplements IRODORI but is meaningless without the main textbook’s communicative practice.\n◇Speaking Exercises # Speaking ➊ Confirm Can-do ➋ Vocabulary Prep Learn terms via: 1. Match audio to illustrations 2. Imitate pronunciation 3. Select correct image after listening (linking meaning to form). ➌ Listen to Model Dialogue Focus on gist, not details. Two types: - Short dialogues (no script): Later found in Listening Scripts. - Long dialogues (with script): Read after initial listening. ➍ Focus on Form 1. Notice underlined patterns in dialogues. 2. Answer ❕ questions to deduce rules before checking Grammar Notes. 3. Re-listen to observe usage. ➎ Speaking Practice 1. Listen to model dialogue 2. Shadowing: Repeat with/without scripts. 3. Guided drills (e.g., word substitution) 4. Free conversation: Role-play or personalize. ➏ Self-Assessment ℹ️ Shadowing: Instant repetition of heard phrases, like an echo, to improve fluency.\n◇Listening Exercises # Listening ➊ Confirm Can-do ➋ Vocabulary Prep Same as Speaking. ➌ Listening Task 1. Preview context (setting/purpose). 2. Answer questions while listening (e.g., match images, note keywords). 3. Re-listen after checking new terms (optional). ➍ Focus on Form Analyze new patterns if present. ➎ Self-Assessment ◇Reading Exercises # Reading ➊ Confirm Can-do ➋ Reading Task 1. Preview context. 2. Skim for gist → Scan for details. - Real-life texts lack furigana; guess meanings from context. - Check 🔖 Key Words afterward. ➌ Reflect Compare with personal experiences (optional discussion). ➍ Focus on Form Study patterns via fill-in-blanks (if applicable). ➎ Self-Assessment ◇Writing Exercises # Writing ➊ Confirm Can-do ➋ Writing Task 1. Review context. 2. Read examples (may reuse Reading texts). 3. Write (handwrite or type, as situation demands). 4. Share feedback (peer review for real-world relevance). ➌ Self-Assessment ◇Kanji Vocabulary # Learners practice 429 kanji (across all levels) in context. Goals: recognize meanings in daily life and input via devices (no handwriting required). Steps:\n➊ Check readings/meanings (multiple fonts shown).\n➋ Read in sentences.\n➌ Type on devices (handwriting optional for enthusiasts).\n◇Grammar Notes # Explains patterns from \u0026ldquo;Focus on Form\u0026rdquo; sections. Includes:\nForm/meaning/usage per lesson. Additional examples or comparisons. Part-of-speech labels:\nN = Noun | ナA = ナ-adjective | イA = イ-adjective | V = Verb | S = Sentence. Teachers may use this for explanations or assign as homework. For deeper grammar study, use MARUGOTO’s \u0026ldquo;Rikai\u0026rdquo; series, but stay aligned with Can-do goals.\n◇Japanese Life \u0026amp; Culture # A photo-rich column offering practical tips about Japan. Topics align with lesson themes and cater to learners unfamiliar with Japan. Can be explored independently or in class.\nReference Links:\nIrodori Official Site JF Can-do for Life in Japan Back to the series index\n","date":"28 February 2025","externalUrl":null,"permalink":"/posts/japanese-5-textbook-irodori/","section":"Blog","summary":"Introduces the content features and study recommendations of the Japanese textbook ‘いろどり’.","title":"The Japanese textbook Irodori","type":"posts"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/methods/","section":"Tags","summary":"","title":"Methods","type":"tags"},{"content":"Back to the series index\nIntroduction to Learning Japanese: Efficient Methods # 1. Find a Textbook (Recommended: \u0026ldquo;Minna no Nihongo\u0026rdquo; (みんなの日本語)) # Reasons for Recommendation: Textbooks written by Japanese authors contain errors commonly made by Japanese people, which won\u0026rsquo;t affect your Japanese proficiency in the eyes of native speakers. The key is to choose a textbook that suits you and that you can learn from, rather than one with perfect content. Textbook Structure: Main Book (entirely in Japanese) Teacher\u0026rsquo;s Guide (includes vocabulary lists, Chinese explanations, etc.) 2. Prepare a Repeater or Repeater Software # Functional Requirements: Able to set repeat positions. Preferably has a function for decomposing and memorizing recordings. 3. Pre-class Preparation # 1. Do Not Read the Text First; Start with the Vocabulary and Grammar Explanations # If using \u0026ldquo;Minna no Nihongo,\u0026rdquo; only refer to the Teacher\u0026rsquo;s Guide and avoid the main book content. Also, skip the text translation parts in the Teacher\u0026rsquo;s Guide initially. 2. Memorize Vocabulary and Grammar First # Memorize Vocabulary by Listening to Recordings # Initial Memorization\nListen to the recordings while looking at the vocabulary and explanations, trying to remember a few words. Do not stress; gradually familiarize yourself with the pronunciation, form, conjugations (for verbs), and meanings of the words. Method\nCover the book content, listen to the recordings, recall the words, write them down, and remember their meanings. Create a separate list for words you cannot hear or write correctly and re-memorize them. Repeat the process until you can correctly write and recall the meanings of all words. Once you achieve this, look at the meanings and recall the Japanese words, reading them aloud. To improve speaking, you can also read aloud while listening in the first step. Efficiency Tips\nGradually reduce writing for familiar words. Be able to quickly recall the pronunciation, spelling, and meaning of words at normal playback speed. Enhance Memory and Resist Forgetting # Mindset Forgetting is normal; do not be discouraged. Forgetting indicates a need for reinforcement. Review Strategy Dictate all the week\u0026rsquo;s vocabulary every weekend, recalling meanings quickly (within one second). For forgotten words, create a separate list and review them along with new words the following week. Remove words from the list after two successful reviews. Add words to the list if they cause issues in later steps and review them using the above method. Maintaining this list can significantly improve vocabulary memorization efficiency. 4. After Mastering Vocabulary and Grammar, Dictate the Text # 1. Text Preparation # Do not open the textbook\u0026rsquo;s text section; dictate the text solely through recordings. 2. Dictation Method # First Dictation # Listen continuously without pausing for the first time. Possible scenarios: Understand the general idea but not the details. Understand parts but struggle with certain sections. Completely fail to understand. Solutions # Scenario 1 Reconstruct sentences based on your understanding and known vocabulary and grammar, then check against the recording. Repeatedly listen to or slow down unclear parts until corrected. Scenario 2 Write down understood parts and repeatedly listen to unclear sections, slowing down if necessary. If unable to understand, try writing the kana based on the sound to aid memory. This practice improves kana recognition accuracy, reducing errors common in subtitles. Scenario 3 Continue listening until it transforms into Scenario 1 or 2. If you have listened less than 50 times, do not give up; persist. 3. Check Against the Textbook # This step is crucial; writing is three parts, revising is seven. Do not merely check for correct and incorrect sentences. Analyze Errors Thoroughly: If due to unmemorized vocabulary, add to the forgotten words list for future review. If due to unmastered grammar, revisit the grammar; if still unclear, consult ChatGPT. If due to mishearing, repeatedly listen to the sentence until understood. There is no upper limit to repetitions. For example, long fixed expressions like \u0026ldquo;していただきます\u0026rdquo; are initially challenging but improve with practice. 5. Assessment and Reinforcement of Learning Content # After completing the above steps, clarify the following:\nMastered Content: Through dictation, vocabulary memorization, and text comprehension, identify what you have mastered.\nDeficient Content: Identify areas still problematic, such as vocabulary, grammar, or dictation accuracy.\nHandling Deficiencies # Repeatedly dictate, memorize, and understand until deficiencies are addressed. Meticulously Complete Exercises: Value of Simple Exercises: Word substitution exercises, though simple, effectively reinforce learning. Error Analysis: When checking answers, do not just judge right or wrong; understand: Why the error occurred? Where is the mistake? How to avoid similar mistakes? Record and Summarize: Document all errors, reflect, and improve during weekly reviews. Notes # Avoid Carelessness: Do not dismiss errors as carelessness; it indicates insufficient proficiency. Error Management: Summarize errors into a review checklist for regular gap-filling. Summary # Initially, textbooks are the best dictation materials due to limited knowledge and vocabulary. At a certain level, start dictating anime or Japanese drama content. Online resources with transcribed dialogues can be used for comparison but should not be fully trusted. Carefully discern and, if necessary, seek help from a native speaker. A good friend for language learners Chinese/English/Japanese language exchange bulletin board Without a language environment, even well-dictated content may fade over time. Consider using an MP3 during commutes or waiting times to repeatedly listen to Japanese content, adapting your ears to the language. Just be careful not to miss your stop. 6. Importance of Writing Practice # 1. Writing Schedule # Initial Stage (first two weeks): May struggle to form coherent content; gradually adapt. After Two Weeks: Write at least one essay per week. 2. Writing Content and Methods # Writing Goals: Write what you \u0026ldquo;want to write,\u0026rdquo; not just what you \u0026ldquo;can write.\u0026rdquo; Do not aim for literary excellence; even mundane content is fine as long as you persist. Strategies for Difficulties: Vocabulary: Use a dictionary to find necessary words. Grammar: Boldly use desired grammar, even if mistakes are possible. 3. Correcting Mistakes # Mistakes in writing are part of the learning process. ChatGPT can help correct these errors. 7. Encouraging Yourself # Record Achievements: Set learning goals and reward mechanisms, such as creating badges. Perseverance: No matter how slow the progress, as long as you do not stop, you are doing well. Avoid cramming for \u0026ldquo;false achievements\u0026rdquo;; real ability is what matters. There is no method that yields results without effort. But there are enjoyable methods that involve effort without pain. Wishing you success in your studies! Learning Japanese is a marathon; persistence is key. With patience and confidence, you will surely reap rewards! 🌟 # Back to the series index\n","date":"27 February 2025","externalUrl":null,"permalink":"/posts/japanese-4-methods/","section":"Blog","summary":"Sharing practical tips and methods to improve Japanese learning efficiency.","title":"The Methods for Learning Japanese","type":"posts"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/grammar/","section":"Tags","summary":"","title":"Grammar","type":"tags"},{"content":"Back to the series index\nOrganic Japanese with Cure Dolly\u0026rsquo;s Japanese from scratch: the game-changing course in organic Japanese - YouTube playlist uses unique analogies (like the “sentence train”) and in-depth explanations of core concepts to help learners understand the inner logic of Japanese.\nBelow is my professional, detailed, and complete set of notes and structured summary for Lessons [1] through [93], based on the Organic Japanese with Cure Dolly YouTube playlist. The notes follow the course order, distilling key grammar points, vocabulary, and example sentences for each lesson, while preserving the course’s unique teaching philosophy.\n★ Core Notes for Japanese from Scratch Course (Lessons 1–93) # The notes are divided into key sections to reflect the course’s progressive structure:\nPart 1: Core Sentence Structure and Basic Particles (Lessons 1–20) Part 2: Verbs, Adjectives, and Tenses (Lessons 21–45) Part 3: Complex Sentences and Advanced Particle Usage (Lessons 46–70) Part 4: Advanced Grammar and Expressions (Lessons 71–93) ★ Part 1: Core Sentence Structure and Basic Particles (Lessons 1–20) # This section lays the foundation for the course, explaining the basic structure of Japanese sentences, the core particles が, は, も, and の, and how to express location, time, and tools.\n◇ [1–2] Core Sentence Structure # Core Concept: The Sentence Train All Japanese sentences consist of A (Subject/Main Carriage) and B (Predicate/Engine). A が B is the most basic sentence form. が is the “pin” linking the subject to the predicate. Three Basic Sentence Types: A does B (Verb Sentence): A が [verb ending in u] Example: さくら が あるく (Sakura ga aruku) – Sakura walks. A is B (Noun Sentence): A が [noun] だ だ (da) is the copula, like “is”. Example: さくら が 日本人(にほんじん) だ – Sakura is Japanese. A is B (Adjective Sentence): A が [i-adjective] i-adjectives contain the meaning of “is” inherently—だ is not needed. Example: ペン が あかい – The pen is red. Core Concept: Invisible Subject (Zero Pronoun) When context is clear, the subject A が is often omitted but still exists logically. Very common in spoken and written Japanese. Example: ケーキ を 食べる – Eat cake. (“I” or “you” is implied.) Particle を (o): Marks the direct object of a verb. Example: 私 が ケーキ を 食べる – I eat cake. ◇ Super Basic Japanese Vocabulary List # This list contains the most basic vocabulary for beginner learners, useful for building “A is B” and “A does B” sentences. Includes hiragana, romaji, and Chinese/English meanings.\nNouns\nうさぎ (usagi) = rabbit 兔子 ひと (hito) = person 人 こ (ko) = child 孩子 とり (tori) = bird 鸟 おんな の ひと (onna no hito) = woman 女人 おんな の こ (onna no ko) = girl 女孩 おとこ の ひと (otoko no hito) = man 男人 おとこ の こ (otoko no ko) = boy 男孩 にほんじん (Nihonjin) = Japanese person 日本人 あめりかじん (Amerikajin) = American person 美国人 ふらんすじん (Furansujin) = French person 法国人 ぱん (pan) = bread (same as Spanish) 面包 (Free gifts!)\nぺん (pen) = pen 钢笔 あいすくりーむ (aisu kuriimu) = ice cream 冰淇淋 たくしー (takushii) = taxi 出租车 けーき (keeki) = cake 蛋糕 Verbs\nあるく (aruku) = walk 走路，步行 とぶ (tobu) = jump/fly 跳跃/飞行 うたう (utau) = sing 唱歌 Adjectives\nあかい (akai) = red 红色的 あおい (aoi) = blue 蓝色的 うれしい (ureshii) = happy 高兴的，愉快的 おいしい (oishii) = tasty, delicious 好吃的，美味的 おもしろい (omoshiroi) = interesting, amusing 有趣的，好玩的 Study Tips\nPrioritize hiragana: Beginners should focus on mastering hiragana first. Gradual progression: After basics, move on to kanji and katakana. Practice sentences: Use these words to form simple sentences. Pronunciation: Use romaji to help practice correct pronunciation. ◇ [3–5] Core Particles は (wa) and も (mo) # Particle は (wa): Topic Marker は marks the “thing we’re talking about”—it pulls an element out of the sentence as the topic or context. は overrides が and を, but not other particles. X は Y が Z is a very common structure, meaning “As for X, Y is Z.” Example: 象(ぞう) は 鼻(はな) が 長(なが)い (zou wa hana ga nagai) – As for elephants, (their) noses are long. Particle も (mo): \u0026ldquo;Also / Too\u0026rdquo; Marker も indicates sameness or similarity to the previous statement. Like は, it overrides が and を. Example: 私 が 行く。あなた も 行く。 – I will go. You will go too. Example: ケーキ を 食べる。クッキー も 食べる。 – I eat cake. I also eat cookies. ◇ [6–10] Particle の (no) — Possession \u0026amp; Nominalization # Particle の (no): Possession and Descriptive Marker Most commonly used to indicate possession: X の Y = Y of X. Example: 私 の 猫 – My cat. Nominalization with の: Turns a verb or adjective phrase into a noun-like “thing.” Example: 赤い の が 好き – I like the red one. Replacing が with の in embedded clauses: Makes the tone softer or more explanatory. 私 が 行く → 私 の 行く... – the place “I go to”\u0026hellip; ◇ [11–20] Location, Direction, and Tool Particles # Particle に (ni): Static Location: With いる / ある to express existence. 猫 が 箱 に いる – The cat is in the box. Destination / Goal: Where the action goes. 東京 に 行く – Go to Tokyo. Specific Time: When something happens. 三時 に 会う – Meet at 3 o\u0026rsquo;clock. Particle へ (e): Directional Marker Similar to に, but emphasizes direction more than arrival. 東京 へ 行く – Heading toward Tokyo. Particle で (de): Action Location: Where an action takes place. レストラン で 食べる – Eat at a restaurant. Means / Tool / Material: バス で 行く – Go by bus. 木 で 作る – Made with wood. Particles から (kara) \u0026amp; まで (made): から: from (starting point) まで: to/until (end point) 家 から 学校 まで – From home to school ★ Part 2: Verbs, Adjectives, and Tenses (Lessons 21–45) # This section dives into the classification and conjugation of verbs and adjectives, and how to express tenses and negation.\n◇ [21–30] Verb Groups and the て-Form # Verb Groups:\nRu-verbs (Group 2): End in る, preceded by an i or e sound. e.g., 食べる, 見る. U-verbs (Group 1): All other verbs. e.g., 歩く, 話す, 待つ. Irregular Verbs: する, 来る. て-form (te-form): Essential for combining actions, requests, permissions, and more.\nRu-verbs: drop る + て: 食べる → 食べて\nU-verbs: various sound shifts:\nく/ぐ → いて/いで: 歩く → 歩いて う/つ/る → って: 待つ → 待って ぬ/ぶ/む → んで: 飲む → 飲んで す → して: 話す → 話して Irregular: する → して, 来る → 来て\nUses of て-form:\nLink actions: 起きて、ご飯を食べて、学校へ行く Requests: 待ってください – Please wait. Ongoing actions: 食べている – Is eating. Manner / Means: 歩いて行く – Go on foot. ◇ [31–40] Adjective Types and Conjugation # I-adjectives:\nNegative: 赤い → 赤くない Past: 赤い → 赤かった Past Negative: 赤い → 赤くなかった Te-form: 安くて、おいしい Na-adjectives:\nAs noun modifier: [na-adj] な [noun]: きれいな 花 As predicate: [na-adj] だ: 花 が きれい だ Negative: きれいじゃない Past: きれいだった Te-form: きれいで、静かだ ◇ [41–45] Verb Tense and Negation # Masu-form (Polite):\nRu-verbs: 食べる → 食べます U-verbs: 歩く → 歩きます Plain vs Polite Forms:\nThe course focuses on plain form first, as it\u0026rsquo;s essential for grammar foundations. Nai-form (Negative):\nRu-verbs: 食べる → 食べない U-verbs: 歩く → 歩かない Irregular: する → しない, 来る → 来ない Ta-form (Past):\nSame pattern as te-form, but with た/だ instead of て/で 食べて → 食べた, 歩いて → 歩いた ★ Part 3: Complex Sentences and Advanced Particle Usage (Lessons 46–70) # ◇ [46–50] Compound and Embedded Sentences # Compound Sentences with て-form:\nLinks sequential actions: 起きて、顔を洗って、朝ごはんを食べた。 Can express cause or manner depending on intonation/context. Quoting with と:\nと 言う: “say that…” → 先生 が 来る と 言った – (Someone) said that the teacher is coming. と 思う: “think that…” → 明日 は 雨 だ と 思う – I think it will rain tomorrow. と 聞いた: “heard that…” → 彼 が 来ない と 聞いた – I heard he won’t come. Using こと and の for Nominalization:\n～こと: Turns a verb phrase into a noun (more abstract/formal).\n泳ぐ こと が 好き – I like swimming. ～の: More casual or descriptive nominalization.\n彼 が 来る の は 明日 – It’s tomorrow that he’s coming. ◇ [51–55] Giving and Receiving Verbs # あげる / くれる / もらう:\nあげる: to give (speaker gives to others or others give to others) くれる: to give (someone gives to speaker or in-group) もらう: to receive Action Verb Example I give to you あげる 私は あなた に 本 を あげる You give to me くれる あなた は 私 に 本 を くれる I receive もらう 私は あなた に 本 を もらう ～て あげる / て くれる / てもらう:\nGiving/receiving actions, not objects.\n手伝って あげる – I help (you). 説明して くれる – (They) explain (to me). 説明して もらった – I was explained to. ◇ [56–60] Desire, Intention, and Suggestions # たい-form (want to do):\n食べたい, 行きたい – want to eat/go Uses を instead of が: ケーキ が 食べたい → ケーキ を 食べたい ～たがる (3rd person wants):\n彼 は 行きたがっている – He seems to want to go. Volitional Form (let’s / I shall):\nU-verbs: 行く → 行こう Ru-verbs: 食べる → 食べよう Irregular: する → しよう, 来る → 来よう Example: 映画 を 見よう – Let’s watch a movie. ～つもり (intend to do):\n勉強する つもり です – I intend to study. ◇ [61–65] Comparisons and Superlatives # より / ほど:\nX は Y より 高い – X is taller than Y. X は Y ほど 高くない – X is not as tall as Y. のほうが / より:\nEmphasizes preference or direction.\n犬 の ほうが 好き – I prefer dogs. 一番 (いちばん):\nSuperlative: 一番 高い 山 – the tallest mountain. ◇ [66–70] Conditional Forms and Hypotheticals # ～たら (if / when):\nVerb past + ら: 行ったら, 雨 だったら Used for real conditions and outcomes. ～ば form:\nConditional using base verb + ば\n食べれば, 行けば, 高ければ More formal/logical sounding than たら.\nなら:\nAssumptive conditional (based on topic or supposition)\n行く なら 早く して – If you’re going, hurry. と:\nNatural consequence (like a rule or law)\n春 に なる と 暖かく なる – When it becomes spring, it becomes warm. ★ Part 4: Advanced Grammar and Expressions (Lessons 71–93) # ◇ [71–75] Passive and Causative Forms # Passive Form (someone is acted upon):\nRu-verbs: 食べる → 食べられる U-verbs: 書く → 書かれる 私は 先生 に 褒められた – I was praised by the teacher. Causative Form (make/let someone do):\nRu-verbs: 食べる → 食べさせる U-verbs: 行く → 行かせる 母 は 子供 を 勉強させた – The mother made the child study. Causative-Passive (be made to do):\n食べさせられる, 行かされる – I was made to eat/go ◇ [76–80] Honorific and Humble Expressions # Honorific Verbs (respectful):\nいらっしゃる, なさる, 召し上がる, ご覧になる Humble Verbs (lower self):\n参る, いたす, いただく, 申す Use with keigo forms:\n先生 は お帰り に なりました 私 が いたします ◇ [81–85] Formal Written Language Patterns # ～のだ / ～んだ:\nAdds explanatory nuance: どうして 行かない の？ – Why aren’t you going? ～ようだ / ～みたいだ:\nResemblance or appearance: 雨 の ようだ – Seems like rain. ～そうだ:\nLooks like: 美味しそう Hearsay: 雨 が 降る そうだ – I heard it will rain ◇ [86–93] Idiomatic Phrases and Natural Expressions # ～てしまう:\nCompletion or regret: 食べてしまった – I (accidentally) ate it all. ～ながら:\nWhile doing: 音楽 を 聞きながら 勉強する ～ことがある / ～こともある:\nThere are times when: 遅れる こと が ある ～ようにする / ～ようになる:\nTry to do / become able to do: 忘れない ようにする – Try not to forget ～ばかり:\nOnly / just: 食べて ばかり いる Back to the series index\n","date":"26 February 2025","externalUrl":null,"permalink":"/posts/japanese-3-core/","section":"Blog","summary":"A structured overview of core grammar and sentence patterns to help beginners build a solid foundation in Japanese.","title":"Japanese Grammar and Sentence Structure","type":"posts"},{"content":"Back to the series index\n★Vowels and Consonants # 5 Basic Vowels: /a/, /i/, /u/, /e/, /o/\nCharacteristics of Vowels:\nPure Pronunciation:\nJapanese vowels are pronounced clearly, without the vowel reduction seen in English (e.g., the \u0026ldquo;schwa\u0026rdquo; sound /ə/). No Diphthongs:\nJapanese does not have true diphthongs, but similar effects can be achieved by vowel sequences (e.g., 「あい」/ai/). Long and Short Vowel Contrast:\nJapanese has a contrast between long and short vowels, with long vowels indicated by extending the vowel duration (e.g., 「おお」/oː/ vs. 「お」/o/). 14 Basic Consonants: /k/, /s/, /t/, /n/, /h/, /m/, /y/, /r/, /w/, /g/, /z/, /d/, /b/, /p/\nCharacteristics of Consonants:\nVoiced and Voiceless Contrast:\nVoiceless (unvoiced) sounds: e.g., 「か」(ka), 「さ」(sa), 「た」(ta).\nVoiced sounds: e.g., 「が」(ga), 「ざ」(za), 「だ」(da). Semi-Voiced Sounds:\nSemi-voiced sounds are aspirated variants of voiceless sounds, e.g., 「ぱ」(pa), 「ぴ」(pi), 「ぷ」(pu), 「ぺ」(pe), 「ぽ」(po). Consonant Weakening:\nIn some cases, consonants are weakened. For example, 「は」(ha) is pronounced as /wa/ when used as a particle. Lack of Certain Consonants:\nJapanese lacks certain consonants found in English, such as /th/, /v/, /f/. ◇Hiragana # n w- r- y- m- h- n- t- s- k- ん\n(n) わ ら や ま は な た さ か あ -a ゐ* り み ひ に ち\n(chi) し\n(shi) き い -i る ゆ む ふ\n(fu) ぬ つ\n(tsu) す く う -u ゑ* れ め へ ね て せ け え -e を\n(o) ろ よ も ほ の と そ こ お -o * = No longer used.\nHiragana is the basic phonetic unit of Japanese, capable of writing all Japanese words. However, since written Japanese does not use spaces, using only Hiragana can make text difficult to read.\nFollow stroke order to ensure smooth writing and avoid developing bad habits.\n「ん」 is the only kana without a vowel.\n「し」(shi), 「ち」(chi), 「つ」(tsu) have pronunciations different from the general consonant + vowel pattern.\n「r」 sound requires the tongue to touch the roof of the mouth.\n「tsu」 vs. 「su」 distinction.\n◇Katakana # n w- r- y- m- h- n- t- s- k- ン\n(n) ワ ラ ヤ マ ハ ナ タ サ カ ア -a ヰ* リ ミ ヒ ニ チ\n(chi) シ\n(shi) キ イ -i ル ユ ム フ\n(fu) ヌ ツ\n(tsu) ス ク ウ -u ヱ* レ メ ヘ ネ テ セ ケ エ -e ヲ*\n(o) ロ ヨ モ ホ ノ ト ソ コ オ -o * No longer used or rarely used.\nKatakana is primarily used for:\nLoanwords (e.g., コンピュータ - computer)\nEmphasis (similar to italics in English)\nOnomatopoeia (e.g., ドキドキ - heartbeat)\nSpecial purposes (e.g., biological names, brand names)\nKatakana pronunciations are identical to their Hiragana counterparts, only the writing differs. Loanwords must adapt to the Japanese [consonant + vowel] structure, which may alter their original pronunciation. For example, the English word \u0026ldquo;coffee\u0026rdquo; is written as 「コーヒー」(kōhī) in Japanese.\nWhen learning Katakana, it is essential to memorize the Japanese pronunciation rather than the original English pronunciation to avoid misunderstandings.\n◇Katakana Spelling Rules # When converting English words into Katakana, the following rules apply:\nNo distinction between L/R: Japanese does not distinguish between L and R, both are represented by the 「ラ」 row.\nReady → レディ Lady → レディ\nLong vowels: Consecutive vowels or words ending with /r/ are often converted into long vowels (ー).\nTarget → ターゲット\nShoot → シュート\nSokuon (small ッ): Used to represent a glottal stop or a doubled consonant.\nCatch → キャッチ\nCache → キャッシュ\nAdding vowels to consonant endings: Japanese words end with vowels (except for \u0026ldquo;n\u0026rdquo; and \u0026ldquo;m\u0026rdquo; due to 「ン」), so for \u0026ldquo;t\u0026rdquo; and \u0026ldquo;d\u0026rdquo;, \u0026ldquo;o\u0026rdquo; is usually added; for others, \u0026ldquo;u\u0026rdquo; is typically added:\nGood → グッド\nTop → トップ\nJack → ジャック\n◇Voiced and Semi-Voiced Sounds (Consonant Variants) # p- b- d- z- g- ぱ ば だ ざ が -a ぴ び ぢ\n(ji) じ\n(ji) ぎ -i ぷ ぶ づ\n(dzu) ず ぐ -u ぺ べ で ぜ げ -e ぽ ぼ ど ぞ ご -o Voiced Sounds: Formed by adding a dakuten (゛) to the kana, e.g.,\nか → が (ka → ga)\nさ → ざ (sa → za)\nSemi-Voiced Sounds: Formed by adding a handakuten (゜) to the kana, used only with the 「は」 row:\nは → ぱ (ha → pa)\nひ → ぴ (hi → pi)\n★Special Phonemes # Japanese has some special phonemes that do not belong to vowels or consonants but play an important role in pronunciation.\n◇Moraic Nasal: /N/ # The moraic nasal is usually written as 「ん」 and sounds like a nasal, but its exact pronunciation varies depending on the following phoneme. For example:\nIn 「さん」(san), /N/ is pronounced as /n/.\nIn 「しんぶん」(shinbun), /N/ is pronounced as /m/.\nIn 「りんご」(ringo), /N/ is pronounced as /ŋ/ (similar to the English \u0026ldquo;ng\u0026rdquo; sound).\n◇Gemination: /Q/ # Gemination is written as 「っ」 and represents the lengthening or doubling of a consonant. For example:\n「かった」(katta) uses 「っ」 to lengthen the /t/ sound.\n「きっぷ」(kippu) uses 「っ」 to lengthen the /p/ sound.\n◇Long Vowels # Long vowels are represented by extending the vowel sound, usually written as 「ー」 or by repeating the vowel. For example:\n「おおきい」(ookii) uses 「おお」 to extend the /o/ sound.\n「コーヒー」(koohii) uses 「ー」 to extend the vowel sound.\nVowel Kana Used for Lengthening /a/ あ /i/, /e/ い /u/, /o/ う Lengthen the pronunciation by adding the corresponding vowel after the kana.\nThe principle of long vowels is simple; try pronouncing 「か」 and 「あ」 separately, then quickly combine them. Soon, you\u0026rsquo;ll notice that it feels like extending the /ka/ sound. When pronouncing long vowels, remember that you are essentially pronouncing two sounds.\n「ここ」(koko, here) vs. 「こうこう」(koukou, high school)\n「おばさん」(obasan, aunt) vs. 「おばあさん」(obaasan, grandmother)\nIn rare cases, the /e/ vowel is lengthened with 「え」, and the /o/ vowel is lengthened with 「お」. Examples include 「おねえさん」、「おおい」, and 「おおきい」. Be aware of these exceptions, though they are few.\nIn Katakana, long vowels are represented by 「ー」 without additional kana.\nExamples:\nツアー (tsu-a) → tour\nメール (me-ru) → email\nケーキ (ke-ki) → cake\n★Yōon (Palatalized Sounds) # Yōon are sounds formed by combining a consonant with /y/, usually written with small 「ゃ」「ゅ」「ょ」.\nThese sounds are very common in Japanese, especially in loanwords and compound words.\np- b- j- g- r- m- h- n- c- s- k- ぴゃ びゃ じゃ\n(ja) ぎゃ りゃ みゃ ひゃ にゃ ちゃ\n(cha) しゃ\n(sha) きゃ -ya ぴゅ びゅ じゅ\n(ju) ぎゅ りゅ みゅ ひゅ にゅ ちゅ\n(chu) しゅ\n(shu) きゅ -yu ぴょ びょ じょ\n(jo) ぎょ りょ みょ ひょ にょ ちょ\n(cho) しょ\n(sho) きょ -yo Combine small kana 「ゃ」「ゅ」「ょ」 with /i/ column kana to form new sounds, e.g.,\nき + ゃ = きゃ (kya)\nし + ゅ = しゅ (shu)\nち + よ = ちょ (cho)\n★Extended Syllables for Loanwords # Extended syllables are additional phonemes introduced to accommodate loanwords, not part of traditional Japanese phonology. They include:\nSmall kana: e.g., 「ァ、ィ、ゥ、ェ、ォ」\nAdditional consonants: e.g.,\n/v/ → ヴァ、ヴィ、ヴ、ヴェ、ヴォ、\n/f/ → ファ、フィ、フ、フェ、フォ、\n/ti/ → ティ、\n/di/ → ディ, etc.\nThese syllables are primarily used in loanwords, not native Japanese words.\nv- w- f- ch- d- t- j- sh- ヴァ ワ ファ チャ ダ タ ジャ シャ (-a) ヴィ ウィ フィ チ ディ ティ ジ シ (-i) ヴ ウ フ チュ ドゥ トゥ ジュ シュ (-u) ヴェ ウェ フェ チェ デ テ ジェ シェ (-e) ヴォ ウォ フォ チョ ド ト ジョ ショ (-o) Note:\n/wu/ sound does not exist:\nJapanese does not have a /wu/ sound, so loanwords like \u0026ldquo;woman\u0026rdquo; are written as 「ウーマン」(u-man).\n/tu/ sound spelling:\nAlthough modern Japanese uses 「トゥ」 for /tu/ (e.g., 「トゥデイ」\u0026ldquo;today\u0026rdquo;), older loanwords still use 「ツ」 (e.g., 「ツール」\u0026ldquo;tool\u0026rdquo;).\nEarly loanword spelling rules:\nFor example, \u0026ldquo;building\u0026rdquo; was originally written as 「ビルヂング」(birudingu), but modern usage writes it as 「ビルディング」(birudingu), reflecting the standardization of loanword spelling in Japanese.\nExamples:\n/v/ sound: 「ヴァイオリン」(violin)\n/f/ sound: 「ファミリー」(family)\n/ti/ and /di/ sounds: 「ティー」(tea), 「ディズニー」(Disney)\nLoanword Syllable Japanese Spelling Example /va/ ヴァ ヴァイオリン（violin） /wa/ ワ ワイン（wine） /fa/ ファ ファミリー（family） /cha/ チャ チャンス（chance） /da/ ダ ダンス（dance） /ta/ タ タクシー（taxi） /ja/ ジャ ジャズ（jazz） /sha/ シャ シャツ（shirt） ★Phonological Rules # Japanese phonological rules refer to the regular changes in pronunciation and phoneme combinations in Japanese. These rules affect not only the pronunciation of individual words but also the connection and transformation between words.\nJapanese phonological rules include:\nRendaku: Voicing of the initial consonant of the second word in a compound. Euphonic Changes: Changes in pronunciation for ease of articulation. Pitch Accent Rules: Each word has a specific pitch pattern. Vowel Devoicing: High vowels /i/ and /u/ become voiceless under certain conditions. Gemination: Consonant lengthening or doubling. Loanword Phonological Rules: Loanwords are adjusted according to Japanese phonology. ◇1. Rendaku # Rendaku is a common phonological phenomenon in Japanese where the initial consonant of the second word in a compound becomes voiced.\nRules:\nWhen two words combine to form a compound, the initial consonant of the second word may become voiced.\nVoiced consonants include: /k/ → /g/, /s/ → /z/, /t/ → /d/, /h/ → /b/.\nExamples:\n「て」(te) + 「かみ」(kami) → 「てがみ」(tegami, letter)\n「はな」(hana) + 「ち」(chi) → 「はなぢ」(hanaji, nosebleed)\n「おお」(oo) + 「とり」(tori) → 「おおどり」(oodori, large bird)\nExceptions:\nNot all compounds undergo rendaku. For example:\n「き」(ki) + 「かみ」(kami) → 「きかみ」(kikami, tree god) (no voicing)\n◇2. Euphonic Changes # Euphonic changes refer to changes in pronunciation for ease of articulation. These changes are mainly divided into the following types:\n（1）I-onbin # In the conjunctive form of verbs, /ki/ or /gi/ changes to /i/.\nExamples:\n「かく」(kaku, write) → 「かいて」(kaite, writing)\n「いそぐ」(isogu, hurry) → 「いそいで」(isoide, hurrying)\n（2）N-onbin # In the conjunctive form of verbs, /mu/, /bu/, /nu/ change to the moraic nasal 「ん」.\nExamples:\n「よむ」(yomu, read) → 「よんで」(yonde, reading)\n「あそぶ」(asobu, play) → 「あそんで」(asonde, playing)\n（3）Sokuonbin # In the conjunctive form of verbs, /tu/ or /ru/ changes to the geminate consonant 「っ」.\nExamples:\n「もつ」(motsu, hold) → 「もって」(motte, holding)\n「とる」(toru, take) → 「とって」(totte, taking)\n◇3. Pitch Accent Rules # Japanese is a pitch accent language, meaning each word has a specific pitch pattern. The pitch accent rules are as follows:\n（1）Pitch Types # Heiban (Flat): The first syllable is low, and subsequent syllables are high.\nExample: 「はし」(hashi, bridge) → low-high\nAtamadaka (Head-high): The first syllable is high, and subsequent syllables are low.\nExample: 「はし」(hashi, chopsticks) → high-low\nNakadaka (Middle-high): The first syllable is low, the middle syllable is high, and the last syllable is low.\nExample: 「さかな」(sakana, fish) → low-high-low\n（2）Pitch Changes # Pitch changes with the addition of particles or word endings. For example:\n「はし」(hashi, bridge) + 「が」(ga) → 「はしが」(hashiga, bridgeが) → low-high-low\n「はし」(hashi, chopsticks) + 「が」(ga) → 「はしが」(hashiga, chopsticksが) → high-low-low\n◇4. Vowel Devoicing # In certain situations, Japanese vowels become voiceless (almost silent), especially when high vowels /i/ and /u/ are followed by voiceless consonants.\nRules:\nHigh vowels /i/ and /u/ may become voiceless when between voiceless consonants (e.g., /k/, /s/, /t/, /h/) or at the end of a word.\nExamples:\n「です」(desu) → /des/ (「u」 becomes voiceless)\n「きく」(kiku, listen) → /kik/ (「u」 becomes voiceless)\n◇5. Gemination # Gemination refers to the lengthening or doubling of consonants, represented by the geminate consonant 「っ」.\nRules:\nIn compounds or verb conjugations, consonants may undergo gemination.\nExamples:\n「いっぽん」(ippon, one long object) → /Q/ represents the lengthening of /p/\n「きって」(kitte, stamp) → /Q/ represents the lengthening of /t/\n◇6. Loanword Phonological Rules # When Japanese absorbs loanwords, they are adjusted according to Japanese phonological rules:\n（1）Vowel Insertion # Japanese does not allow consonant clusters, so vowels are inserted between consonants.\nExamples:\n“strike” → 「ストライク」(sutoraiku)\n“McDonald” → 「マクドナルド」(makudonarudo)\n（2）Consonant Substitution # Japanese lacks certain consonants (e.g., /v/, /f/), so similar sounds are used instead.\nExamples:\n“video” → 「ビデオ」(bideo)\n“coffee” → 「コーヒー」(koohii)\n◇7. Historical Phonological Rules # Japanese phonology has undergone several changes throughout history, such as:\nOld Japanese: Had more vowels and consonants, such as 「ゐ」(wi) and 「ゑ」(we).\nMiddle Japanese: Vowels and consonants gradually simplified, forming the basis of modern Japanese.\nModern Japanese: Further simplification, incorporating loanword phonemes (e.g., 「ティ」(ti), 「ファ」(fa)).\n★Kanji # ◇Rules for Reading Kanji # On\u0026rsquo;yomi (音読み) and Kun\u0026rsquo;yomi (訓読み)\nEssentially, each kanji has two reading methods:\nOn\u0026rsquo;yomi (音読み): Derived from Chinese readings, mainly used in compound words (熟語).\nKun\u0026rsquo;yomi (訓読み): Native Japanese readings, typically used when the kanji appears alone.\nExamples:\nKanji Kun\u0026rsquo;yomi On\u0026rsquo;yomi Example Word 力 ちから りょく 能力（のうりょく） Some kanji may have multiple on\u0026rsquo;yomi or kun\u0026rsquo;yomi readings, e.g., 「怪力」（かいりき） reads 「りき」 instead of 「りょく」.\n◇Okurigana (送り仮名) # In verbs and adjectives, kanji are often followed by hiragana, known as okurigana. For example:\nVerbs: 「食べる」（たべる, eat）→「食べた」（たべた, ate） Adjectives: 「新しい」（あたらしい, new） Functions of Okurigana:\nDistinguish different word types (intransitive vs. transitive verbs). Indicate word inflections (tense, voice, etc.). ◇Sound Changes (Onbin) # Kanji in compound words may undergo sound changes for smoother pronunciation. For example:\n/h/ → /b/ or /p/: 一本（いっぽん） 徹底（てってい） 「つ」 becomes 「っ」: 格好（かっこう） ◇Distinctions Between Similar Kanji # Some kanji with similar meanings express subtle differences in different contexts. For example:\nDifferent Expressions for \u0026ldquo;Listen\u0026rdquo;\n聞く（きく）：General \u0026ldquo;listen\u0026rdquo; or \u0026ldquo;ask\u0026rdquo;. 聴く（きく）：Specifically \u0026ldquo;listen attentively\u0026rdquo;, e.g., listening to a concert. 訊く（きく）：Only \u0026ldquo;inquire\u0026rdquo;. Different Expressions for \u0026ldquo;See\u0026rdquo;\n見る（みる）：General \u0026ldquo;see\u0026rdquo;. 観る（みる）：Watch a performance, movie. Differences Between \u0026ldquo;Write\u0026rdquo; and \u0026ldquo;Draw\u0026rdquo;\n書く（かく）：Write. 描く（かく）：Draw. 描く（えがく）：Depict (abstract scenes). ◇々——Repetition Symbol # Japanese has a special symbol 「々」, used to repeat the preceding kanji, for example:\n時時 → 時々（ときどき） 様様 → 様々（さまざま） 色色 → 色々（いろいろ） 一一 → 一々（いちいち） Back to the series index\n","date":"25 February 2025","externalUrl":null,"permalink":"/posts/japanese-2-kana/","section":"Blog","summary":"Introduces the structure, pronunciation, and learning techniques of Japanese kana to help build a solid foundation.","title":"Japanese Kana","type":"posts"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/kana/","section":"Tags","summary":"","title":"Kana","type":"tags"},{"content":"Back to the series index\nJapanese pronunciation involves pitch accents that are categorized into high and low tones. When pronouncing words, it is important to check whether there is a drop point (a place where the pitch suddenly falls). For words with a drop point, each has its own specific position for that drop. Different pitch patterns require different pronunciation methods.\nWhen a word has a drop point, it is indicated by the symbol \u0026ldquo;↓\u0026rdquo;.\nWhen a word has no drop point, it is marked with the symbol \u0026ldquo;○\u0026rdquo; at the end.\n★Pronunciation When Reading Words # When reading a word, start with a low pitch and then gradually raise it. Maintain a high pitch until you encounter the ↓ symbol; at that point, the pitch drops. For words without a drop point (marked with ○), maintain a high pitch all the way to the end.\nIf the ↓ symbol appears on the very first mora of the word, start with a high pitch, then immediately lower it.\nIf the ↓ symbol appears at the end of the word, the pitch drops after that point. When reading the word alone, its pronunciation is the same as that of a word without a drop point. The audio includes both the standalone pronunciation and the version followed by \u0026ldquo;～です.\u0026rdquo;\nSome words have a pause in the middle, after which the pitch rises again. In this case, the pause is marked with △.\nWhen a single word can be pronounced in two acceptable ways, both options are listed separated by \u0026ldquo;／.\u0026rdquo;\n★Pronunciation in Sentences # When reading a sentence, start with a low pitch and gradually raise it. Maintain the high pitch until reaching the ↓ symbol, at which point the pitch begins to fall.\nIf a sentence has two or more drop points, the pitch drop at the first ↓ is larger, while subsequent drops are smaller.\nIf there is a pause in the sentence or a segment you want to emphasize (the focus part), the pitch rises again from that point.\nIn yes-no or interrogative sentences, the pitch rises at the end.\nPitch accent significantly influences the overall intonation of a sentence.\n★How to Practice Pitch Accent # When listening to audio, pay attention to the pitch patterns of each word. Then look at the pitch markings to confirm where the drop occurs. Think about how these pitch differences affect pronunciation.\nWhen shadowing, be mindful of pitch changes as you mimic the sounds.\nAs you gradually understand the relationship between pitch and pronunciation, try to pay attention to pitch even when speaking sentences you create yourself.\nIf you can focus on pitch first and then speak, your pronunciation will sound more natural and easier to understand.\nBack to the series index\n","date":"24 February 2025","externalUrl":null,"permalink":"/posts/japanese-1-accent/","section":"Blog","summary":"An introduction to the basic rules of Japanese pitch accent and its importance in language expression.","title":"Japanese Pitch Accent","type":"posts"},{"content":"","date":"24 February 2025","externalUrl":null,"permalink":"/tags/pitch-accent/","section":"Tags","summary":"","title":"Pitch Accent","type":"tags"},{"content":" ★A Few Reminders at the Beginning # ◇About \u0026ldquo;Essence\u0026rdquo; # First, remember that language is not \u0026ldquo;learned\u0026rdquo; through conscious study, but is \u0026ldquo;acquired\u0026rdquo; naturally through use and immersion. It is not static knowledge, but dynamic practice. In the process of language learning, there is no absolute \u0026ldquo;know\u0026rdquo; or \u0026ldquo;don\u0026rsquo;t know\u0026rdquo;—only ever-deepening understanding and application.\nThe optimal solution for language learning is to spend most of your time engaging with language content, understanding and trying to express, and only a small portion of time on memorizing words and grammar.\n◇About \u0026ldquo;Traps\u0026rdquo; # A common pitfall in language learning: staying with beginner resources for too long and fearing to enter the real language environment, thinking you should \u0026ldquo;be ready\u0026rdquo; before practicing.\nHowever, language learning is like climbing a mountain: just weaving ropes (studying theory) won\u0026rsquo;t get you to the summit; only actual climbing (practical use) leads to mastery. Early exposure to real contexts enables you to adapt and improve your comprehension quickly.\n◇About \u0026ldquo;Immersion\u0026rdquo; # The breadth and complexity of language far exceed what classrooms or apps can teach. These methods often try to teach language using formulas like \u0026ldquo;X equals Y\u0026rdquo; or \u0026ldquo;X is used for Y,\u0026rdquo; but this is not enough for learners to reach a high level.\nTherefore, the core of language learning is \u0026ldquo;immersion\u0026rdquo;—that is, as much reading of native content and listening to native speakers as possible.\nLanguage acquisition is essentially the process of subconsciously remembering language patterns through comprehensible input. When you encounter understandable content during immersion, your brain automatically stores these patterns for future retrieval and use.\nTechnically, this is called \u0026ldquo;input,\u0026rdquo; but I prefer the term \u0026ldquo;immersion.\u0026rdquo;\nWhen you are familiar enough with a language, all of this becomes almost effortless. You not only understand the meaning of words, but also the logical relationships between sentences, and can even sense the tone and formality of an article—all thanks to your brain continually storing and recalling language patterns encountered in your reading.\nNotice, I did not mention \u0026ldquo;mastering grammar\u0026rdquo; or \u0026ldquo;memorizing vocabulary.\u0026rdquo; Because using a language does not depend on consciously analyzing grammar rules, but on extensive immersion and intuitive response. Many non-native speakers may have studied grammar, but when they encounter the language in daily life, their understanding does not rely on actively recalling rules, but on the natural cognitive patterns formed through long-term accumulation.\n★Three Core Skills of Language Comprehension # ◇Phoneme Discrimination (Bottom-Up) # Different languages have very different sound systems. For example, English speakers learning Chinese may find it hard to distinguish \u0026ldquo;yīng\u0026rdquo; (eagle) and \u0026ldquo;yīn\u0026rdquo; (sound). Even if they have learned the theory, their brains still struggle to distinguish these subtle differences in real conversations. This shows that knowledge and ability are two different things; just learning pronunciation rules does not enable the brain to automatically recognize phonemes—this skill must be developed through extensive listening practice.\n◇Adapting to Connected Speech and Phonological Changes (Bottom-Up) # In natural conversation, words are not pronounced as clearly as in writing. For example, in spoken English, \u0026ldquo;don’t + you\u0026rdquo; often becomes \u0026ldquo;don-chew,\u0026rdquo; and \u0026ldquo;want + to\u0026rdquo; becomes \u0026ldquo;wanna.\u0026rdquo; Similar phenomena are common in French, Spanish, and other languages. If learners do not get enough listening input, their brains will still expect words to appear in standard written form, leading to difficulty understanding speech.\n⚠️Note:\nBy \u0026ldquo;bottom-up,\u0026rdquo; I mean starting from the sounds you notice, then putting them together to see what word they form.\n/k/ + /æ/ + /t/ → cat\nBut because spoken language is often very ambiguous\u0026hellip; bottom-up processing alone is usually not enough to identify the words being spoken.\n◇Using Context to Infer Meaning (Top-Down) # Phonological ambiguity means that multiple words or phrases have the same pronunciation. For example, in English, \u0026ldquo;bat\u0026rdquo; might mean a baseball bat or a flying mammal, and \u0026ldquo;I got a letter\u0026rdquo; and \u0026ldquo;I let her go\u0026rdquo; can sound similar in connected speech. Learners need to rely on context to infer the correct meaning, and this inferencing ability can only be developed through extensive listening in real situations.\n★How to Effectively Improve Language Comprehension # Extensive listening input: Practice listening to your target language for hours every day, even if you don’t understand at first. Listen to native conversations: Choose original podcasts, movies, TV series, etc. without subtitles to train your brain to adapt to real speech. Imitate native pronunciation: Use shadowing and similar methods to improve your recognition and pronunciation skills. Infer meaning from context: Avoid translating word for word; instead, try to understand the overall meaning of sentences. ","date":"23 February 2025","externalUrl":null,"permalink":"/posts/japanese-0-overview/","section":"Blog","summary":"","title":"Japanese Language Acquisition","type":"posts"},{"content":"","date":"23 February 2025","externalUrl":null,"permalink":"/categories/language-acquisition/","section":"Categories","summary":"","title":"Language Acquisition","type":"categories"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":" Complete Deployment Guide for Hugo Blog on GitHub Pages # ★Publishing to GitHub # ◇1. Create GitHub Repository # mywebsite (for Hugo source code) yuuniji.github.io (for generated static files) ◇2. Push mywebsite Repository # git remote add origin https://github.com/yuuniji/mywebsite.git git branch -M main git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main ◇3. Generate Static Files # hugo -D Static files are located in the public/ directory.\n◇4. Push to yuuniji.github.io # cd public git init git remote add origin https://github.com/yuuniji/yuuniji.github.io.git git checkout -b main git add . git commit -m \u0026#34;Deploy Hugo site\u0026#34; git push -f origin main ★Configure GitHub Pages # Enter yuuniji.github.io repository Settings → Pages. Select main branch, save, and wait for deployment to complete. Visit https://yuuniji.github.io to view the blog. ★Automated Deployment (Optional) # ◇1. Add deploy.sh to mywebsite repository # nano deploy.sh Paste the following content:\n#!/bin/bash hugo -D cd public git add . git commit -m \u0026#34;Deploy: $(date)\u0026#34; git push origin main cd .. Save and exit (press Ctrl + X, then Y, and press Enter).\n◇2. Assign Execution Permissions # chmod +x deploy.sh ◇3. Run Deployment Script # ./deploy.sh ★All Done! # After updating the blog, just:\nWrite articles in mywebsite/ directory hugo new posts/xxx.md Run ./deploy.sh Visit https://yuuniji.github.io to view updates 💡 Refer back to this guide if you have any questions! 🚀\n★ My Website Structure # Categories（Fixed large categories） Tags（Keywords） Topics（Series/Themes） Categories: ├── Language Acquisition ├── IT / Technology ├── Reading Notes ├── Life Records └── Reflections \u0026amp; Essays Tags: ├── Japanese, English, Grammar ├── Front-end, JavaScript, Cloud Computing ├── Philosophy, Economics, Psychology, History ├── Travel, 318 Sichuan-Tibet Highway, Photography ├── Time Management, Productivity Improvement... Topics: ├── How to Master Japanese ├── Top 10 Books ├── 2025 Reading Log... ★Hugo Function Extension Guide # ◇Quotes # Create quoteszh.html file and place it in the layouts/shortcodes/ directory of your Hugo site. Then, in content/../_index.md, reference {{\\\u0026lt; quoteszh \u0026gt;}} (remove \\).\n\u0026lt;!-- layouts/shortcodes/quoteszh.html --\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;{{ .Inner }}\u0026lt;/p\u0026gt; \u0026lt;footer\u0026gt;{{ .Get \u0026#34;source\u0026#34; }}\u0026lt;/footer\u0026gt; \u0026lt;/blockquote\u0026gt; \u0026lt;div id=\u0026#34;quote\u0026#34; class=\u0026#34;quote-box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const quotes = [ \u0026#34;\u0026#34;， \u0026#34;\u0026#34;， \u0026#34;\u0026#34; ] // 随机选择一个引语 const randomQuote = quotes[Math.floor(Math.random() * quotes.length)]; // 显示引语 document.getElementById(\u0026#39;quote\u0026#39;).innerHTML = randomQuote; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .quote-box { max-width: 600px; font-size: 0.8rem; text-align: left; .quote-box { animation: fadeIn 1.5s ease-in-out; } @keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } \u0026lt;/style\u0026gt; ◇Add Website Runtime # Add the following code to the newly created /layouts/partials/extend-footer.html:\n\u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 用于显示网站运行时间的容器 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function show_runtime() { // 每隔 1 秒执行一次 show_runtime，实现实时更新 setTimeout(show_runtime, 1000); // 设置网站起始运行时间（2025年2月22日 00:00:00） const startDate = new Date(\u0026#34;2025/02/22 00:00:00\u0026#34;); // 获取当前时间 const now = new Date(); // 计算时间差（毫秒） const diff = now.getTime() - startDate.getTime(); // 计算运行的天、小时、分钟、秒 const days = Math.floor(diff / (24 * 60 * 60 * 1000)); // 天数 const hours = Math.floor((diff % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)); // 小时 const minutes = Math.floor((diff % (60 * 60 * 1000)) / (60 * 1000)); // 分钟 const seconds = Math.floor((diff % (60 * 1000)) / 1000); // 秒 // 获取当前 HTML 页面设置的语言（由 Hugo 生成，如 \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt;） const lang = document.documentElement.lang || \u0026#34;en\u0026#34;; // 默认英文 // 各语言的显示文本模板 const translations = { zh: `网站已运行 ${days} 天 ${hours} 小时 ${minutes} 分 ${seconds} 秒`, ja: `サイトは稼働してから ${days}日 ${hours}時間 ${minutes}分 ${seconds}秒`, en: `Site has been running for ${days}d ${hours}h ${minutes}m ${seconds}s` }; // 根据当前语言选择显示内容，若找不到则使用英文 const output = translations[lang] || translations[\u0026#34;en\u0026#34;]; // 将显示内容写入页面中 document.getElementById(\u0026#34;runtime_span\u0026#34;).innerHTML = output; } // 初始化运行 show_runtime(); \u0026lt;/script\u0026gt; ◇Giscus Comments # Check params.toml # article.showComments = true\nPrepare GitHub Repository # Login to your GitHub account. Open your blog repository (e.g., yourname/yourwebsite). Ensure that Discussions is enabled: Go to Settings → Features → Check Discussions. Go to the Discussions page and create a Discussion Category (e.g., General). Generate Giscus Embed Code # Open Giscus configuration page: 👉 https://giscus.app\nConfigure as follows:\nRepository: Your blog repository (e.g. yourname/yourblog) Repository ID / Category / Category ID: Automatically generated based on the information in your Discussions Discussion Mapping: It is recommended to select pathname Reaction: Enable (👍, etc.) Input Position: bottom (comment box at the bottom) Theme: preferred_color_scheme (automatically adapt to light/dark colors) Copy the generated \u0026lt;script\u0026gt; code.\nInsert Giscus code into Hugo template # You can put the Giscus code into a separate file, for example: layouts/partials/giscus.html\n\u0026lt;div id=\u0026#34;giscus_container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;yourname/yourblog\u0026#34; data-repo-id=\u0026#34;Your repo ID\u0026#34; data-category=\u0026#34;General\u0026#34; data-category-id=\u0026#34;Your category ID\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;bottom\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Then in layouts/partials/comments.html article template:\n{{ partial \u0026#34;giscus.html\u0026#34; . }} ◇Music Player # A mini player fixed to the bottom-right corner of the screen Expandable/collapsible playlist Control buttons for play/pause, previous, and next Preserve playback state when switching between articles (using localStorage) Frosted glass background design for the music player Create file # \u0026lt;!-- layouts/partials/musicplayer.html --\u0026gt; \u0026lt;style scoped\u0026gt; .music-player-container { position: fixed; bottom: 12px; left: 12px; z-index: 9999; font-family: system-ui, sans-serif; font-size: 13px; } .music-player-container .music-panel { display: none; margin-bottom: 6px; background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 12px; padding: 12px 14px; width: 200px; max-height: 180px; overflow-y: auto; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(16px) saturate(180%); -webkit-backdrop-filter: blur(16px) saturate(180%); } .music-player-container .music-panel.show { display: block; } .music-player-container .music-title { font-size: 13px; color: var(--color-primary-300); font-weight: 500; margin-bottom: 6px; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); } .music-player-container .playlist { list-style: none; padding: 0; margin: 0; } .music-player-container .playlist li { padding: 4px 6px; border-radius: 6px; cursor: pointer; color: var(--content); text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); transition: all 0.2s ease; } .music-player-container .playlist li:hover { background: rgba(255, 255, 255, 0.15); transform: translateY(-1px); } .music-player-container .playlist li.active { background: rgba(255, 255, 255, 0.2); color: var(--accent); font-weight: 600; border: 1px solid rgba(255, 255, 255, 0.3); } .music-player-container .mini-player { background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 100px; display: flex; gap: 8px; padding: 6px 10px; align-items: center; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(20px) saturate(180%); -webkit-backdrop-filter: blur(20px) saturate(180%); transition: all 0.3s ease; } .music-player-container .mini-player:hover { background: rgba(255, 255, 255, 0.15); transform: translateY(-2px); box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4); } .music-player-container .mini-player button { background: none; border: none; font-size: 16px; color: var(--secondary); cursor: pointer; padding: 4px; border-radius: 50%; transition: all 0.2s ease; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); } .music-player-container .mini-player button.hidden { display: none; } .music-player-container.hidden { transform: translateX(-100%); opacity: 0; pointer-events: none; } .show-player-btn { position: fixed; bottom: 12px; left: 12px; background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 50%; width: 40px; height: 40px; display: none; align-items: center; justify-content: center; cursor: pointer; font-size: 16px; color: var(--secondary); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(20px) saturate(180%); -webkit-backdrop-filter: blur(20px) saturate(180%); transition: all 0.3s ease; z-index: 9999; } .music-player-container.hidden + .show-player-btn { display: flex; } .show-player-btn:hover { background: rgba(255, 255, 255, 0.15); transform: scale(1.1); } .music-player-container .mini-player button:hover { color: var(--accent); background: rgba(255, 255, 255, 0.1); transform: scale(1.1); } .music-player-container .mini-player button:active { color: var(--accent-active); transform: scale(0.95); } .music-player-container audio { display: none; } /* 滚动条美化 */ .music-player-container .music-panel::-webkit-scrollbar { width: 4px; } .music-player-container .music-panel::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.1); border-radius: 2px; } .music-player-container .music-panel::-webkit-scrollbar-thumb { background: rgba(255, 255, 255, 0.3); border-radius: 2px; } .music-player-container .music-panel::-webkit-scrollbar-thumb:hover { background: rgba(255, 255, 255, 0.5); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;music-player-container\u0026#34; id=\u0026#34;musicPlayerContainer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;music-panel\u0026#34; id=\u0026#34;musicPanel\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;music-title\u0026#34; id=\u0026#34;musicTitle\u0026#34;\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;playlist\u0026#34; id=\u0026#34;musicPlaylist\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mini-player\u0026#34; id=\u0026#34;miniPlayer\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;musicTogglePanel\u0026#34; title=\u0026#34;Toggle Playlist\u0026#34;\u0026gt;📂\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicPrevBtn\u0026#34; title=\u0026#34;Previous\u0026#34;\u0026gt;⏮️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicPlayBtn\u0026#34; title=\u0026#34;Play\u0026#34;\u0026gt;▶️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicNextBtn\u0026#34; title=\u0026#34;Next\u0026#34;\u0026gt;⏭️\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;musicHideBtn\u0026#34; title=\u0026#34;Hide Player\u0026#34;\u0026gt;👁️\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;audio id=\u0026#34;musicAudio\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;show-player-btn\u0026#34; id=\u0026#34;showPlayerBtn\u0026#34; title=\u0026#34;Show Music Player\u0026#34;\u0026gt;🎧\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; (function() { \u0026#39;use strict\u0026#39;; // 命名空间前缀，避免全局冲突 const MUSIC_PLAYER_NS = \u0026#39;HugoMusicPlayer_\u0026#39;; const base = \u0026#34;https://yuuniji.github.io/music/lofi_beats/\u0026#34;; const jsonURL = base + \u0026#34;songs.json\u0026#34;; const STORAGE_KEY = MUSIC_PLAYER_NS + \u0026#34;state\u0026#34;; const INTERACT_KEY = MUSIC_PLAYER_NS + \u0026#34;user_interacted\u0026#34;; const HIDDEN_KEY = MUSIC_PLAYER_NS + \u0026#34;hidden\u0026#34;; async function initMusicPanel() { try { const res = await fetch(jsonURL); const songs = await res.json(); if (!songs.length) return; let currentIndex = 0; let isPlaying = false; // 使用带命名空间的ID选择器 const audio = document.getElementById(\u0026#34;musicAudio\u0026#34;); const playBtn = document.getElementById(\u0026#34;musicPlayBtn\u0026#34;); const prevBtn = document.getElementById(\u0026#34;musicPrevBtn\u0026#34;); const nextBtn = document.getElementById(\u0026#34;musicNextBtn\u0026#34;); const toggleBtn = document.getElementById(\u0026#34;musicTogglePanel\u0026#34;); const hideBtn = document.getElementById(\u0026#34;musicHideBtn\u0026#34;); const showBtn = document.getElementById(\u0026#34;showPlayerBtn\u0026#34;); const panel = document.getElementById(\u0026#34;musicPanel\u0026#34;); const title = document.getElementById(\u0026#34;musicTitle\u0026#34;); const playlist = document.getElementById(\u0026#34;musicPlaylist\u0026#34;); // 检查元素是否存在 if (!audio || !playBtn || !prevBtn || !nextBtn || !toggleBtn || !hideBtn || !showBtn || !panel || !title || !playlist) { console.warn(\u0026#39;Music player elements not found\u0026#39;); return; } // 恢复保存的状态 const savedStateStr = localStorage.getItem(STORAGE_KEY); if (savedStateStr) { try { const saved = JSON.parse(savedStateStr); if (saved.index \u0026gt;= 0 \u0026amp;\u0026amp; saved.index \u0026lt; songs.length) { currentIndex = saved.index; audio.currentTime = saved.time || 0; // 恢复播放状态，如果之前是播放状态则继续播放 isPlaying = saved.isPlaying || false; } } catch (e) { console.warn(\u0026#39;Failed to parse saved music player state:\u0026#39;, e); } } // 恢复隐藏状态 const isHidden = localStorage.getItem(HIDDEN_KEY) === \u0026#39;true\u0026#39;; if (isHidden) { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.add(\u0026#39;hidden\u0026#39;); } // 构建播放列表 songs.forEach((song, index) =\u0026gt; { const li = document.createElement(\u0026#34;li\u0026#34;); li.textContent = song.title; li.onclick = function() { currentIndex = index; loadAndPlay(currentIndex); localStorage.setItem(INTERACT_KEY, \u0026#34;true\u0026#34;); }; playlist.appendChild(li); }); function highlight(index) { const listItems = playlist.querySelectorAll(\u0026#34;li\u0026#34;); listItems.forEach((li, idx) =\u0026gt; { li.classList.toggle(\u0026#34;active\u0026#34;, idx === index); }); } function loadAndPlay(index) { audio.src = base + songs[index].file; audio.currentTime = 0; title.textContent = songs[index].title; highlight(index); // 立即高亮 audio.play().then(() =\u0026gt; { isPlaying = true; playBtn.textContent = \u0026#34;⏸️\u0026#34;; saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to play audio:\u0026#39;, error); isPlaying = false; playBtn.textContent = \u0026#34;▶️\u0026#34;; }); } function saveState() { try { localStorage.setItem(STORAGE_KEY, JSON.stringify({ index: currentIndex, time: audio.currentTime, isPlaying: !audio.paused })); } catch (e) { console.warn(\u0026#39;Failed to save music player state:\u0026#39;, e); } } // 初始化显示 audio.src = base + songs[currentIndex].file; title.textContent = songs[currentIndex].title; highlight(currentIndex); // 根据恢复的状态决定是否播放 if (isPlaying) { audio.play().then(() =\u0026gt; { updatePlayButton(); saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to auto-play audio:\u0026#39;, error); isPlaying = false; updatePlayButton(); }); } else { audio.pause(); isPlaying = false; updatePlayButton(); // 确保按钮状态正确 } // 更新播放按钮状态的函数 function updatePlayButton() { if (audio.paused) { playBtn.textContent = \u0026#34;▶️\u0026#34;; isPlaying = false; // 暂停状态时隐藏其他按钮 prevBtn.classList.add(\u0026#39;hidden\u0026#39;); nextBtn.classList.add(\u0026#39;hidden\u0026#39;); toggleBtn.classList.add(\u0026#39;hidden\u0026#39;); hideBtn.classList.add(\u0026#39;hidden\u0026#39;); } else { playBtn.textContent = \u0026#34;⏸️\u0026#34;; isPlaying = true; // 播放状态时显示所有按钮 prevBtn.classList.remove(\u0026#39;hidden\u0026#39;); nextBtn.classList.remove(\u0026#39;hidden\u0026#39;); toggleBtn.classList.remove(\u0026#39;hidden\u0026#39;); hideBtn.classList.remove(\u0026#39;hidden\u0026#39;); } } // 事件监听器 playBtn.onclick = function() { if (audio.paused) { audio.play().then(() =\u0026gt; { updatePlayButton(); saveState(); }).catch((error) =\u0026gt; { console.warn(\u0026#39;Failed to play audio:\u0026#39;, error); updatePlayButton(); }); } else { audio.pause(); updatePlayButton(); saveState(); } }; prevBtn.onclick = function() { currentIndex = (currentIndex - 1 + songs.length) % songs.length; loadAndPlay(currentIndex); }; nextBtn.onclick = function() { currentIndex = (currentIndex + 1) % songs.length; loadAndPlay(currentIndex); }; toggleBtn.onclick = function() { panel.classList.toggle(\u0026#34;show\u0026#34;); }; hideBtn.onclick = function() { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.add(\u0026#39;hidden\u0026#39;); localStorage.setItem(HIDDEN_KEY, \u0026#39;true\u0026#39;); }; showBtn.onclick = function() { document.getElementById(\u0026#34;musicPlayerContainer\u0026#34;).classList.remove(\u0026#39;hidden\u0026#39;); localStorage.setItem(HIDDEN_KEY, \u0026#39;false\u0026#39;); }; // 音频事件监听 audio.ontimeupdate = saveState; audio.onplay = function() { updatePlayButton(); saveState(); }; audio.onpause = function() { updatePlayButton(); saveState(); }; audio.onended = function() { currentIndex = (currentIndex + 1) % songs.length; loadAndPlay(currentIndex); }; // 移除自动播放功能，用户需要手动点击播放 // 确保初始状态为暂停 updatePlayButton(); // 页面卸载时保存状态 window.addEventListener(\u0026#39;beforeunload\u0026#39;, function() { saveState(); }); // 页面隐藏时也保存状态（移动设备切换应用时） document.addEventListener(\u0026#39;visibilitychange\u0026#39;, function() { if (document.hidden) { saveState(); } }); } catch (error) { console.error(\u0026#39;Failed to initialize music player:\u0026#39;, error); } } // 确保DOM加载完成后再初始化 if (document.readyState === \u0026#39;loading\u0026#39;) { document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initMusicPanel); } else { initMusicPanel(); } })(); \u0026lt;/script\u0026gt; In layout template # Add the following code to the newly created /layouts/partials/extend-footer.html:\n{{ partial \u0026#34;musicplayer.html\u0026#34; . }} Icon # https://favicon.io/favicon-generator/\nwebsite/ ├── static/ │ ├── android-chrome-192x192.png │ ├── android-chrome-512x512.png │ ├── apple-touch-icon.png │ ├── favicon.ico │ ├── favicon-16x16.png │ ├── favicon-32x32.png │ └── site.webmanifest 当然，以下是更精简且专业的英文笔记：\n◇Sidenote Shortcode # 1. Usage # Markdown:\n{{\\\u0026lt; sidenote label=\u0026#34;☍\u0026#34; \u0026gt;}}Your note here{{\\\u0026lt; /sidenote \u0026gt;}} (remove `\\`). e.g.: The term \u0026ldquo;sidenote\u0026quot; ☍ A small note that provides extra context without interrupting the flow. is often used in academic writing.\nFile: layouts/shortcodes/sidenote.html\n2. Shortcode (HTML) # {{- $id := .Get \u0026#34;id\u0026#34; | default (printf \u0026#34;sn-%d\u0026#34; (.Page.Scratch.Get \u0026#34;sidenoteID\u0026#34; | default 1)) -}} {{- $label := .Get \u0026#34;label\u0026#34; | default \u0026#34;☍\u0026#34; -}} \u0026lt;span class=\u0026#34;sidenote-block\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;{{ $id }}-toggle\u0026#34; class=\u0026#34;sidenote-label\u0026#34;\u0026gt;{{ $label }}\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;{{ $id }}-toggle\u0026#34; class=\u0026#34;sidenote-toggle\u0026#34; hidden\u0026gt; \u0026lt;span class=\u0026#34;sidenote\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; {{- .Page.Scratch.Set \u0026#34;sidenoteID\u0026#34; ((.Page.Scratch.Get \u0026#34;sidenoteID\u0026#34; | default 1) | add 1) -}} 3. CSS # /* assets/css/custom.css */ .sidenote-block { position: relative; display: inline-block; } .sidenote-label { font-size: 0.8em; vertical-align: super; color: #888; cursor: pointer; user-select: none; } .sidenote { display: none; position: absolute; left: 100%; top: 0; margin-left: 1rem; width: 15rem; font-size: 0.85em; background: var(--sidenote-bg, #f9f9f9); padding: 0.5rem; border-left: 3px solid var(--sidenote-border, #ccc); color: var(--sidenote-text, #333); z-index: 10; box-shadow: 0 0 5px rgba(0,0,0,0.1); } .sidenote-toggle:checked ~ .sidenote { display: inline-block; } /* 深色模式适配（适用于 prefers-color-scheme 或 Blowfish 的 .dark class） */ @media (prefers-color-scheme: dark) { .sidenote { --sidenote-bg: #1e1e1e; --sidenote-text: #ddd; --sidenote-border: #444; } .sidenote-label { --sidenote-label-color: #aaa; } } .dark .sidenote { --sidenote-bg: #1e1e1e; --sidenote-text: #ddd; --sidenote-border: #444; } .dark .sidenote-label { --sidenote-label-color: #aaa; } /* 手机端适配 */ @media (max-width: 768px) { .sidenote { position: relative; left: auto; top: auto; margin-left: 0; margin-top: 0.3rem; width: 100%; border-left: none; border-top: 2px solid var(--sidenote-border, #ccc); background: var(--sidenote-bg, #f2f2f2); } } ","date":"22 February 2025","externalUrl":null,"permalink":"/posts/a/","section":"Blog","summary":"","title":"Deployment and Expansion of My Website","type":"posts"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"GitHub","type":"tags"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","externalUrl":null,"permalink":"/animals/","section":"Animals","summary":"","title":"Animals","type":"animals"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","externalUrl":null,"permalink":"/topics/","section":"Topics","summary":"","title":"Topics","type":"topics"}]